
meteoMN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00001e2e  00001ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800168  00800168  00001f2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035a0  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000106b  00000000  00000000  0000591c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018f2  00000000  00000000  00006987  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000918  00000000  00000000  0000827c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c17  00000000  00000000  00008b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c1b  00000000  00000000  000097ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000b3c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e1 c3       	rjmp	.+1986   	; 0x7c4 <__ctors_end>
       2:	fb c3       	rjmp	.+2038   	; 0x7fa <__bad_interrupt>
       4:	fa c3       	rjmp	.+2036   	; 0x7fa <__bad_interrupt>
       6:	f9 c3       	rjmp	.+2034   	; 0x7fa <__bad_interrupt>
       8:	f8 c3       	rjmp	.+2032   	; 0x7fa <__bad_interrupt>
       a:	f7 c3       	rjmp	.+2030   	; 0x7fa <__bad_interrupt>
       c:	f6 c3       	rjmp	.+2028   	; 0x7fa <__bad_interrupt>
       e:	f5 c3       	rjmp	.+2026   	; 0x7fa <__bad_interrupt>
      10:	f4 c3       	rjmp	.+2024   	; 0x7fa <__bad_interrupt>
      12:	f3 c3       	rjmp	.+2022   	; 0x7fa <__bad_interrupt>
      14:	f2 c3       	rjmp	.+2020   	; 0x7fa <__bad_interrupt>
      16:	6c c8       	rjmp	.-3880   	; 0xfffff0f0 <__eeprom_end+0xff7ef0f0>
      18:	f0 c3       	rjmp	.+2016   	; 0x7fa <__bad_interrupt>
      1a:	ef c3       	rjmp	.+2014   	; 0x7fa <__bad_interrupt>
      1c:	ee c3       	rjmp	.+2012   	; 0x7fa <__bad_interrupt>
      1e:	ed c3       	rjmp	.+2010   	; 0x7fa <__bad_interrupt>
      20:	ec c3       	rjmp	.+2008   	; 0x7fa <__bad_interrupt>
      22:	eb c3       	rjmp	.+2006   	; 0x7fa <__bad_interrupt>
      24:	ea c3       	rjmp	.+2004   	; 0x7fa <__bad_interrupt>
      26:	e9 c3       	rjmp	.+2002   	; 0x7fa <__bad_interrupt>
      28:	e8 c3       	rjmp	.+2000   	; 0x7fa <__bad_interrupt>
      2a:	e7 c3       	rjmp	.+1998   	; 0x7fa <__bad_interrupt>
      2c:	e6 c3       	rjmp	.+1996   	; 0x7fa <__bad_interrupt>
      2e:	e5 c3       	rjmp	.+1994   	; 0x7fa <__bad_interrupt>
      30:	e4 c3       	rjmp	.+1992   	; 0x7fa <__bad_interrupt>
      32:	e3 c3       	rjmp	.+1990   	; 0x7fa <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	ae d5       	rcall	.+2908   	; 0xb92 <draw_clock+0x4>
      36:	f0 a8       	ldd	r15, Z+48	; 0x30
      38:	3f d3       	rcall	.+1662   	; 0x6b8 <__stack+0x1b9>
      3a:	00 40       	sbci	r16, 0x00	; 0
      3c:	8d 14       	cp	r8, r13
      3e:	20 00       	.word	0x0020	; ????
      40:	a1 c8       	rjmp	.-3774   	; 0xfffff184 <__eeprom_end+0xff7ef184>
      42:	da 12       	cpse	r13, r26
      44:	81 3f       	cpi	r24, 0xF1	; 241
      46:	d9 22       	and	r13, r25
      48:	db 20       	and	r13, r11
      4a:	a4 a6       	std	Z+44, r10	; 0x2c
      4c:	2e af       	std	Y+62, r18	; 0x3e
      4e:	22 00       	.word	0x0022	; ????
      50:	3f 21       	and	r19, r15
      52:	00 7f       	andi	r16, 0xF0	; 240

00000054 <number9>:
      54:	00 00 00 00 c0 f0 78 18 1c 0c 0e 06 0e 1c 18 38     ......x........8
      64:	f0 e0 00 00 00 00 00 00 00 00 00 00 3f 7f 60 60     ............?.``
      74:	e0 c0 c0 c0 c0 c0 e0 f0 ff ff 00 00 00 00 00 00     ................
	...
      90:	00 00 01 ff ff 03 00 00 00 00 00 00 00 00 00 0f     ................
      a0:	3f 78 60 60 60 60 60 60 70 38 3e 0f 03 00 00 00     ?x``````p8>.....
      b0:	00 00 00 00                                         ....

000000b4 <number8>:
      b4:	00 00 00 00 c0 e0 70 38 1c 0e 07 07 06 0e 1c 78     ......p8.......x
      c4:	f0 c0 00 00 00 00 00 00 00 00 00 00 1f 3f 30 70     .............?0p
      d4:	60 e0 c0 c0 c0 e0 70 3e 3f 03 00 00 00 00 00 00     `.....p>?.......
      e4:	00 00 00 00 c0 f0 7c 1e 07 03 03 01 01 03 03 07     ......|.........
      f4:	3e fc e0 00 00 00 00 00 00 00 00 00 03 0f 1e 18     >...............
     104:	18 18 18 18 18 18 1c 0e 07 03 01 00 00 00 00 00     ................

00000114 <number7>:
     114:	00 10 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
     124:	18 18 f8 f8 30 00 00 00 00 00 00 00 00 00 00 00     ....0...........
     134:	00 00 00 00 00 00 00 c0 fc 7f 07 01 00 00 00 00     ................
     144:	00 00 00 00 00 00 00 04 06 06 06 86 e6 fe 3e 0f     ..............>.
     154:	07 06 06 06 04 00 00 00 00 00 00 00 00 00 00 00     ................
     164:	40 70 7c 1f 07 00 00 00 00 00 00 00 00 00 00 00     @p|.............

00000174 <number6>:
     174:	00 00 00 00 00 00 80 c0 e0 70 30 30 30 30 70 60     .........p0000p`
     184:	e0 c0 80 00 00 00 00 00 00 00 00 00 f8 fe 0f 03     ................
     194:	80 80 c0 c0 c0 c0 c0 80 00 01 07 07 00 00 00 00     ................
     1a4:	00 00 00 00 ff ff 0e 07 03 01 01 00 00 00 01 03     ................
     1b4:	1f fe f0 00 00 00 00 00 00 00 00 00 01 07 0f 0c     ................
     1c4:	1c 18 38 30 30 30 38 1c 0e 0f 03 00 00 00 00 00     ..80008.........

000001d4 <number5>:
     1d4:	00 00 00 f0 f8 18 18 18 18 18 18 18 18 18 18 18     ................
     1e4:	18 18 18 10 00 00 00 00 00 00 00 1f ff f0 80 80     ................
     1f4:	c0 c0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00     ................
     204:	00 00 00 00 03 03 03 01 01 00 00 00 01 01 03 07     ................
     214:	1e fc f0 00 00 00 00 00 00 00 00 00 1c 3c 30 30     .............<00
     224:	30 30 30 30 30 38 18 1c 0f 07 01 00 00 00 00 00     000008..........

00000234 <number4>:
     234:	00 00 00 00 00 00 fc fc 00 00 00 00 00 00 00 00     ................
	...
     250:	80 f0 ff 1f 00 00 00 00 00 00 00 00 f0 f0 00 00     ................
	...
     268:	03 03 03 03 03 03 03 03 03 03 03 03 ff ff 03 02     ................
	...
     28c:	3f 3f 00 00 00 00 00 00                             ??......

00000294 <number3>:
     294:	00 00 00 00 c0 e0 70 30 30 38 18 18 18 18 18 38     ......p008.....8
     2a4:	f0 e0 00 00 00 00 00 00 00 00 00 03 03 01 00 00     ................
     2b4:	00 00 80 80 80 80 c0 c0 f1 7f 1f 00 00 00 00 00     ................
	...
     2cc:	00 01 03 03 03 03 07 0e fc f8 00 00 00 00 00 00     ................
     2dc:	00 00 03 07 06 0e 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     2ec:	0f 07 00 00 00 00 00 00                             ........

000002f4 <number2>:
     2f4:	00 00 00 00 c0 e0 70 38 18 18 18 18 38 70 e0 c0     ......p8....8p..
	...
     310:	03 03 00 00 00 00 00 00 80 e0 ff 3f 00 00 00 00     ...........?....
	...
     328:	00 00 80 c0 f0 78 1c 0e 07 03 00 00 00 00 00 00     .....x..........
     338:	00 00 00 00 00 00 00 18 1e 1f 1b 19 18 18 18 18     ................
     348:	18 18 18 18 18 18 18 10 00 00 00 00                 ............

00000354 <number1>:
	...
     360:	c0 e0 f0 f0 e0 00 00 00 00 00 00 00 00 00 00 00     ................
     370:	00 00 80 e0 f0 38 1c 1f 07 03 ff ff 03 00 00 00     .....8..........
	...
     388:	00 00 03 01 00 00 00 00 c0 fe 7f 03 00 00 00 00     ................
	...
     3a0:	00 20 30 30 30 30 30 38 3f 3f 30 30 30 30 30 30     . 000008??000000
     3b0:	20 00 00 00                                          ...

000003b4 <number0>:
     3b4:	00 00 00 00 00 00 c0 e0 70 38 1c 08 0c 18 38 70     ........p8....8p
     3c4:	e0 c0 80 00 00 00 00 00 00 00 00 00 fc ff 07 01     ................
	...
     3dc:	00 01 0f ff f8 00 00 00 00 00 00 00 7f ff c0 00     ................
	...
     3f4:	00 00 e0 ff 3f 00 00 00 00 00 00 00 00 01 03 07     ....?...........
     404:	0e 0c 1c 18 18 18 18 18 1c 0c 0f 07 00 00 00 00     ................

00000414 <ssd1306xled_font8x16data>:
	...
     424:	00 00 00 f8 00 00 00 00 00 00 00 33 30 00 00 00     ...........30...
     434:	00 10 0c 06 10 0c 06 00 00 00 00 00 00 00 00 00     ................
     444:	40 c0 78 40 c0 78 40 00 04 3f 04 04 3f 04 04 00     @.x@.x@..?..?...
     454:	00 70 88 fc 08 30 00 00 00 18 20 ff 21 1e 00 00     .p...0.... .!...
     464:	f0 08 f0 00 e0 18 00 00 00 21 1c 03 1e 21 1e 00     .........!...!..
     474:	00 f0 08 88 70 00 00 00 1e 21 23 24 19 27 21 10     ....p....!#$.'!.
     484:	10 16 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     494:	00 00 00 e0 18 04 02 00 00 00 00 07 18 20 40 00     ............. @.
     4a4:	00 02 04 18 e0 00 00 00 00 40 20 18 07 00 00 00     .........@ .....
     4b4:	40 40 80 f0 80 40 40 00 02 02 01 0f 01 02 02 00     @@...@@.........
     4c4:	00 00 00 f0 00 00 00 00 01 01 01 1f 01 01 01 00     ................
	...
     4dc:	80 b0 70 00 00 00 00 00 00 00 00 00 00 00 00 00     ..p.............
     4ec:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
     4fc:	00 30 30 00 00 00 00 00 00 00 00 00 80 60 18 04     .00..........`..
     50c:	00 60 18 06 01 00 00 00 00 e0 10 08 08 10 e0 00     .`..............
     51c:	00 0f 10 20 20 10 0f 00 00 10 10 f8 00 00 00 00     ...  ...........
     52c:	00 20 20 3f 20 20 00 00 00 70 08 08 08 88 70 00     .  ?  ...p....p.
     53c:	00 30 28 24 22 21 30 00 00 30 08 88 88 48 30 00     .0($"!0..0...H0.
     54c:	00 18 20 20 20 11 0e 00 00 00 c0 20 10 f8 00 00     ..   ...... ....
     55c:	00 07 04 24 24 3f 24 00 00 f8 08 88 88 08 08 00     ...$$?$.........
     56c:	00 19 21 20 20 11 0e 00 00 e0 10 88 88 18 00 00     ..!  ...........
     57c:	00 0f 11 20 20 11 0e 00 00 38 08 08 c8 38 08 00     ...  ....8...8..
     58c:	00 00 00 3f 00 00 00 00 00 70 88 08 08 88 70 00     ...?.....p....p.
     59c:	00 1c 22 21 21 22 1c 00 00 e0 10 08 08 10 e0 00     .."!!"..........
     5ac:	00 00 31 22 22 11 0f 00 00 00 00 c0 c0 00 00 00     ..1""...........
     5bc:	00 00 00 30 30 00 00 00 00 00 00 80 00 00 00 00     ...00...........
     5cc:	00 00 80 60 00 00 00 00 00 00 80 40 20 10 08 00     ...`.......@ ...
     5dc:	00 01 02 04 08 10 20 00 40 40 40 40 40 40 40 00     ...... .@@@@@@@.
     5ec:	04 04 04 04 04 04 04 00 00 08 10 20 40 80 00 00     ........... @...
     5fc:	00 20 10 08 04 02 01 00 00 70 48 08 08 08 f0 00     . .......pH.....
     60c:	00 00 00 30 36 01 00 00 c0 30 c8 28 e8 10 e0 00     ...06....0.(....
     61c:	07 18 27 24 23 14 0b 00 00 00 c0 38 e0 00 00 00     ..'$#......8....
     62c:	20 3c 23 02 02 27 38 20 08 f8 88 88 88 70 00 00      <#..'8 .....p..
     63c:	20 3f 20 20 20 11 0e 00 c0 30 08 08 08 08 38 00      ?   ....0....8.
     64c:	07 18 20 20 20 10 08 00 08 f8 08 08 08 10 e0 00     ..   ...........
     65c:	20 3f 20 20 20 10 0f 00 08 f8 88 88 e8 08 10 00      ?   ...........
     66c:	20 3f 20 20 23 20 18 00 08 f8 88 88 e8 08 10 00      ?  # ..........
     67c:	20 3f 20 00 03 00 00 00 c0 30 08 08 08 38 00 00      ? ......0...8..
     68c:	07 18 20 20 22 1e 02 00 08 f8 08 00 00 08 f8 08     ..  "...........
     69c:	20 3f 21 01 01 21 3f 20 00 08 08 f8 08 08 00 00      ?!..!? ........
     6ac:	00 20 20 3f 20 20 00 00 00 00 08 08 f8 08 08 00     .  ?  ..........
     6bc:	c0 80 80 80 7f 00 00 00 08 f8 88 c0 28 18 08 00     ............(...
     6cc:	20 3f 20 01 26 38 20 00 08 f8 08 00 00 00 00 00      ? .&8 .........
     6dc:	20 3f 20 20 20 20 30 00 08 f8 f8 00 f8 f8 08 00      ?    0.........
     6ec:	20 3f 00 3f 00 3f 20 00 08 f8 30 c0 00 08 f8 08      ?.?.? ...0.....
     6fc:	20 3f 20 00 07 18 3f 00 e0 10 08 08 08 10 e0 00      ? ...?.........
     70c:	0f 10 20 20 20 10 0f 00 08 f8 08 08 08 08 f0 00     ..   ...........
     71c:	20 3f 21 01 01 01 00 00 e0 10 08 08 08 10 e0 00      ?!.............
     72c:	0f 18 24 24 38 50 4f 00 08 f8 88 88 88 88 70 00     ..$$8PO.......p.
     73c:	20 3f 20 00 03 0c 30 20 00 70 88 08 08 08 38 00      ? ...0 .p....8.
     74c:	00 38 20 21 21 22 1c 00 18 08 08 f8 08 08 18 00     .8 !!"..........
     75c:	00 00 20 3f 20 00 00 00 08 f8 08 00 00 08 f8 08     .. ? ...........
     76c:	00 1f 20 20 20 20 1f 00 08 78 88 00 00 c8 38 08     ..    ...x....8.
     77c:	00 00 07 38 0e 01 00 00 f8 08 00 f8 00 08 f8 00     ...8............
     78c:	03 3c 07 00 07 3c 03 00 08 18 68 80 80 68 18 08     .<...<....h..h..
     79c:	20 30 2c 03 03 2c 30 20 08 38 c8 00 c8 38 08 00      0,..,0 .8...8..
     7ac:	00 00 20 3f 20 00 00 00 10 08 08 08 c8 38 08 00     .. ? ........8..
     7bc:	20 38 26 21 20 20 18 00                              8&!  ..

000007c4 <__ctors_end>:
     7c4:	11 24       	eor	r1, r1
     7c6:	1f be       	out	0x3f, r1	; 63
     7c8:	cf ef       	ldi	r28, 0xFF	; 255
     7ca:	d4 e0       	ldi	r29, 0x04	; 4
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	cd bf       	out	0x3d, r28	; 61

000007d0 <__do_copy_data>:
     7d0:	11 e0       	ldi	r17, 0x01	; 1
     7d2:	a0 e0       	ldi	r26, 0x00	; 0
     7d4:	b1 e0       	ldi	r27, 0x01	; 1
     7d6:	ee e2       	ldi	r30, 0x2E	; 46
     7d8:	fe e1       	ldi	r31, 0x1E	; 30
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <__do_copy_data+0x10>
     7dc:	05 90       	lpm	r0, Z+
     7de:	0d 92       	st	X+, r0
     7e0:	a8 36       	cpi	r26, 0x68	; 104
     7e2:	b1 07       	cpc	r27, r17
     7e4:	d9 f7       	brne	.-10     	; 0x7dc <__do_copy_data+0xc>

000007e6 <__do_clear_bss>:
     7e6:	21 e0       	ldi	r18, 0x01	; 1
     7e8:	a8 e6       	ldi	r26, 0x68	; 104
     7ea:	b1 e0       	ldi	r27, 0x01	; 1
     7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <.do_clear_bss_start>

000007ee <.do_clear_bss_loop>:
     7ee:	1d 92       	st	X+, r1

000007f0 <.do_clear_bss_start>:
     7f0:	a9 38       	cpi	r26, 0x89	; 137
     7f2:	b2 07       	cpc	r27, r18
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <.do_clear_bss_loop>
     7f6:	6f d4       	rcall	.+2270   	; 0x10d6 <main>
     7f8:	18 cb       	rjmp	.-2512   	; 0xfffffe2a <__eeprom_end+0xff7efe2a>

000007fa <__bad_interrupt>:
     7fa:	02 cc       	rjmp	.-2044   	; 0x0 <__vectors>

000007fc <ssd1306_start_command>:

void ssd1306tx_string(char *s) {
	while (*s) {
		ssd1306tx_char(*s++);
	}
}
     7fc:	1c d1       	rcall	.+568    	; 0xa36 <I2C_start>
     7fe:	88 e7       	ldi	r24, 0x78	; 120
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	2b d1       	rcall	.+598    	; 0xa5a <I2C_write>
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	28 d1       	rcall	.+592    	; 0xa5a <I2C_write>
     80a:	08 95       	ret

0000080c <ssd1306_start_data>:
     80c:	14 d1       	rcall	.+552    	; 0xa36 <I2C_start>
     80e:	88 e7       	ldi	r24, 0x78	; 120
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	23 d1       	rcall	.+582    	; 0xa5a <I2C_write>
     814:	80 e4       	ldi	r24, 0x40	; 64
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	20 d1       	rcall	.+576    	; 0xa5a <I2C_write>
     81a:	08 95       	ret

0000081c <ssd1306_init>:
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	eb df       	rcall	.-42     	; 0x7fc <ssd1306_start_command>
     826:	c4 e3       	ldi	r28, 0x34	; 52
     828:	d0 e0       	ldi	r29, 0x00	; 0
     82a:	04 e5       	ldi	r16, 0x54	; 84
     82c:	10 e0       	ldi	r17, 0x00	; 0
     82e:	fe 01       	movw	r30, r28
     830:	84 91       	lpm	r24, Z
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	12 d1       	rcall	.+548    	; 0xa5a <I2C_write>
     836:	21 96       	adiw	r28, 0x01	; 1
     838:	c0 17       	cp	r28, r16
     83a:	d1 07       	cpc	r29, r17
     83c:	c1 f7       	brne	.-16     	; 0x82e <ssd1306_init+0x12>
     83e:	04 d1       	rcall	.+520    	; 0xa48 <I2C_stop>
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <ssd1306_setpos>:
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	c8 2f       	mov	r28, r24
     850:	d6 2f       	mov	r29, r22
     852:	d4 df       	rcall	.-88     	; 0x7fc <ssd1306_start_command>
     854:	d7 70       	andi	r29, 0x07	; 7
     856:	8d 2f       	mov	r24, r29
     858:	80 6b       	ori	r24, 0xB0	; 176
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	fe d0       	rcall	.+508    	; 0xa5a <I2C_write>
     85e:	8c 2f       	mov	r24, r28
     860:	8f 70       	andi	r24, 0x0F	; 15
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	fa d0       	rcall	.+500    	; 0xa5a <I2C_write>
     866:	c2 95       	swap	r28
     868:	cf 70       	andi	r28, 0x0F	; 15
     86a:	8c 2f       	mov	r24, r28
     86c:	80 61       	ori	r24, 0x10	; 16
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	f4 d0       	rcall	.+488    	; 0xa5a <I2C_write>
     872:	ea d0       	rcall	.+468    	; 0xa48 <I2C_stop>
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <ssd1306_stop>:
     87a:	e6 d0       	rcall	.+460    	; 0xa48 <I2C_stop>
     87c:	08 95       	ret

0000087e <ssd1306_draw_bmp>:
     87e:	6f 92       	push	r6
     880:	7f 92       	push	r7
     882:	8f 92       	push	r8
     884:	9f 92       	push	r9
     886:	af 92       	push	r10
     888:	bf 92       	push	r11
     88a:	cf 92       	push	r12
     88c:	df 92       	push	r13
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	88 2e       	mov	r8, r24
     89c:	96 2e       	mov	r9, r22
     89e:	74 2e       	mov	r7, r20
     8a0:	62 2e       	mov	r6, r18
     8a2:	62 17       	cp	r22, r18
     8a4:	18 f5       	brcc	.+70     	; 0x8ec <ssd1306_draw_bmp+0x6e>
     8a6:	c1 2c       	mov	r12, r1
     8a8:	d1 2c       	mov	r13, r1
     8aa:	aa 24       	eor	r10, r10
     8ac:	aa 94       	dec	r10
     8ae:	a4 0e       	add	r10, r20
     8b0:	a8 1a       	sub	r10, r24
     8b2:	b1 2c       	mov	r11, r1
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	a8 1a       	sub	r10, r24
     8b8:	b8 0a       	sbc	r11, r24
     8ba:	69 2d       	mov	r22, r9
     8bc:	88 2d       	mov	r24, r8
     8be:	c5 df       	rcall	.-118    	; 0x84a <ssd1306_setpos>
     8c0:	a5 df       	rcall	.-182    	; 0x80c <ssd1306_start_data>
     8c2:	87 14       	cp	r8, r7
     8c4:	80 f4       	brcc	.+32     	; 0x8e6 <ssd1306_draw_bmp+0x68>
     8c6:	e8 01       	movw	r28, r16
     8c8:	cc 0d       	add	r28, r12
     8ca:	dd 1d       	adc	r29, r13
     8cc:	ca 0c       	add	r12, r10
     8ce:	db 1c       	adc	r13, r11
     8d0:	78 01       	movw	r14, r16
     8d2:	ec 0c       	add	r14, r12
     8d4:	fd 1c       	adc	r15, r13
     8d6:	fe 01       	movw	r30, r28
     8d8:	84 91       	lpm	r24, Z
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	be d0       	rcall	.+380    	; 0xa5a <I2C_write>
     8de:	21 96       	adiw	r28, 0x01	; 1
     8e0:	ce 15       	cp	r28, r14
     8e2:	df 05       	cpc	r29, r15
     8e4:	c1 f7       	brne	.-16     	; 0x8d6 <ssd1306_draw_bmp+0x58>
     8e6:	93 94       	inc	r9
     8e8:	96 14       	cp	r9, r6
     8ea:	38 f3       	brcs	.-50     	; 0x8ba <ssd1306_draw_bmp+0x3c>
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	ff 90       	pop	r15
     8f6:	ef 90       	pop	r14
     8f8:	df 90       	pop	r13
     8fa:	cf 90       	pop	r12
     8fc:	bf 90       	pop	r11
     8fe:	af 90       	pop	r10
     900:	9f 90       	pop	r9
     902:	8f 90       	pop	r8
     904:	7f 90       	pop	r7
     906:	6f 90       	pop	r6
     908:	08 95       	ret

0000090a <ssd1306_clear_display>:
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	d0 e0       	ldi	r29, 0x00	; 0
     910:	6d 2f       	mov	r22, r29
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	9a df       	rcall	.-204    	; 0x84a <ssd1306_setpos>
     916:	7a df       	rcall	.-268    	; 0x80c <ssd1306_start_data>
     918:	c0 e8       	ldi	r28, 0x80	; 128
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	9d d0       	rcall	.+314    	; 0xa5a <I2C_write>
     920:	c1 50       	subi	r28, 0x01	; 1
     922:	d9 f7       	brne	.-10     	; 0x91a <ssd1306_clear_display+0x10>
     924:	df 5f       	subi	r29, 0xFF	; 255
     926:	d8 30       	cpi	r29, 0x08	; 8
     928:	99 f7       	brne	.-26     	; 0x910 <ssd1306_clear_display+0x6>
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <ssd1306tx_init>:
     930:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <ssd1306tx_font_src+0x1>
     934:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <ssd1306tx_font_src>
     938:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <ssd1306tx_font_char_base>
     93c:	08 95       	ret

0000093e <ssd1306tx_stringxy>:

void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
     93e:	8f 92       	push	r8
     940:	9f 92       	push	r9
     942:	af 92       	push	r10
     944:	bf 92       	push	r11
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	6c 01       	movw	r12, r24
     958:	96 2e       	mov	r9, r22
     95a:	84 2e       	mov	r8, r20
	uint16_t j, k = 0;
	while (s[k] != '\0') {
     95c:	f9 01       	movw	r30, r18
     95e:	a0 80       	ld	r10, Z
     960:	aa 20       	and	r10, r10
     962:	09 f4       	brne	.+2      	; 0x966 <ssd1306tx_stringxy+0x28>
     964:	44 c0       	rjmp	.+136    	; 0x9ee <ssd1306tx_stringxy+0xb0>
     966:	79 01       	movw	r14, r18
     968:	ff ef       	ldi	r31, 0xFF	; 255
     96a:	ef 1a       	sub	r14, r31
     96c:	ff 0a       	sbc	r15, r31
		j = s[k] * 16 - (32 * 16); // Convert ASCII code to font data index. NOTE: (x*16) already optimized to (x<<4).
     96e:	b1 2c       	mov	r11, r1
     970:	80 e2       	ldi	r24, 0x20	; 32
     972:	a8 1a       	sub	r10, r24
     974:	b1 08       	sbc	r11, r1
     976:	aa 0c       	add	r10, r10
     978:	bb 1c       	adc	r11, r11
     97a:	aa 0c       	add	r10, r10
     97c:	bb 1c       	adc	r11, r11
     97e:	aa 0c       	add	r10, r10
     980:	bb 1c       	adc	r11, r11
     982:	aa 0c       	add	r10, r10
     984:	bb 1c       	adc	r11, r11
		if (x > 120) {
     986:	e8 e7       	ldi	r30, 0x78	; 120
     988:	e9 15       	cp	r30, r9
     98a:	10 f4       	brcc	.+4      	; 0x990 <ssd1306tx_stringxy+0x52>
			x = 0;    // Go to the next line.
			y++;
     98c:	83 94       	inc	r8
void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
	uint16_t j, k = 0;
	while (s[k] != '\0') {
		j = s[k] * 16 - (32 * 16); // Convert ASCII code to font data index. NOTE: (x*16) already optimized to (x<<4).
		if (x > 120) {
			x = 0;    // Go to the next line.
     98e:	91 2c       	mov	r9, r1
			y++;
		}
		ssd1306_setpos(x, y);
     990:	68 2d       	mov	r22, r8
     992:	89 2d       	mov	r24, r9
     994:	5a df       	rcall	.-332    	; 0x84a <ssd1306_setpos>
		ssd1306_start_data();
     996:	3a df       	rcall	.-396    	; 0x80c <ssd1306_start_data>
     998:	86 01       	movw	r16, r12
     99a:	0a 0d       	add	r16, r10
     99c:	1b 1d       	adc	r17, r11
     99e:	e5 01       	movw	r28, r10
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	cc 0d       	add	r28, r12
     9a4:	dd 1d       	adc	r29, r13
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
     9a6:	f8 01       	movw	r30, r16
     9a8:	84 91       	lpm	r24, Z
	}
	I2C_stop();	// Finish transmission
}

void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	56 d0       	rcall	.+172    	; 0xa5a <I2C_write>
     9ae:	0f 5f       	subi	r16, 0xFF	; 255
     9b0:	1f 4f       	sbci	r17, 0xFF	; 255
			x = 0;    // Go to the next line.
			y++;
		}
		ssd1306_setpos(x, y);
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
     9b2:	0c 17       	cp	r16, r28
     9b4:	1d 07       	cpc	r17, r29
     9b6:	b9 f7       	brne	.-18     	; 0x9a6 <ssd1306tx_stringxy+0x68>
void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
}

void ssd1306_stop(void) {
	I2C_stop();
     9b8:	47 d0       	rcall	.+142    	; 0xa48 <I2C_stop>
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
		}
		ssd1306_stop();
		ssd1306_setpos(x, y + 1);
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	68 0d       	add	r22, r8
     9be:	89 2d       	mov	r24, r9
     9c0:	44 df       	rcall	.-376    	; 0x84a <ssd1306_setpos>
		ssd1306_start_data();
     9c2:	24 df       	rcall	.-440    	; 0x80c <ssd1306_start_data>
     9c4:	85 01       	movw	r16, r10
     9c6:	00 5f       	subi	r16, 0xF0	; 240
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ca:	0c 0d       	add	r16, r12
     9cc:	1d 1d       	adc	r17, r13
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i + 8]));
     9ce:	fe 01       	movw	r30, r28
     9d0:	84 91       	lpm	r24, Z
	}
	I2C_stop();	// Finish transmission
}

void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	42 d0       	rcall	.+132    	; 0xa5a <I2C_write>
     9d6:	21 96       	adiw	r28, 0x01	; 1
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
		}
		ssd1306_stop();
		ssd1306_setpos(x, y + 1);
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
     9d8:	c0 17       	cp	r28, r16
     9da:	d1 07       	cpc	r29, r17
     9dc:	c1 f7       	brne	.-16     	; 0x9ce <ssd1306tx_stringxy+0x90>
void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
}

void ssd1306_stop(void) {
	I2C_stop();
     9de:	34 d0       	rcall	.+104    	; 0xa48 <I2C_stop>
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i + 8]));
		}
		ssd1306_stop();
		x += 8;
     9e0:	f8 e0       	ldi	r31, 0x08	; 8
     9e2:	9f 0e       	add	r9, r31
	}
}

void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
	uint16_t j, k = 0;
	while (s[k] != '\0') {
     9e4:	f7 01       	movw	r30, r14
     9e6:	a1 90       	ld	r10, Z+
     9e8:	7f 01       	movw	r14, r30
     9ea:	a1 10       	cpse	r10, r1
     9ec:	c0 cf       	rjmp	.-128    	; 0x96e <ssd1306tx_stringxy+0x30>
		}
		ssd1306_stop();
		x += 8;
		k++;
	}
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	af 90       	pop	r10
     a02:	9f 90       	pop	r9
     a04:	8f 90       	pop	r8
     a06:	08 95       	ret

00000a08 <I2C_Initialize>:
{
	//TWSR |= 0x00; // Set prescaler to 1

	uint8_t bitrate_div;

	bitrate_div = ((F_CPU/1000l)/bitRate_kHz);
     a08:	9c 01       	movw	r18, r24
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	60 e4       	ldi	r22, 0x40	; 64
     a10:	7f e1       	ldi	r23, 0x1F	; 31
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	df d6       	rcall	.+3518   	; 0x17d6 <__divmodsi4>
     a18:	82 2f       	mov	r24, r18
	
	if(bitrate_div >= 16)
     a1a:	20 31       	cpi	r18, 0x10	; 16
     a1c:	48 f0       	brcs	.+18     	; 0xa30 <I2C_Initialize+0x28>
	bitrate_div = (bitrate_div-16)/2;
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	20 51       	subi	r18, 0x10	; 16
     a22:	31 09       	sbc	r19, r1
     a24:	c9 01       	movw	r24, r18
     a26:	99 23       	and	r25, r25
     a28:	0c f4       	brge	.+2      	; 0xa2c <I2C_Initialize+0x24>
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	95 95       	asr	r25
     a2e:	87 95       	ror	r24
	
	TWBR = bitrate_div;
     a30:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     a34:	08 95       	ret

00000a36 <I2C_start>:
}

void I2C_start(void){
	TWCR = (1<<TWINT) | (1<<TWEN) |( 1<<TWSTA);
     a36:	84 ea       	ldi	r24, 0xA4	; 164
     a38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWINT)));
     a3c:	ec eb       	ldi	r30, 0xBC	; 188
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	88 23       	and	r24, r24
     a44:	ec f7       	brge	.-6      	; 0xa40 <I2C_start+0xa>
}
     a46:	08 95       	ret

00000a48 <I2C_stop>:

void I2C_stop(void){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     a48:	84 e9       	ldi	r24, 0x94	; 148
     a4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWSTO)));
     a4e:	ec eb       	ldi	r30, 0xBC	; 188
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	84 ff       	sbrs	r24, 4
     a56:	fd cf       	rjmp	.-6      	; 0xa52 <I2C_stop+0xa>
}
     a58:	08 95       	ret

00000a5a <I2C_write>:

void I2C_write(uint8_t dane){
	TWDR = dane;
     a5a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     a5e:	84 e8       	ldi	r24, 0x84	; 132
     a60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWINT)));
     a64:	ec eb       	ldi	r30, 0xBC	; 188
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	88 23       	and	r24, r24
     a6c:	ec f7       	brge	.-6      	; 0xa68 <I2C_write+0xe>
}
     a6e:	08 95       	ret

00000a70 <display_init>:

void draw_new_string(int xstart, int ystart, char* str)
{
	ssd1306_clear_display();
	draw_string(xstart,ystart,str);
}
     a70:	84 e6       	ldi	r24, 0x64	; 100
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	c9 df       	rcall	.-110    	; 0xa08 <I2C_Initialize>
     a76:	d2 de       	rcall	.-604    	; 0x81c <ssd1306_init>
     a78:	60 e2       	ldi	r22, 0x20	; 32
     a7a:	84 e1       	ldi	r24, 0x14	; 20
     a7c:	94 e0       	ldi	r25, 0x04	; 4
     a7e:	58 df       	rcall	.-336    	; 0x930 <ssd1306tx_init>
     a80:	bd de       	rcall	.-646    	; 0x7fc <ssd1306_start_command>
     a82:	86 ea       	ldi	r24, 0xA6	; 166
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	e9 df       	rcall	.-46     	; 0xa5a <I2C_write>
     a88:	f8 de       	rcall	.-528    	; 0x87a <ssd1306_stop>
     a8a:	3f df       	rcall	.-386    	; 0x90a <ssd1306_clear_display>
     a8c:	08 95       	ret

00000a8e <numberToCharArray>:
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	d9 f0       	breq	.+54     	; 0xac8 <numberToCharArray+0x3a>
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	91 05       	cpc	r25, r1
     a96:	d9 f0       	breq	.+54     	; 0xace <numberToCharArray+0x40>
     a98:	82 30       	cpi	r24, 0x02	; 2
     a9a:	91 05       	cpc	r25, r1
     a9c:	d9 f0       	breq	.+54     	; 0xad4 <numberToCharArray+0x46>
     a9e:	83 30       	cpi	r24, 0x03	; 3
     aa0:	91 05       	cpc	r25, r1
     aa2:	d9 f0       	breq	.+54     	; 0xada <numberToCharArray+0x4c>
     aa4:	84 30       	cpi	r24, 0x04	; 4
     aa6:	91 05       	cpc	r25, r1
     aa8:	d9 f0       	breq	.+54     	; 0xae0 <numberToCharArray+0x52>
     aaa:	85 30       	cpi	r24, 0x05	; 5
     aac:	91 05       	cpc	r25, r1
     aae:	d9 f0       	breq	.+54     	; 0xae6 <numberToCharArray+0x58>
     ab0:	86 30       	cpi	r24, 0x06	; 6
     ab2:	91 05       	cpc	r25, r1
     ab4:	d9 f0       	breq	.+54     	; 0xaec <numberToCharArray+0x5e>
     ab6:	87 30       	cpi	r24, 0x07	; 7
     ab8:	91 05       	cpc	r25, r1
     aba:	d9 f0       	breq	.+54     	; 0xaf2 <numberToCharArray+0x64>
     abc:	88 30       	cpi	r24, 0x08	; 8
     abe:	91 05       	cpc	r25, r1
     ac0:	d9 f0       	breq	.+54     	; 0xaf8 <numberToCharArray+0x6a>
     ac2:	09 97       	sbiw	r24, 0x09	; 9
     ac4:	e1 f0       	breq	.+56     	; 0xafe <numberToCharArray+0x70>
     ac6:	08 95       	ret
     ac8:	24 eb       	ldi	r18, 0xB4	; 180
     aca:	33 e0       	ldi	r19, 0x03	; 3
     acc:	1a c0       	rjmp	.+52     	; 0xb02 <numberToCharArray+0x74>
     ace:	24 e5       	ldi	r18, 0x54	; 84
     ad0:	33 e0       	ldi	r19, 0x03	; 3
     ad2:	17 c0       	rjmp	.+46     	; 0xb02 <numberToCharArray+0x74>
     ad4:	24 ef       	ldi	r18, 0xF4	; 244
     ad6:	32 e0       	ldi	r19, 0x02	; 2
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <numberToCharArray+0x74>
     ada:	24 e9       	ldi	r18, 0x94	; 148
     adc:	32 e0       	ldi	r19, 0x02	; 2
     ade:	11 c0       	rjmp	.+34     	; 0xb02 <numberToCharArray+0x74>
     ae0:	24 e3       	ldi	r18, 0x34	; 52
     ae2:	32 e0       	ldi	r19, 0x02	; 2
     ae4:	0e c0       	rjmp	.+28     	; 0xb02 <numberToCharArray+0x74>
     ae6:	24 ed       	ldi	r18, 0xD4	; 212
     ae8:	31 e0       	ldi	r19, 0x01	; 1
     aea:	0b c0       	rjmp	.+22     	; 0xb02 <numberToCharArray+0x74>
     aec:	24 e7       	ldi	r18, 0x74	; 116
     aee:	31 e0       	ldi	r19, 0x01	; 1
     af0:	08 c0       	rjmp	.+16     	; 0xb02 <numberToCharArray+0x74>
     af2:	24 e1       	ldi	r18, 0x14	; 20
     af4:	31 e0       	ldi	r19, 0x01	; 1
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <numberToCharArray+0x74>
     af8:	24 eb       	ldi	r18, 0xB4	; 180
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <numberToCharArray+0x74>
     afe:	24 e5       	ldi	r18, 0x54	; 84
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	82 2f       	mov	r24, r18
     b04:	93 2f       	mov	r25, r19
     b06:	08 95       	ret

00000b08 <draw_digit>:
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	c8 2f       	mov	r28, r24
     b12:	d6 2f       	mov	r29, r22
     b14:	ca 01       	movw	r24, r20
     b16:	bb df       	rcall	.-138    	; 0xa8e <numberToCharArray>
     b18:	24 e0       	ldi	r18, 0x04	; 4
     b1a:	2d 0f       	add	r18, r29
     b1c:	48 e1       	ldi	r20, 0x18	; 24
     b1e:	4c 0f       	add	r20, r28
     b20:	8c 01       	movw	r16, r24
     b22:	6d 2f       	mov	r22, r29
     b24:	8c 2f       	mov	r24, r28
     b26:	ab de       	rcall	.-682    	; 0x87e <ssd1306_draw_bmp>
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	08 95       	ret

00000b32 <draw_number>:
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	8c 01       	movw	r16, r24
     b40:	7b 01       	movw	r14, r22
     b42:	ea 01       	movw	r28, r20
     b44:	44 36       	cpi	r20, 0x64	; 100
     b46:	51 05       	cpc	r21, r1
     b48:	a4 f4       	brge	.+40     	; 0xb72 <draw_number+0x40>
     b4a:	4a 30       	cpi	r20, 0x0A	; 10
     b4c:	51 05       	cpc	r21, r1
     b4e:	3c f0       	brlt	.+14     	; 0xb5e <draw_number+0x2c>
     b50:	ca 01       	movw	r24, r20
     b52:	6a e0       	ldi	r22, 0x0A	; 10
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	2c d6       	rcall	.+3160   	; 0x17b0 <__divmodhi4>
     b58:	ab 01       	movw	r20, r22
     b5a:	ec 01       	movw	r28, r24
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <draw_number+0x30>
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	b7 01       	movw	r22, r14
     b64:	c8 01       	movw	r24, r16
     b66:	d0 df       	rcall	.-96     	; 0xb08 <draw_digit>
     b68:	ae 01       	movw	r20, r28
     b6a:	b7 01       	movw	r22, r14
     b6c:	c8 01       	movw	r24, r16
     b6e:	48 96       	adiw	r24, 0x18	; 24
     b70:	cb df       	rcall	.-106    	; 0xb08 <draw_digit>
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	08 95       	ret

00000b80 <draw_string>:
     b80:	9a 01       	movw	r18, r20
     b82:	46 2f       	mov	r20, r22
     b84:	68 2f       	mov	r22, r24
     b86:	84 e1       	ldi	r24, 0x14	; 20
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	d9 de       	rcall	.-590    	; 0x93e <ssd1306tx_stringxy>
     b8c:	08 95       	ret

00000b8e <draw_clock>:

void draw_clock(int xstart, int ystart, int hours, int minutes, int seconds, bool displayHour, bool displayMinute, bool displaySecond)
{
     b8e:	4f 92       	push	r4
     b90:	5f 92       	push	r5
     b92:	6f 92       	push	r6
     b94:	7f 92       	push	r7
     b96:	8f 92       	push	r8
     b98:	9f 92       	push	r9
     b9a:	af 92       	push	r10
     b9c:	cf 92       	push	r12
     b9e:	ef 92       	push	r14
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <draw_clock+0x1c>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	3c 01       	movw	r6, r24
     bb0:	4b 01       	movw	r8, r22
     bb2:	29 01       	movw	r4, r18
	if(displayHour == 1)
     bb4:	e1 10       	cpse	r14, r1
	{
		draw_number(xstart,ystart, hours);
     bb6:	bd df       	rcall	.-134    	; 0xb32 <draw_number>
	}
	
	draw_string(xstart +48, ystart +1, ":");
     bb8:	46 e0       	ldi	r20, 0x06	; 6
     bba:	51 e0       	ldi	r21, 0x01	; 1
     bbc:	b4 01       	movw	r22, r8
     bbe:	6f 5f       	subi	r22, 0xFF	; 255
     bc0:	7f 4f       	sbci	r23, 0xFF	; 255
     bc2:	c3 01       	movw	r24, r6
     bc4:	c0 96       	adiw	r24, 0x30	; 48
     bc6:	dc df       	rcall	.-72     	; 0xb80 <draw_string>
	
	if(displayMinute == 1)
     bc8:	cc 20       	and	r12, r12
     bca:	29 f0       	breq	.+10     	; 0xbd6 <draw_clock+0x48>
	{
		draw_number(xstart + 60, ystart, minutes);
     bcc:	a2 01       	movw	r20, r4
     bce:	b4 01       	movw	r22, r8
     bd0:	c3 01       	movw	r24, r6
     bd2:	cc 96       	adiw	r24, 0x3c	; 60
     bd4:	ae df       	rcall	.-164    	; 0xb32 <draw_number>
	}
	
	if(displaySecond == 1)
     bd6:	aa 20       	and	r10, r10
     bd8:	81 f1       	breq	.+96     	; 0xc3a <draw_clock+0xac>
	{
		char seconds_as_char[2];
		
		if(seconds < 10)
     bda:	0a 30       	cpi	r16, 0x0A	; 10
     bdc:	11 05       	cpc	r17, r1
     bde:	94 f4       	brge	.+36     	; 0xc04 <draw_clock+0x76>
		sprintf(seconds_as_char, "0%d", seconds);
     be0:	1f 93       	push	r17
     be2:	0f 93       	push	r16
     be4:	88 e0       	ldi	r24, 0x08	; 8
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	9f 93       	push	r25
     bea:	8f 93       	push	r24
     bec:	ce 01       	movw	r24, r28
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	9f 93       	push	r25
     bf2:	8f 93       	push	r24
     bf4:	42 d6       	rcall	.+3204   	; 0x187a <sprintf>
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	11 c0       	rjmp	.+34     	; 0xc26 <draw_clock+0x98>
		else
		sprintf(seconds_as_char, "%d", seconds);
     c04:	1f 93       	push	r17
     c06:	0f 93       	push	r16
     c08:	89 e0       	ldi	r24, 0x09	; 9
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	9f 93       	push	r25
     c0e:	8f 93       	push	r24
     c10:	ce 01       	movw	r24, r28
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	9f 93       	push	r25
     c16:	8f 93       	push	r24
     c18:	30 d6       	rcall	.+3168   	; 0x187a <sprintf>
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
		
		if(displaySecond == 1)
		draw_string(xstart + 110, ystart + 8,seconds_as_char);
     c26:	b4 01       	movw	r22, r8
     c28:	68 5f       	subi	r22, 0xF8	; 248
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	ae 01       	movw	r20, r28
     c2e:	4f 5f       	subi	r20, 0xFF	; 255
     c30:	5f 4f       	sbci	r21, 0xFF	; 255
     c32:	c3 01       	movw	r24, r6
     c34:	82 59       	subi	r24, 0x92	; 146
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	a3 df       	rcall	.-186    	; 0xb80 <draw_string>
	}
}
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ef 90       	pop	r14
     c48:	cf 90       	pop	r12
     c4a:	af 90       	pop	r10
     c4c:	9f 90       	pop	r9
     c4e:	8f 90       	pop	r8
     c50:	7f 90       	pop	r7
     c52:	6f 90       	pop	r6
     c54:	5f 90       	pop	r5
     c56:	4f 90       	pop	r4
     c58:	08 95       	ret

00000c5a <draw_its_time>:

void draw_its_time()
{
	draw_string(2,2,"IT IS TIME!!!");
     c5a:	4c e0       	ldi	r20, 0x0C	; 12
     c5c:	51 e0       	ldi	r21, 0x01	; 1
     c5e:	62 e0       	ldi	r22, 0x02	; 2
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	8c df       	rcall	.-232    	; 0xb80 <draw_string>
	draw_string(2,4,"IT IS TIME!!!");
     c68:	4c e0       	ldi	r20, 0x0C	; 12
     c6a:	51 e0       	ldi	r21, 0x01	; 1
     c6c:	64 e0       	ldi	r22, 0x04	; 4
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	85 df       	rcall	.-246    	; 0xb80 <draw_string>
	draw_string(2,6,"IT IS TIME!!!");
     c76:	4c e0       	ldi	r20, 0x0C	; 12
     c78:	51 e0       	ldi	r21, 0x01	; 1
     c7a:	66 e0       	ldi	r22, 0x06	; 6
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	7e df       	rcall	.-260    	; 0xb80 <draw_string>
     c84:	08 95       	ret

00000c86 <refresh_screen>:
	_delay_ms(200);
}

void refresh_screen()
{
	if(selectedMenu == MENU_CLOCK)
     c86:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c8a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     c8e:	8a 30       	cpi	r24, 0x0A	; 10
     c90:	91 05       	cpc	r25, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <refresh_screen+0x12>
	display_clock_view();
     c94:	f9 d3       	rcall	.+2034   	; 0x1488 <display_clock_view>
     c96:	08 95       	ret
	else if (selectedMenu == MENU_CLOCK_SET_HOUR)
     c98:	8b 30       	cpi	r24, 0x0B	; 11
     c9a:	91 05       	cpc	r25, r1
     c9c:	11 f4       	brne	.+4      	; 0xca2 <refresh_screen+0x1c>
	display_clock_hour_set_view();
     c9e:	18 d4       	rcall	.+2096   	; 0x14d0 <display_clock_hour_set_view>
     ca0:	08 95       	ret
	else if (selectedMenu == MENU_CLOCK_SET_MINUTE)
     ca2:	8c 30       	cpi	r24, 0x0C	; 12
     ca4:	91 05       	cpc	r25, r1
     ca6:	11 f4       	brne	.+4      	; 0xcac <refresh_screen+0x26>
	display_clock_minute_set_view();
     ca8:	34 d4       	rcall	.+2152   	; 0x1512 <display_clock_minute_set_view>
     caa:	08 95       	ret
	else if (selectedMenu == MENU_TIMER)
     cac:	84 31       	cpi	r24, 0x14	; 20
     cae:	91 05       	cpc	r25, r1
     cb0:	11 f4       	brne	.+4      	; 0xcb6 <refresh_screen+0x30>
	display_timer_view();
     cb2:	51 d5       	rcall	.+2722   	; 0x1756 <display_timer_view>
     cb4:	08 95       	ret
	else if (selectedMenu == MENU_TIMER_SET_HOUR)
     cb6:	85 31       	cpi	r24, 0x15	; 21
     cb8:	91 05       	cpc	r25, r1
     cba:	11 f4       	brne	.+4      	; 0xcc0 <refresh_screen+0x3a>
	display_timer_hour_set_view();
     cbc:	5b d5       	rcall	.+2742   	; 0x1774 <display_timer_hour_set_view>
     cbe:	08 95       	ret
	else if (selectedMenu == MENU_TIMER_SET_MINUTE)
     cc0:	86 31       	cpi	r24, 0x16	; 22
     cc2:	91 05       	cpc	r25, r1
     cc4:	11 f4       	brne	.+4      	; 0xcca <refresh_screen+0x44>
	display_timer_minute_set_view();
     cc6:	65 d5       	rcall	.+2762   	; 0x1792 <display_timer_minute_set_view>
     cc8:	08 95       	ret
	else if (selectedMenu == MENU_TEMPEREATURE)
     cca:	88 32       	cpi	r24, 0x28	; 40
     ccc:	91 05       	cpc	r25, r1
     cce:	11 f4       	brne	.+4      	; 0xcd4 <refresh_screen+0x4e>
	display_temperature_view();
     cd0:	41 d4       	rcall	.+2178   	; 0x1554 <display_temperature_view>
     cd2:	08 95       	ret
	else if (selectedMenu == MENU_ALARM)
     cd4:	8e 31       	cpi	r24, 0x1E	; 30
     cd6:	91 05       	cpc	r25, r1
     cd8:	11 f4       	brne	.+4      	; 0xcde <refresh_screen+0x58>
	display_alarm_view();
     cda:	e3 d2       	rcall	.+1478   	; 0x12a2 <display_alarm_view>
     cdc:	08 95       	ret
	else if (selectedMenu == MENU_ALARM_SET_HOUR)
     cde:	8f 31       	cpi	r24, 0x1F	; 31
     ce0:	91 05       	cpc	r25, r1
     ce2:	11 f4       	brne	.+4      	; 0xce8 <refresh_screen+0x62>
	display_alarm_hour_set_view();
     ce4:	ff d2       	rcall	.+1534   	; 0x12e4 <display_alarm_hour_set_view>
     ce6:	08 95       	ret
	else if (selectedMenu == MENU_ALARM_SET_MINUTE)
     ce8:	80 97       	sbiw	r24, 0x20	; 32
     cea:	09 f4       	brne	.+2      	; 0xcee <refresh_screen+0x68>
	display_alarm_minute_set_view();
     cec:	1c d3       	rcall	.+1592   	; 0x1326 <display_alarm_minute_set_view>
     cee:	08 95       	ret

00000cf0 <clock_set_minute_confirm>:
	temperature_view();
}

void clock_set_minute_confirm()
{
	clock_save();
     cf0:	91 d3       	rcall	.+1826   	; 0x1414 <clock_save>
	selectedMenu = MENU_CLOCK;
     cf2:	8a e0       	ldi	r24, 0x0A	; 10
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     cfa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     cfe:	08 95       	ret

00000d00 <timer_view>:
}

void timer_view()
{
	if(timer_is_running() == 0)
     d00:	34 d4       	rcall	.+2152   	; 0x156a <timer_is_running>
     d02:	81 11       	cpse	r24, r1
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <timer_view+0x8>
	timer_reset();
     d06:	34 d4       	rcall	.+2152   	; 0x1570 <timer_reset>
	
	selectedMenu = MENU_TIMER;
     d08:	84 e1       	ldi	r24, 0x14	; 20
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     d10:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     d14:	08 95       	ret

00000d16 <timer_set_hour>:
}

void timer_set_hour()
{
	if(timer_is_running() == 1 && timer_is_ready() == 1)
     d16:	29 d4       	rcall	.+2130   	; 0x156a <timer_is_running>
     d18:	88 23       	and	r24, r24
     d1a:	19 f0       	breq	.+6      	; 0xd22 <timer_set_hour+0xc>
     d1c:	23 d4       	rcall	.+2118   	; 0x1564 <timer_is_ready>
     d1e:	81 11       	cpse	r24, r1
	timer_reset();
     d20:	27 d4       	rcall	.+2126   	; 0x1570 <timer_reset>

	selectedMenu = MENU_TIMER_SET_HOUR;
     d22:	85 e1       	ldi	r24, 0x15	; 21
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     d2a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     d2e:	08 95       	ret

00000d30 <timer_set_minute_confirm>:
}

void timer_set_minute_confirm()
{
	timer_run();
     d30:	38 d4       	rcall	.+2160   	; 0x15a2 <timer_run>
	timer_view();
     d32:	e6 df       	rcall	.-52     	; 0xd00 <timer_view>
     d34:	08 95       	ret

00000d36 <alarm_view>:
}

void alarm_view()
{
	if(alarm_is_running() == 0)
     d36:	82 d2       	rcall	.+1284   	; 0x123c <alarm_is_running>
     d38:	89 2b       	or	r24, r25
     d3a:	09 f4       	brne	.+2      	; 0xd3e <alarm_view+0x8>
	alarm_reset();
     d3c:	fe d1       	rcall	.+1020   	; 0x113a <alarm_reset>
	
	selectedMenu = MENU_ALARM;
     d3e:	8e e1       	ldi	r24, 0x1E	; 30
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     d46:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     d4a:	08 95       	ret

00000d4c <alarm_set_hour>:
}

void alarm_set_hour()
{
	if(alarm_is_running() == 1 && alarm_is_ready() == 1)
     d4c:	77 d2       	rcall	.+1262   	; 0x123c <alarm_is_running>
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	21 f4       	brne	.+8      	; 0xd5a <alarm_set_hour+0xe>
     d52:	77 d2       	rcall	.+1262   	; 0x1242 <alarm_is_ready>
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	09 f4       	brne	.+2      	; 0xd5a <alarm_set_hour+0xe>
	alarm_reset();
     d58:	f0 d1       	rcall	.+992    	; 0x113a <alarm_reset>

	selectedMenu = MENU_ALARM_SET_HOUR;
     d5a:	8f e1       	ldi	r24, 0x1F	; 31
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     d62:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     d66:	08 95       	ret

00000d68 <alarm_set_minute_confirm>:
}

void alarm_set_minute_confirm()
{
	alarm_run();
     d68:	01 d2       	rcall	.+1026   	; 0x116c <alarm_run>
	alarm_view();
     d6a:	e5 df       	rcall	.-54     	; 0xd36 <alarm_view>
     d6c:	08 95       	ret

00000d6e <switch_menu>:
	display_alarm_minute_set_view();
}

void switch_menu()
{
	if(BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK)
     d6e:	33 99       	sbic	0x06, 3	; 6
     d70:	0d c0       	rjmp	.+26     	; 0xd8c <switch_menu+0x1e>
     d72:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d76:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d7a:	0a 97       	sbiw	r24, 0x0a	; 10
     d7c:	39 f4       	brne	.+14     	; 0xd8c <switch_menu+0x1e>
	selectedMenu = MENU_CLOCK_SET_HOUR;
     d7e:	8b e0       	ldi	r24, 0x0B	; 11
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     d86:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     d8a:	08 95       	ret

	else if (BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     d8c:	33 99       	sbic	0x06, 3	; 6
     d8e:	08 c0       	rjmp	.+16     	; 0xda0 <switch_menu+0x32>
     d90:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d94:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d98:	0b 97       	sbiw	r24, 0x0b	; 11
     d9a:	11 f4       	brne	.+4      	; 0xda0 <switch_menu+0x32>
	clock_add_hour();
     d9c:	13 d3       	rcall	.+1574   	; 0x13c4 <clock_add_hour>
     d9e:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     da0:	32 99       	sbic	0x06, 2	; 6
     da2:	09 c0       	rjmp	.+18     	; 0xdb6 <switch_menu+0x48>
     da4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     da8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     dac:	0b 97       	sbiw	r24, 0x0b	; 11
     dae:	09 f0       	breq	.+2      	; 0xdb2 <switch_menu+0x44>
     db0:	3b c1       	rjmp	.+630    	; 0x1028 <switch_menu+0x2ba>
	clock_subtract_hour();
     db2:	1c d3       	rcall	.+1592   	; 0x13ec <clock_subtract_hour>
     db4:	08 95       	ret
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     db6:	1a 99       	sbic	0x03, 2	; 3
     db8:	0e c0       	rjmp	.+28     	; 0xdd6 <switch_menu+0x68>
     dba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dbe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     dc2:	0b 97       	sbiw	r24, 0x0b	; 11
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <switch_menu+0x5a>
     dc6:	24 c1       	rjmp	.+584    	; 0x1010 <switch_menu+0x2a2>
	selectedMenu = MENU_CLOCK_SET_MINUTE;
     dc8:	8c e0       	ldi	r24, 0x0C	; 12
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     dd0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     dd4:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     dd6:	19 99       	sbic	0x03, 1	; 3
     dd8:	0d c0       	rjmp	.+26     	; 0xdf4 <switch_menu+0x86>
     dda:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dde:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     de2:	0b 97       	sbiw	r24, 0x0b	; 11
     de4:	39 f4       	brne	.+14     	; 0xdf4 <switch_menu+0x86>
	selectedMenu = MENU_CLOCK;
     de6:	8a e0       	ldi	r24, 0x0A	; 10
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     dee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     df2:	08 95       	ret

	else if (BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     df4:	33 99       	sbic	0x06, 3	; 6
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <switch_menu+0x9a>
     df8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dfc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e00:	0c 97       	sbiw	r24, 0x0c	; 12
     e02:	11 f4       	brne	.+4      	; 0xe08 <switch_menu+0x9a>
	clock_add_minute();
     e04:	e9 d2       	rcall	.+1490   	; 0x13d8 <clock_add_minute>
     e06:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     e08:	32 99       	sbic	0x06, 2	; 6
     e0a:	09 c0       	rjmp	.+18     	; 0xe1e <switch_menu+0xb0>
     e0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e10:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e14:	0c 97       	sbiw	r24, 0x0c	; 12
     e16:	09 f0       	breq	.+2      	; 0xe1a <switch_menu+0xac>
     e18:	0a c1       	rjmp	.+532    	; 0x102e <switch_menu+0x2c0>
	clock_subtract_minute();
     e1a:	f2 d2       	rcall	.+1508   	; 0x1400 <clock_subtract_minute>
     e1c:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     e1e:	1a 99       	sbic	0x03, 2	; 3
     e20:	09 c0       	rjmp	.+18     	; 0xe34 <switch_menu+0xc6>
     e22:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e26:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e2a:	0c 97       	sbiw	r24, 0x0c	; 12
     e2c:	09 f0       	breq	.+2      	; 0xe30 <switch_menu+0xc2>
     e2e:	f2 c0       	rjmp	.+484    	; 0x1014 <switch_menu+0x2a6>
	clock_set_minute_confirm();
     e30:	5f df       	rcall	.-322    	; 0xcf0 <clock_set_minute_confirm>
     e32:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     e34:	19 99       	sbic	0x03, 1	; 3
     e36:	0d c0       	rjmp	.+26     	; 0xe52 <switch_menu+0xe4>
     e38:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e3c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e40:	0c 97       	sbiw	r24, 0x0c	; 12
     e42:	39 f4       	brne	.+14     	; 0xe52 <switch_menu+0xe4>
	selectedMenu = MENU_CLOCK_SET_HOUR;
     e44:	8b e0       	ldi	r24, 0x0B	; 11
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     e4c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     e50:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER)
     e52:	32 99       	sbic	0x06, 2	; 6
     e54:	08 c0       	rjmp	.+16     	; 0xe66 <switch_menu+0xf8>
     e56:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e5a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e5e:	44 97       	sbiw	r24, 0x14	; 20
     e60:	11 f4       	brne	.+4      	; 0xe66 <switch_menu+0xf8>
	timer_set_hour();
     e62:	59 df       	rcall	.-334    	; 0xd16 <timer_set_hour>
     e64:	08 95       	ret
	
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     e66:	33 99       	sbic	0x06, 3	; 6
     e68:	08 c0       	rjmp	.+16     	; 0xe7a <switch_menu+0x10c>
     e6a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e6e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e72:	45 97       	sbiw	r24, 0x15	; 21
     e74:	11 f4       	brne	.+4      	; 0xe7a <switch_menu+0x10c>
	timer_add_hour();
     e76:	09 d4       	rcall	.+2066   	; 0x168a <timer_add_hour>
     e78:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     e7a:	32 99       	sbic	0x06, 2	; 6
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <switch_menu+0x122>
     e7e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e82:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e86:	45 97       	sbiw	r24, 0x15	; 21
     e88:	09 f0       	breq	.+2      	; 0xe8c <switch_menu+0x11e>
     e8a:	d4 c0       	rjmp	.+424    	; 0x1034 <switch_menu+0x2c6>
	timer_subtract_hour();
     e8c:	12 d4       	rcall	.+2084   	; 0x16b2 <timer_subtract_hour>
     e8e:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     e90:	1a 99       	sbic	0x03, 2	; 3
     e92:	0e c0       	rjmp	.+28     	; 0xeb0 <switch_menu+0x142>
     e94:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e98:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e9c:	45 97       	sbiw	r24, 0x15	; 21
     e9e:	09 f0       	breq	.+2      	; 0xea2 <switch_menu+0x134>
     ea0:	bb c0       	rjmp	.+374    	; 0x1018 <switch_menu+0x2aa>
	selectedMenu = MENU_TIMER_SET_MINUTE;
     ea2:	86 e1       	ldi	r24, 0x16	; 22
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     eaa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     eae:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     eb0:	19 99       	sbic	0x03, 1	; 3
     eb2:	08 c0       	rjmp	.+16     	; 0xec4 <switch_menu+0x156>
     eb4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     eb8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ebc:	45 97       	sbiw	r24, 0x15	; 21
     ebe:	11 f4       	brne	.+4      	; 0xec4 <switch_menu+0x156>
	timer_view();
     ec0:	1f df       	rcall	.-450    	; 0xd00 <timer_view>
     ec2:	08 95       	ret

	else if (BUTTON_1_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     ec4:	33 99       	sbic	0x06, 3	; 6
     ec6:	08 c0       	rjmp	.+16     	; 0xed8 <switch_menu+0x16a>
     ec8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ecc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ed0:	46 97       	sbiw	r24, 0x16	; 22
     ed2:	11 f4       	brne	.+4      	; 0xed8 <switch_menu+0x16a>
	timer_add_minute();
     ed4:	e4 d3       	rcall	.+1992   	; 0x169e <timer_add_minute>
     ed6:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     ed8:	32 99       	sbic	0x06, 2	; 6
     eda:	09 c0       	rjmp	.+18     	; 0xeee <switch_menu+0x180>
     edc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ee0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ee4:	46 97       	sbiw	r24, 0x16	; 22
     ee6:	09 f0       	breq	.+2      	; 0xeea <switch_menu+0x17c>
     ee8:	a8 c0       	rjmp	.+336    	; 0x103a <switch_menu+0x2cc>
	timer_subtract_minute();
     eea:	ed d3       	rcall	.+2010   	; 0x16c6 <timer_subtract_minute>
     eec:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     eee:	1a 99       	sbic	0x03, 2	; 3
     ef0:	09 c0       	rjmp	.+18     	; 0xf04 <switch_menu+0x196>
     ef2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ef6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     efa:	46 97       	sbiw	r24, 0x16	; 22
     efc:	09 f0       	breq	.+2      	; 0xf00 <switch_menu+0x192>
     efe:	8e c0       	rjmp	.+284    	; 0x101c <switch_menu+0x2ae>
	timer_set_minute_confirm();
     f00:	17 df       	rcall	.-466    	; 0xd30 <timer_set_minute_confirm>
     f02:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     f04:	19 99       	sbic	0x03, 1	; 3
     f06:	08 c0       	rjmp	.+16     	; 0xf18 <switch_menu+0x1aa>
     f08:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f0c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f10:	46 97       	sbiw	r24, 0x16	; 22
     f12:	11 f4       	brne	.+4      	; 0xf18 <switch_menu+0x1aa>
	timer_set_hour();
     f14:	00 df       	rcall	.-512    	; 0xd16 <timer_set_hour>
     f16:	08 95       	ret
	
	else if (BUTTON_3_PRESSED && selectedMenu == MENU_ALARM)
     f18:	1a 99       	sbic	0x03, 2	; 3
     f1a:	08 c0       	rjmp	.+16     	; 0xf2c <switch_menu+0x1be>
     f1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f20:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f24:	4e 97       	sbiw	r24, 0x1e	; 30
     f26:	11 f4       	brne	.+4      	; 0xf2c <switch_menu+0x1be>
	alarm_set_hour();
     f28:	11 df       	rcall	.-478    	; 0xd4c <alarm_set_hour>
     f2a:	08 95       	ret
	
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     f2c:	33 99       	sbic	0x06, 3	; 6
     f2e:	08 c0       	rjmp	.+16     	; 0xf40 <switch_menu+0x1d2>
     f30:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f34:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f38:	4f 97       	sbiw	r24, 0x1f	; 31
     f3a:	11 f4       	brne	.+4      	; 0xf40 <switch_menu+0x1d2>
	alarm_add_hour();
     f3c:	57 d1       	rcall	.+686    	; 0x11ec <alarm_add_hour>
     f3e:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     f40:	32 99       	sbic	0x06, 2	; 6
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <switch_menu+0x1e8>
     f44:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f48:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f4c:	4f 97       	sbiw	r24, 0x1f	; 31
     f4e:	09 f0       	breq	.+2      	; 0xf52 <switch_menu+0x1e4>
     f50:	77 c0       	rjmp	.+238    	; 0x1040 <switch_menu+0x2d2>
	alarm_subtract_hour();
     f52:	60 d1       	rcall	.+704    	; 0x1214 <alarm_subtract_hour>
     f54:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     f56:	1a 99       	sbic	0x03, 2	; 3
     f58:	0e c0       	rjmp	.+28     	; 0xf76 <switch_menu+0x208>
     f5a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f5e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f62:	4f 97       	sbiw	r24, 0x1f	; 31
     f64:	09 f0       	breq	.+2      	; 0xf68 <switch_menu+0x1fa>
     f66:	5c c0       	rjmp	.+184    	; 0x1020 <switch_menu+0x2b2>
	selectedMenu = MENU_ALARM_SET_MINUTE;
     f68:	80 e2       	ldi	r24, 0x20	; 32
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     f70:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     f74:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     f76:	19 99       	sbic	0x03, 1	; 3
     f78:	08 c0       	rjmp	.+16     	; 0xf8a <switch_menu+0x21c>
     f7a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f7e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f82:	4f 97       	sbiw	r24, 0x1f	; 31
     f84:	11 f4       	brne	.+4      	; 0xf8a <switch_menu+0x21c>
	alarm_view();
     f86:	d7 de       	rcall	.-594    	; 0xd36 <alarm_view>
     f88:	08 95       	ret

	else if (BUTTON_1_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     f8a:	33 99       	sbic	0x06, 3	; 6
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <switch_menu+0x230>
     f8e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f92:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f96:	80 97       	sbiw	r24, 0x20	; 32
     f98:	11 f4       	brne	.+4      	; 0xf9e <switch_menu+0x230>
	alarm_add_minute();
     f9a:	32 d1       	rcall	.+612    	; 0x1200 <alarm_add_minute>
     f9c:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     f9e:	32 99       	sbic	0x06, 2	; 6
     fa0:	09 c0       	rjmp	.+18     	; 0xfb4 <switch_menu+0x246>
     fa2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fa6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     faa:	80 97       	sbiw	r24, 0x20	; 32
     fac:	09 f0       	breq	.+2      	; 0xfb0 <switch_menu+0x242>
     fae:	4b c0       	rjmp	.+150    	; 0x1046 <switch_menu+0x2d8>
	alarm_subtract_minute();
     fb0:	3b d1       	rcall	.+630    	; 0x1228 <alarm_subtract_minute>
     fb2:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     fb4:	1a 99       	sbic	0x03, 2	; 3
     fb6:	08 c0       	rjmp	.+16     	; 0xfc8 <switch_menu+0x25a>
     fb8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fbc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     fc0:	80 97       	sbiw	r24, 0x20	; 32
     fc2:	81 f5       	brne	.+96     	; 0x1024 <switch_menu+0x2b6>
	alarm_set_minute_confirm();
     fc4:	d1 de       	rcall	.-606    	; 0xd68 <alarm_set_minute_confirm>
     fc6:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     fc8:	19 99       	sbic	0x03, 1	; 3
     fca:	08 c0       	rjmp	.+16     	; 0xfdc <switch_menu+0x26e>
     fcc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fd0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     fd4:	80 97       	sbiw	r24, 0x20	; 32
     fd6:	11 f4       	brne	.+4      	; 0xfdc <switch_menu+0x26e>
	alarm_set_hour();
     fd8:	b9 de       	rcall	.-654    	; 0xd4c <alarm_set_hour>
     fda:	08 95       	ret
	
	else if(BUTTON_1_PRESSED)
     fdc:	33 99       	sbic	0x06, 3	; 6
     fde:	07 c0       	rjmp	.+14     	; 0xfee <switch_menu+0x280>
	selectedMenu = MENU_CLOCK;
     fe0:	8a e0       	ldi	r24, 0x0A	; 10
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     fe8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     fec:	08 95       	ret
	
	else if (BUTTON_2_PRESSED)
     fee:	32 99       	sbic	0x06, 2	; 6
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <switch_menu+0x288>
	timer_view();
     ff2:	86 de       	rcall	.-756    	; 0xd00 <timer_view>
     ff4:	08 95       	ret
	
	else if (BUTTON_3_PRESSED)
     ff6:	1a 99       	sbic	0x03, 2	; 3
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <switch_menu+0x290>
	alarm_view();
     ffa:	9d de       	rcall	.-710    	; 0xd36 <alarm_view>
     ffc:	08 95       	ret
	
	else if (BUTTON_4_PRESSED)
     ffe:	19 99       	sbic	0x03, 1	; 3
    1000:	25 c0       	rjmp	.+74     	; 0x104c <switch_menu+0x2de>
	alarm_view();
}

void temperature_view()
{
	selectedMenu = MENU_TEMPEREATURE;
    1002:	88 e2       	ldi	r24, 0x28	; 40
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    100a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	else if (BUTTON_3_PRESSED)
	alarm_view();
	
	else if (BUTTON_4_PRESSED)
	temperature_view();
}
    100e:	08 95       	ret
	clock_subtract_hour();
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
	selectedMenu = MENU_CLOCK_SET_MINUTE;
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
    1010:	83 b1       	in	r24, 0x03	; 3
    1012:	f0 ce       	rjmp	.-544    	; 0xdf4 <switch_menu+0x86>
	clock_subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
	clock_set_minute_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
    1014:	83 b1       	in	r24, 0x03	; 3
    1016:	1d cf       	rjmp	.-454    	; 0xe52 <switch_menu+0xe4>
	timer_subtract_hour();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
	selectedMenu = MENU_TIMER_SET_MINUTE;
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
    1018:	83 b1       	in	r24, 0x03	; 3
    101a:	54 cf       	rjmp	.-344    	; 0xec4 <switch_menu+0x156>
	timer_subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
	timer_set_minute_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
    101c:	83 b1       	in	r24, 0x03	; 3
    101e:	7c cf       	rjmp	.-264    	; 0xf18 <switch_menu+0x1aa>
	alarm_subtract_hour();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
	selectedMenu = MENU_ALARM_SET_MINUTE;
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
    1020:	83 b1       	in	r24, 0x03	; 3
    1022:	b3 cf       	rjmp	.-154    	; 0xf8a <switch_menu+0x21c>
	alarm_subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
	alarm_set_minute_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
    1024:	83 b1       	in	r24, 0x03	; 3
    1026:	da cf       	rjmp	.-76     	; 0xfdc <switch_menu+0x26e>
	clock_add_hour();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
	clock_subtract_hour();
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
    1028:	1a 9b       	sbis	0x03, 2	; 3
    102a:	f2 cf       	rjmp	.-28     	; 0x1010 <switch_menu+0x2a2>
    102c:	d4 ce       	rjmp	.-600    	; 0xdd6 <switch_menu+0x68>
	clock_add_minute();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
	clock_subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
    102e:	1a 9b       	sbis	0x03, 2	; 3
    1030:	f1 cf       	rjmp	.-30     	; 0x1014 <switch_menu+0x2a6>
    1032:	00 cf       	rjmp	.-512    	; 0xe34 <switch_menu+0xc6>
	timer_add_hour();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
	timer_subtract_hour();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
    1034:	1a 9b       	sbis	0x03, 2	; 3
    1036:	f0 cf       	rjmp	.-32     	; 0x1018 <switch_menu+0x2aa>
    1038:	3b cf       	rjmp	.-394    	; 0xeb0 <switch_menu+0x142>
	timer_add_minute();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
	timer_subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
    103a:	1a 9b       	sbis	0x03, 2	; 3
    103c:	ef cf       	rjmp	.-34     	; 0x101c <switch_menu+0x2ae>
    103e:	62 cf       	rjmp	.-316    	; 0xf04 <switch_menu+0x196>
	alarm_add_hour();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
	alarm_subtract_hour();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
    1040:	1a 9b       	sbis	0x03, 2	; 3
    1042:	ee cf       	rjmp	.-36     	; 0x1020 <switch_menu+0x2b2>
    1044:	98 cf       	rjmp	.-208    	; 0xf76 <switch_menu+0x208>
	alarm_add_minute();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
	alarm_subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
    1046:	1a 9b       	sbis	0x03, 2	; 3
    1048:	ed cf       	rjmp	.-38     	; 0x1024 <switch_menu+0x2b6>
    104a:	be cf       	rjmp	.-132    	; 0xfc8 <switch_menu+0x25a>
    104c:	08 95       	ret

0000104e <on_button_pressed>:
	selectedMenu = MENU_CLOCK;
}

void on_button_pressed()
{
	ssd1306_clear_display();
    104e:	5d dc       	rcall	.-1862   	; 0x90a <ssd1306_clear_display>
	switch_menu();
    1050:	8e de       	rcall	.-740    	; 0xd6e <switch_menu>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1052:	2f ef       	ldi	r18, 0xFF	; 255
    1054:	81 ee       	ldi	r24, 0xE1	; 225
    1056:	94 e0       	ldi	r25, 0x04	; 4
    1058:	21 50       	subi	r18, 0x01	; 1
    105a:	80 40       	sbci	r24, 0x00	; 0
    105c:	90 40       	sbci	r25, 0x00	; 0
    105e:	e1 f7       	brne	.-8      	; 0x1058 <on_button_pressed+0xa>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <on_button_pressed+0x14>
    1062:	00 00       	nop
    1064:	08 95       	ret

00001066 <add_hour>:
	return subtract_number(number, SECONDS_IN_MINUTE - 1);
}

int add_number(int number, int max)
{
	number++;
    1066:	01 96       	adiw	r24, 0x01	; 1
	
	if(number > max)
    1068:	88 31       	cpi	r24, 0x18	; 24
    106a:	91 05       	cpc	r25, r1
    106c:	14 f0       	brlt	.+4      	; 0x1072 <add_hour+0xc>
	{
		number = 0;
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
int subtract_number(int number, int max);

int add_hour(int number)
{
	return add_number(number, HOURS_IN_DAY - 1);
}
    1072:	08 95       	ret

00001074 <add_minute>:
	return subtract_number(number, SECONDS_IN_MINUTE - 1);
}

int add_number(int number, int max)
{
	number++;
    1074:	01 96       	adiw	r24, 0x01	; 1
	
	if(number > max)
    1076:	8c 33       	cpi	r24, 0x3C	; 60
    1078:	91 05       	cpc	r25, r1
    107a:	14 f0       	brlt	.+4      	; 0x1080 <add_minute+0xc>
	{
		number = 0;
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
}

int add_minute(int number)
{
	return add_number(number, MINUTES_IN_HOUR - 1);
}
    1080:	08 95       	ret

00001082 <add_second>:
	return subtract_number(number, SECONDS_IN_MINUTE - 1);
}

int add_number(int number, int max)
{
	number++;
    1082:	01 96       	adiw	r24, 0x01	; 1
	
	if(number > max)
    1084:	8c 33       	cpi	r24, 0x3C	; 60
    1086:	91 05       	cpc	r25, r1
    1088:	14 f0       	brlt	.+4      	; 0x108e <add_second+0xc>
	{
		number = 0;
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	90 e0       	ldi	r25, 0x00	; 0
}

int add_second(int number)
{
	return add_number(number, SECONDS_IN_MINUTE -1);
}
    108e:	08 95       	ret

00001090 <subtract_hour>:
	return number;
}

int subtract_number(int number, int max)
{
	number--;
    1090:	01 97       	sbiw	r24, 0x01	; 1
	
	if(number < 0)
    1092:	12 f4       	brpl	.+4      	; 0x1098 <subtract_hour+0x8>
	{
		number = max;
    1094:	87 e1       	ldi	r24, 0x17	; 23
    1096:	90 e0       	ldi	r25, 0x00	; 0
}

int subtract_hour(int number)
{
	return subtract_number(number, HOURS_IN_DAY - 1);
}
    1098:	08 95       	ret

0000109a <subtract_minute>:
	return number;
}

int subtract_number(int number, int max)
{
	number--;
    109a:	01 97       	sbiw	r24, 0x01	; 1
	
	if(number < 0)
    109c:	12 f4       	brpl	.+4      	; 0x10a2 <subtract_minute+0x8>
	{
		number = max;
    109e:	8b e3       	ldi	r24, 0x3B	; 59
    10a0:	90 e0       	ldi	r25, 0x00	; 0
}

int subtract_minute(int number)
{
	return subtract_number(number, MINUTES_IN_HOUR - 1);
}
    10a2:	08 95       	ret

000010a4 <port_init>:
#define LED1 (1<<PD7)
#define LED2 (1<<PB0)

void port_init()
{
	DDRC &= ~(BUTTON_2 | BUTTON_1);
    10a4:	87 b1       	in	r24, 0x07	; 7
    10a6:	83 7f       	andi	r24, 0xF3	; 243
    10a8:	87 b9       	out	0x07, r24	; 7
	DDRB &= ~(BUTTON_4 | BUTTON_3);
    10aa:	84 b1       	in	r24, 0x04	; 4
    10ac:	89 7f       	andi	r24, 0xF9	; 249
    10ae:	84 b9       	out	0x04, r24	; 4
	DDRB |= LED2;
    10b0:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= BUZZER | LED1;
    10b2:	8a b1       	in	r24, 0x0a	; 10
    10b4:	80 6a       	ori	r24, 0xA0	; 160
    10b6:	8a b9       	out	0x0a, r24	; 10
	
	TCCR1B = (1<<CS12) | (1<<WGM12);
    10b8:	8c e0       	ldi	r24, 0x0C	; 12
    10ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	OCR1AH = 0x7A;
    10be:	8a e7       	ldi	r24, 0x7A	; 122
    10c0:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
	OCR1AL = 0x12;
    10c4:	82 e1       	ldi	r24, 0x12	; 18
    10c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 |= (1<<ICIE1) | (1<<OCIE1A);
    10ca:	ef e6       	ldi	r30, 0x6F	; 111
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	82 62       	ori	r24, 0x22	; 34
    10d2:	80 83       	st	Z, r24
    10d4:	08 95       	ret

000010d6 <main>:
}

int main(void)
{
	sei();
    10d6:	78 94       	sei
	port_init();
    10d8:	e5 df       	rcall	.-54     	; 0x10a4 <port_init>
	display_init();
    10da:	ca dc       	rcall	.-1644   	; 0xa70 <display_init>

	while (1)
	{
		//play_timer_sound();
		
		if(BUTTON_PRESSED)
    10dc:	33 9b       	sbis	0x06, 3	; 6
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <main+0x14>
    10e0:	32 9b       	sbis	0x06, 2	; 6
    10e2:	03 c0       	rjmp	.+6      	; 0x10ea <main+0x14>
    10e4:	1a 9b       	sbis	0x03, 2	; 3
    10e6:	01 c0       	rjmp	.+2      	; 0x10ea <main+0x14>
    10e8:	19 9b       	sbis	0x03, 1	; 3
			on_button_pressed();
    10ea:	b1 df       	rcall	.-158    	; 0x104e <on_button_pressed>
		
		refresh_screen();
    10ec:	cc dd       	rcall	.-1128   	; 0xc86 <refresh_screen>
	}
    10ee:	f6 cf       	rjmp	.-20     	; 0x10dc <main+0x6>

000010f0 <__vector_11>:
}

ISR (TIMER1_COMPA_vect)
{
    10f0:	1f 92       	push	r1
    10f2:	0f 92       	push	r0
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	0f 92       	push	r0
    10f8:	11 24       	eor	r1, r1
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
	clock_trigger();
    1112:	2a d1       	rcall	.+596    	; 0x1368 <clock_trigger>
	timer_trigger();
    1114:	62 d2       	rcall	.+1220   	; 0x15da <timer_trigger>
	alarm_trigger();
    1116:	46 d0       	rcall	.+140    	; 0x11a4 <alarm_trigger>
    1118:	ff 91       	pop	r31
    111a:	ef 91       	pop	r30
    111c:	bf 91       	pop	r27
    111e:	af 91       	pop	r26
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	7f 91       	pop	r23
    1126:	6f 91       	pop	r22
    1128:	5f 91       	pop	r21
    112a:	4f 91       	pop	r20
    112c:	3f 91       	pop	r19
    112e:	2f 91       	pop	r18
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	0f 90       	pop	r0
    1136:	1f 90       	pop	r1
    1138:	18 95       	reti

0000113a <alarm_reset>:
int alarmExpectedSecond = 0;


void alarm_reset()
{
	alarmIsReady = 0;
    113a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <alarmIsReady>
	alarmIsRunning = 0;
    113e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <alarmIsRunning>
	
	alarmSelectedHour = 0;
    1142:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <alarmSelectedHour+0x1>
    1146:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <alarmSelectedHour>
	alarmSelectedMinute = 0;
    114a:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <alarmSelectedMinute+0x1>
    114e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <alarmSelectedMinute>
	
	alarmExpectedHour = 0;
    1152:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <alarmExpectedHour+0x1>
    1156:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <alarmExpectedHour>
	alarmExpectedMinute = 0;
    115a:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <alarmExpectedMinute+0x1>
    115e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <alarmExpectedMinute>
	alarmExpectedSecond = 0;
    1162:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <__data_end+0x1>
    1166:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
    116a:	08 95       	ret

0000116c <alarm_run>:
}

void alarm_run()
{
	if(alarmIsRunning == 0)
    116c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <alarmIsRunning>
    1170:	81 11       	cpse	r24, r1
    1172:	17 c0       	rjmp	.+46     	; 0x11a2 <alarm_run+0x36>
	{
		alarmExpectedSecond = 0;
    1174:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <__data_end+0x1>
    1178:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
		alarmExpectedHour = alarmSelectedHour;
    117c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <alarmSelectedHour>
    1180:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <alarmSelectedHour+0x1>
    1184:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <alarmExpectedHour+0x1>
    1188:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <alarmExpectedHour>
		alarmExpectedMinute = alarmSelectedMinute;
    118c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <alarmSelectedMinute>
    1190:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <alarmSelectedMinute+0x1>
    1194:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <alarmExpectedMinute+0x1>
    1198:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <alarmExpectedMinute>
		alarmIsRunning = 1;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <alarmIsRunning>
    11a2:	08 95       	ret

000011a4 <alarm_trigger>:
	}
}

void alarm_trigger()
{
	if(alarmIsRunning == 1 
    11a4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <alarmIsRunning>
    11a8:	88 23       	and	r24, r24
    11aa:	f9 f0       	breq	.+62     	; 0x11ea <alarm_trigger+0x46>
	&& alarmIsReady == 0
    11ac:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <alarmIsReady>
    11b0:	81 11       	cpse	r24, r1
    11b2:	1b c0       	rjmp	.+54     	; 0x11ea <alarm_trigger+0x46>
	&& get_current_hour() == alarmExpectedHour 
    11b4:	44 d1       	rcall	.+648    	; 0x143e <get_current_hour>
    11b6:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <alarmExpectedHour>
    11ba:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <alarmExpectedHour+0x1>
    11be:	82 17       	cp	r24, r18
    11c0:	93 07       	cpc	r25, r19
    11c2:	99 f4       	brne	.+38     	; 0x11ea <alarm_trigger+0x46>
	&& get_current_minute() == alarmExpectedMinute 
    11c4:	41 d1       	rcall	.+642    	; 0x1448 <get_current_minute>
    11c6:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <alarmExpectedMinute>
    11ca:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <alarmExpectedMinute+0x1>
    11ce:	82 17       	cp	r24, r18
    11d0:	93 07       	cpc	r25, r19
    11d2:	59 f4       	brne	.+22     	; 0x11ea <alarm_trigger+0x46>
	&& get_current_second() == alarmExpectedSecond)
    11d4:	3e d1       	rcall	.+636    	; 0x1452 <get_current_second>
    11d6:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <__data_end>
    11da:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <__data_end+0x1>
    11de:	82 17       	cp	r24, r18
    11e0:	93 07       	cpc	r25, r19
    11e2:	19 f4       	brne	.+6      	; 0x11ea <alarm_trigger+0x46>
	{
		alarmIsReady = 1;	
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <alarmIsReady>
    11ea:	08 95       	ret

000011ec <alarm_add_hour>:
	}
}

void alarm_add_hour()
{
	alarmSelectedHour = add_hour(alarmSelectedHour);
    11ec:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <alarmSelectedHour>
    11f0:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <alarmSelectedHour+0x1>
    11f4:	38 df       	rcall	.-400    	; 0x1066 <add_hour>
    11f6:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <alarmSelectedHour+0x1>
    11fa:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <alarmSelectedHour>
    11fe:	08 95       	ret

00001200 <alarm_add_minute>:
}

void alarm_add_minute()
{
	alarmSelectedMinute = add_minute(alarmSelectedMinute);
    1200:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <alarmSelectedMinute>
    1204:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <alarmSelectedMinute+0x1>
    1208:	35 df       	rcall	.-406    	; 0x1074 <add_minute>
    120a:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <alarmSelectedMinute+0x1>
    120e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <alarmSelectedMinute>
    1212:	08 95       	ret

00001214 <alarm_subtract_hour>:
}

void alarm_subtract_hour()
{
	alarmSelectedHour = subtract_hour(alarmSelectedHour);
    1214:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <alarmSelectedHour>
    1218:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <alarmSelectedHour+0x1>
    121c:	39 df       	rcall	.-398    	; 0x1090 <subtract_hour>
    121e:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <alarmSelectedHour+0x1>
    1222:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <alarmSelectedHour>
    1226:	08 95       	ret

00001228 <alarm_subtract_minute>:
}

void alarm_subtract_minute()
{
	alarmSelectedMinute = subtract_minute(alarmSelectedMinute);
    1228:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <alarmSelectedMinute>
    122c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <alarmSelectedMinute+0x1>
    1230:	34 df       	rcall	.-408    	; 0x109a <subtract_minute>
    1232:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <alarmSelectedMinute+0x1>
    1236:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <alarmSelectedMinute>
    123a:	08 95       	ret

0000123c <alarm_is_running>:
}

bool alarm_is_running()
{
	return alarmIsRunning;
}
    123c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <alarmIsRunning>
    1240:	08 95       	ret

00001242 <alarm_is_ready>:

bool alarm_is_ready()
{
	return alarmIsReady;
}
    1242:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <alarmIsReady>
    1246:	08 95       	ret

00001248 <display_alarm>:
	draw_string(0, 0, "TIMER SET M");
	display_alarm(alarmSelectedHour,alarmSelectedMinute,0,0,1,0);
}

void display_alarm(int hour, int minute, int second, bool displayHour, bool displayMinute, bool displaySeconds)
{
    1248:	af 92       	push	r10
    124a:	cf 92       	push	r12
    124c:	ef 92       	push	r14
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	fc 01       	movw	r30, r24
	if(alarmIsRunning == 0)
    1254:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <alarmIsRunning>
    1258:	91 11       	cpse	r25, r1
    125a:	0c c0       	rjmp	.+24     	; 0x1274 <display_alarm+0x2c>
	{
		draw_clock(0,2, hour, minute,second, displayHour, displayMinute, displaySeconds);
    125c:	ae 2c       	mov	r10, r14
    125e:	c0 2e       	mov	r12, r16
    1260:	e2 2e       	mov	r14, r18
    1262:	8a 01       	movw	r16, r20
    1264:	9b 01       	movw	r18, r22
    1266:	af 01       	movw	r20, r30
    1268:	62 e0       	ldi	r22, 0x02	; 2
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	8e dc       	rcall	.-1764   	; 0xb8e <draw_clock>
    1272:	11 c0       	rjmp	.+34     	; 0x1296 <display_alarm+0x4e>
	}
	else if(alarmIsRunning == 1 && alarmIsReady == 0)
    1274:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <alarmIsReady>
    1278:	81 11       	cpse	r24, r1
    127a:	0c c0       	rjmp	.+24     	; 0x1294 <display_alarm+0x4c>
	{
		draw_clock(0,2, hour, minute, second, displayHour, displayMinute, displaySeconds);
    127c:	ae 2c       	mov	r10, r14
    127e:	c0 2e       	mov	r12, r16
    1280:	e2 2e       	mov	r14, r18
    1282:	8a 01       	movw	r16, r20
    1284:	9b 01       	movw	r18, r22
    1286:	af 01       	movw	r20, r30
    1288:	62 e0       	ldi	r22, 0x02	; 2
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	7e dc       	rcall	.-1796   	; 0xb8e <draw_clock>
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <display_alarm+0x4e>
	}
	else
	{
		draw_its_time();
    1294:	e2 dc       	rcall	.-1596   	; 0xc5a <draw_its_time>
	}
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ef 90       	pop	r14
    129c:	cf 90       	pop	r12
    129e:	af 90       	pop	r10
    12a0:	08 95       	ret

000012a2 <display_alarm_view>:
{
	return alarmIsReady;
}

void display_alarm_view()
{
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
	draw_string(0, 0, "ALARM");
    12aa:	4a e1       	ldi	r20, 0x1A	; 26
    12ac:	51 e0       	ldi	r21, 0x01	; 1
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	64 dc       	rcall	.-1848   	; 0xb80 <draw_string>
	display_alarm(alarmExpectedHour,alarmExpectedMinute,0,1,1,0);
    12b8:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <alarmExpectedMinute>
    12bc:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <alarmExpectedMinute+0x1>
    12c0:	e1 2c       	mov	r14, r1
    12c2:	f1 2c       	mov	r15, r1
    12c4:	01 e0       	ldi	r16, 0x01	; 1
    12c6:	10 e0       	ldi	r17, 0x00	; 0
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <alarmExpectedHour>
    12d4:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <alarmExpectedHour+0x1>
    12d8:	b7 df       	rcall	.-146    	; 0x1248 <display_alarm>
}
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	ff 90       	pop	r15
    12e0:	ef 90       	pop	r14
    12e2:	08 95       	ret

000012e4 <display_alarm_hour_set_view>:

void display_alarm_hour_set_view()
{
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
	draw_string(0, 0, "TIMER SET H");
    12ec:	40 e2       	ldi	r20, 0x20	; 32
    12ee:	51 e0       	ldi	r21, 0x01	; 1
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	43 dc       	rcall	.-1914   	; 0xb80 <draw_string>
	display_alarm(alarmSelectedHour,alarmSelectedMinute,0,1,0,0);
    12fa:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <alarmSelectedMinute>
    12fe:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <alarmSelectedMinute+0x1>
    1302:	e1 2c       	mov	r14, r1
    1304:	f1 2c       	mov	r15, r1
    1306:	00 e0       	ldi	r16, 0x00	; 0
    1308:	10 e0       	ldi	r17, 0x00	; 0
    130a:	21 e0       	ldi	r18, 0x01	; 1
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <alarmSelectedHour>
    1316:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <alarmSelectedHour+0x1>
    131a:	96 df       	rcall	.-212    	; 0x1248 <display_alarm>
}
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	08 95       	ret

00001326 <display_alarm_minute_set_view>:

void display_alarm_minute_set_view()
{
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
	draw_string(0, 0, "TIMER SET M");
    132e:	4c e2       	ldi	r20, 0x2C	; 44
    1330:	51 e0       	ldi	r21, 0x01	; 1
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	22 dc       	rcall	.-1980   	; 0xb80 <draw_string>
	display_alarm(alarmSelectedHour,alarmSelectedMinute,0,0,1,0);
    133c:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <alarmSelectedMinute>
    1340:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <alarmSelectedMinute+0x1>
    1344:	e1 2c       	mov	r14, r1
    1346:	f1 2c       	mov	r15, r1
    1348:	01 e0       	ldi	r16, 0x01	; 1
    134a:	10 e0       	ldi	r17, 0x00	; 0
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <alarmSelectedHour>
    1358:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <alarmSelectedHour+0x1>
    135c:	75 df       	rcall	.-278    	; 0x1248 <display_alarm>
}
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	ff 90       	pop	r15
    1364:	ef 90       	pop	r14
    1366:	08 95       	ret

00001368 <clock_trigger>:
 int minute = 0;
 int clockSelectedMinute= 0;
 int second = 0;

void clock_trigger()
{
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
	int previous = second;
    136c:	c0 91 74 01 	lds	r28, 0x0174	; 0x800174 <second>
    1370:	d0 91 75 01 	lds	r29, 0x0175	; 0x800175 <second+0x1>
	second = add_second(second);
    1374:	ce 01       	movw	r24, r28
    1376:	85 de       	rcall	.-758    	; 0x1082 <add_second>
    1378:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <second+0x1>
    137c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <second>
	
	if(previous == (SECONDS_IN_MINUTE - 1) && second == 0)
    1380:	eb 97       	sbiw	r28, 0x3b	; 59
    1382:	e9 f4       	brne	.+58     	; 0x13be <clock_trigger+0x56>
    1384:	89 2b       	or	r24, r25
    1386:	61 f4       	brne	.+24     	; 0x13a0 <clock_trigger+0x38>
	{
		previous = minute;
    1388:	c0 91 78 01 	lds	r28, 0x0178	; 0x800178 <minute>
    138c:	d0 91 79 01 	lds	r29, 0x0179	; 0x800179 <minute+0x1>
		minute = add_minute(minute);
    1390:	ce 01       	movw	r24, r28
    1392:	70 de       	rcall	.-800    	; 0x1074 <add_minute>
    1394:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <minute+0x1>
    1398:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <minute>
	}
	
	if(previous == (MINUTES_IN_HOUR - 1) && minute == 0)
    139c:	eb 97       	sbiw	r28, 0x3b	; 59
    139e:	79 f4       	brne	.+30     	; 0x13be <clock_trigger+0x56>
    13a0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <minute>
    13a4:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <minute+0x1>
    13a8:	89 2b       	or	r24, r25
    13aa:	49 f4       	brne	.+18     	; 0x13be <clock_trigger+0x56>
	hour = add_hour(hour);
    13ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hour>
    13b0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <hour+0x1>
    13b4:	58 de       	rcall	.-848    	; 0x1066 <add_hour>
    13b6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <hour+0x1>
    13ba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hour>
}
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	08 95       	ret

000013c4 <clock_add_hour>:

void clock_add_hour()
{
	clockSelectedHour = add_hour(clockSelectedHour);
    13c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <clockSelectedHour>
    13c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <clockSelectedHour+0x1>
    13cc:	4c de       	rcall	.-872    	; 0x1066 <add_hour>
    13ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <clockSelectedHour+0x1>
    13d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <clockSelectedHour>
    13d6:	08 95       	ret

000013d8 <clock_add_minute>:
}

void clock_add_minute()
{
	clockSelectedMinute = add_minute(clockSelectedMinute);
    13d8:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <clockSelectedMinute>
    13dc:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <clockSelectedMinute+0x1>
    13e0:	49 de       	rcall	.-878    	; 0x1074 <add_minute>
    13e2:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <clockSelectedMinute+0x1>
    13e6:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <clockSelectedMinute>
    13ea:	08 95       	ret

000013ec <clock_subtract_hour>:
}

void clock_subtract_hour()
{
	clockSelectedHour = subtract_hour(clockSelectedHour);
    13ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <clockSelectedHour>
    13f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <clockSelectedHour+0x1>
    13f4:	4d de       	rcall	.-870    	; 0x1090 <subtract_hour>
    13f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <clockSelectedHour+0x1>
    13fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <clockSelectedHour>
    13fe:	08 95       	ret

00001400 <clock_subtract_minute>:
}

void clock_subtract_minute()
{
	clockSelectedMinute = subtract_minute(clockSelectedMinute);
    1400:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <clockSelectedMinute>
    1404:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <clockSelectedMinute+0x1>
    1408:	48 de       	rcall	.-880    	; 0x109a <subtract_minute>
    140a:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <clockSelectedMinute+0x1>
    140e:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <clockSelectedMinute>
    1412:	08 95       	ret

00001414 <clock_save>:
}

void clock_save()
{
	second = 0;
    1414:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <second+0x1>
    1418:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <second>
	hour = clockSelectedHour;
    141c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <clockSelectedHour>
    1420:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <clockSelectedHour+0x1>
    1424:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <hour+0x1>
    1428:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hour>
	minute = clockSelectedMinute;
    142c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <clockSelectedMinute>
    1430:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <clockSelectedMinute+0x1>
    1434:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <minute+0x1>
    1438:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <minute>
    143c:	08 95       	ret

0000143e <get_current_hour>:
}

int get_current_hour()
{
	return hour;
}
    143e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hour>
    1442:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <hour+0x1>
    1446:	08 95       	ret

00001448 <get_current_minute>:

int get_current_minute()
{
	return minute;	
}
    1448:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <minute>
    144c:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <minute+0x1>
    1450:	08 95       	ret

00001452 <get_current_second>:

int get_current_second()
{
	return second;
}
    1452:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <second>
    1456:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <second+0x1>
    145a:	08 95       	ret

0000145c <display_clock>:
	draw_string(0, 0, "CLOCK SET M");
	display_clock(clockSelectedHour, clockSelectedMinute, 0, 0, 1, 0);
}

void display_clock(int hour, int minute, int second, bool displayHour, bool displayMinute, bool displaySeconds)
{
    145c:	af 92       	push	r10
    145e:	cf 92       	push	r12
    1460:	ef 92       	push	r14
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
	draw_clock(0,2, hour, minute, second, displayHour, displayMinute, displaySeconds);
    1466:	ae 2c       	mov	r10, r14
    1468:	c0 2e       	mov	r12, r16
    146a:	e2 2e       	mov	r14, r18
    146c:	8a 01       	movw	r16, r20
    146e:	9b 01       	movw	r18, r22
    1470:	ac 01       	movw	r20, r24
    1472:	62 e0       	ldi	r22, 0x02	; 2
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	89 db       	rcall	.-2286   	; 0xb8e <draw_clock>
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ef 90       	pop	r14
    1482:	cf 90       	pop	r12
    1484:	af 90       	pop	r10
    1486:	08 95       	ret

00001488 <display_clock_view>:
{
	return second;
}

void display_clock_view()
{
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
	draw_string(0, 0, "CLOCK");
    1490:	48 e3       	ldi	r20, 0x38	; 56
    1492:	51 e0       	ldi	r21, 0x01	; 1
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	71 db       	rcall	.-2334   	; 0xb80 <draw_string>
	display_clock(hour, minute,second, 1,1,1);
    149e:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <second>
    14a2:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <second+0x1>
    14a6:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <minute>
    14aa:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <minute+0x1>
    14ae:	ee 24       	eor	r14, r14
    14b0:	e3 94       	inc	r14
    14b2:	f1 2c       	mov	r15, r1
    14b4:	01 e0       	ldi	r16, 0x01	; 1
    14b6:	10 e0       	ldi	r17, 0x00	; 0
    14b8:	21 e0       	ldi	r18, 0x01	; 1
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hour>
    14c0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <hour+0x1>
    14c4:	cb df       	rcall	.-106    	; 0x145c <display_clock>
}
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	08 95       	ret

000014d0 <display_clock_hour_set_view>:

void display_clock_hour_set_view()
{
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
	draw_string(0, 0, "CLOCK SET H");
    14d8:	4e e3       	ldi	r20, 0x3E	; 62
    14da:	51 e0       	ldi	r21, 0x01	; 1
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	4d db       	rcall	.-2406   	; 0xb80 <draw_string>
	display_clock(clockSelectedHour, clockSelectedMinute, 0,1,0,0);
    14e6:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <clockSelectedMinute>
    14ea:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <clockSelectedMinute+0x1>
    14ee:	e1 2c       	mov	r14, r1
    14f0:	f1 2c       	mov	r15, r1
    14f2:	00 e0       	ldi	r16, 0x00	; 0
    14f4:	10 e0       	ldi	r17, 0x00	; 0
    14f6:	21 e0       	ldi	r18, 0x01	; 1
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <clockSelectedHour>
    1502:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <clockSelectedHour+0x1>
    1506:	aa df       	rcall	.-172    	; 0x145c <display_clock>
}
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	08 95       	ret

00001512 <display_clock_minute_set_view>:

void display_clock_minute_set_view()
{
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
	draw_string(0, 0, "CLOCK SET M");
    151a:	4a e4       	ldi	r20, 0x4A	; 74
    151c:	51 e0       	ldi	r21, 0x01	; 1
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	2c db       	rcall	.-2472   	; 0xb80 <draw_string>
	display_clock(clockSelectedHour, clockSelectedMinute, 0, 0, 1, 0);
    1528:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <clockSelectedMinute>
    152c:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <clockSelectedMinute+0x1>
    1530:	e1 2c       	mov	r14, r1
    1532:	f1 2c       	mov	r15, r1
    1534:	01 e0       	ldi	r16, 0x01	; 1
    1536:	10 e0       	ldi	r17, 0x00	; 0
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e0       	ldi	r20, 0x00	; 0
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <clockSelectedHour>
    1544:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <clockSelectedHour+0x1>
    1548:	89 df       	rcall	.-238    	; 0x145c <display_clock>
}
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	08 95       	ret

00001554 <display_temperature_view>:
void display_temperature_view()
{
	draw_string(0, 0, "TEMPERATURE");
    1554:	46 e5       	ldi	r20, 0x56	; 86
    1556:	51 e0       	ldi	r21, 0x01	; 1
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0f db       	rcall	.-2530   	; 0xb80 <draw_string>
    1562:	08 95       	ret

00001564 <timer_is_ready>:
int timerExpectedSecond = 0;

bool timer_is_ready()
{
	return timerIsReady;
}
    1564:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <timerIsReady>
    1568:	08 95       	ret

0000156a <timer_is_running>:

bool timer_is_running()
{
	return timerIsRunning;
}
    156a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <timerIsRunning>
    156e:	08 95       	ret

00001570 <timer_reset>:

void timer_reset()
{
	timerIsReady = 0;
    1570:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <timerIsReady>
	timerIsRunning = 0;
    1574:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <timerIsRunning>
	
	timerSelectedHour = 0;
    1578:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <timerSelectedHour+0x1>
    157c:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <timerSelectedHour>
	timerSelectedMinute = 0;
    1580:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <timerSelectedMinute+0x1>
    1584:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <timerSelectedMinute>

	timerExpectedHour = 0;
    1588:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <timerExpectedHour+0x1>
    158c:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <timerExpectedHour>
	timerExpectedMinute = 0;
    1590:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <timerExpectedMinute+0x1>
    1594:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <timerExpectedMinute>
	timerExpectedSecond = 0;
    1598:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <timerExpectedSecond+0x1>
    159c:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <timerExpectedSecond>
    15a0:	08 95       	ret

000015a2 <timer_run>:
}

void timer_run()
{
	if(timerIsRunning == 0)
    15a2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <timerIsRunning>
    15a6:	81 11       	cpse	r24, r1
    15a8:	17 c0       	rjmp	.+46     	; 0x15d8 <timer_run+0x36>
	{
		timerExpectedSecond = 0;
    15aa:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <timerExpectedSecond+0x1>
    15ae:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <timerExpectedSecond>
		timerExpectedHour = timerSelectedHour;
    15b2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <timerSelectedHour>
    15b6:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <timerSelectedHour+0x1>
    15ba:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <timerExpectedHour+0x1>
    15be:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <timerExpectedHour>
		timerExpectedMinute = timerSelectedMinute;
    15c2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <timerSelectedMinute>
    15c6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <timerSelectedMinute+0x1>
    15ca:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <timerExpectedMinute+0x1>
    15ce:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <timerExpectedMinute>
		timerIsRunning = 1;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <timerIsRunning>
    15d8:	08 95       	ret

000015da <timer_trigger>:
	}
}

void timer_trigger()
{	
	if(timerIsReady == 0 && timerIsRunning == 1)
    15da:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <timerIsReady>
    15de:	81 11       	cpse	r24, r1
    15e0:	53 c0       	rjmp	.+166    	; 0x1688 <timer_trigger+0xae>
    15e2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <timerIsRunning>
    15e6:	88 23       	and	r24, r24
    15e8:	09 f4       	brne	.+2      	; 0x15ec <timer_trigger+0x12>
    15ea:	4e c0       	rjmp	.+156    	; 0x1688 <timer_trigger+0xae>
	{
		if(timerExpectedSecond == 0 && timerExpectedMinute == 0 && timerExpectedHour == 0)
    15ec:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <timerExpectedSecond>
    15f0:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <timerExpectedSecond+0x1>
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	81 f4       	brne	.+32     	; 0x1618 <timer_trigger+0x3e>
    15f8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <timerExpectedMinute>
    15fc:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <timerExpectedMinute+0x1>
    1600:	89 2b       	or	r24, r25
    1602:	d9 f5       	brne	.+118    	; 0x167a <timer_trigger+0xa0>
    1604:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <timerExpectedHour>
    1608:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <timerExpectedHour+0x1>
    160c:	89 2b       	or	r24, r25
    160e:	a9 f5       	brne	.+106    	; 0x167a <timer_trigger+0xa0>
		{
			timerIsReady = 1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <timerIsReady>
    1616:	08 95       	ret
		}
		else
		{
			timerExpectedSecond--;
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timerExpectedSecond+0x1>
    161e:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timerExpectedSecond>
			
			if(timerExpectedSecond < 0 && timerExpectedMinute >= 0)
    1622:	99 23       	and	r25, r25
    1624:	8c f4       	brge	.+34     	; 0x1648 <timer_trigger+0x6e>
    1626:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <timerExpectedMinute>
    162a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <timerExpectedMinute+0x1>
    162e:	99 23       	and	r25, r25
    1630:	8c f0       	brlt	.+34     	; 0x1654 <timer_trigger+0x7a>
			{
				timerExpectedSecond = SECONDS_IN_MINUTE - 1;
    1632:	2b e3       	ldi	r18, 0x3B	; 59
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <timerExpectedSecond+0x1>
    163a:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <timerExpectedSecond>
				timerExpectedMinute--;
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <timerExpectedMinute+0x1>
    1644:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <timerExpectedMinute>
			}
			
			if(timerExpectedMinute < 0 && timerExpectedHour > 0)
    1648:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <timerExpectedMinute>
    164c:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <timerExpectedMinute+0x1>
    1650:	99 23       	and	r25, r25
    1652:	d4 f4       	brge	.+52     	; 0x1688 <timer_trigger+0xae>
    1654:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <timerExpectedHour>
    1658:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <timerExpectedHour+0x1>
    165c:	18 16       	cp	r1, r24
    165e:	19 06       	cpc	r1, r25
    1660:	9c f4       	brge	.+38     	; 0x1688 <timer_trigger+0xae>
			{
				timerExpectedMinute = MINUTES_IN_HOUR - 1;
    1662:	2b e3       	ldi	r18, 0x3B	; 59
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <timerExpectedMinute+0x1>
    166a:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <timerExpectedMinute>
				timerExpectedHour--;
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <timerExpectedHour+0x1>
    1674:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <timerExpectedHour>
			}
		}
	}
}
    1678:	08 95       	ret
		{
			timerIsReady = 1;
		}
		else
		{
			timerExpectedSecond--;
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	9f ef       	ldi	r25, 0xFF	; 255
    167e:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timerExpectedSecond+0x1>
    1682:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timerExpectedSecond>
    1686:	cf cf       	rjmp	.-98     	; 0x1626 <timer_trigger+0x4c>
    1688:	08 95       	ret

0000168a <timer_add_hour>:
	}
}

void timer_add_hour()
{
	timerSelectedHour = add_hour(timerSelectedHour);
    168a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <timerSelectedHour>
    168e:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <timerSelectedHour+0x1>
    1692:	e9 dc       	rcall	.-1582   	; 0x1066 <add_hour>
    1694:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <timerSelectedHour+0x1>
    1698:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <timerSelectedHour>
    169c:	08 95       	ret

0000169e <timer_add_minute>:
}

void timer_add_minute()
{
	timerSelectedMinute = add_minute(timerSelectedMinute);
    169e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <timerSelectedMinute>
    16a2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <timerSelectedMinute+0x1>
    16a6:	e6 dc       	rcall	.-1588   	; 0x1074 <add_minute>
    16a8:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <timerSelectedMinute+0x1>
    16ac:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <timerSelectedMinute>
    16b0:	08 95       	ret

000016b2 <timer_subtract_hour>:
}

void timer_subtract_hour()
{
	timerSelectedHour = subtract_hour(timerSelectedHour);
    16b2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <timerSelectedHour>
    16b6:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <timerSelectedHour+0x1>
    16ba:	ea dc       	rcall	.-1580   	; 0x1090 <subtract_hour>
    16bc:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <timerSelectedHour+0x1>
    16c0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <timerSelectedHour>
    16c4:	08 95       	ret

000016c6 <timer_subtract_minute>:
}

void timer_subtract_minute()
{
	timerSelectedMinute = subtract_minute(timerSelectedMinute);
    16c6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <timerSelectedMinute>
    16ca:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <timerSelectedMinute+0x1>
    16ce:	e5 dc       	rcall	.-1590   	; 0x109a <subtract_minute>
    16d0:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <timerSelectedMinute+0x1>
    16d4:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <timerSelectedMinute>
    16d8:	08 95       	ret

000016da <display_timer>:
	draw_string(0, 0, "TIMER SET M");
	display_timer(0,1,0);
}

void display_timer(bool displayHour, bool displayMinute, bool displaySecond)
{
    16da:	af 92       	push	r10
    16dc:	cf 92       	push	r12
    16de:	ef 92       	push	r14
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
	if(timerIsRunning == 0)
    16e4:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <timerIsRunning>
    16e8:	91 11       	cpse	r25, r1
    16ea:	14 c0       	rjmp	.+40     	; 0x1714 <display_timer+0x3a>
	{
		draw_clock(0,2, timerSelectedHour, timerSelectedMinute,0, displayHour, displayMinute, displaySecond);
    16ec:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <timerSelectedMinute>
    16f0:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <timerSelectedMinute+0x1>
    16f4:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <timerSelectedHour>
    16f8:	f0 91 83 01 	lds	r31, 0x0183	; 0x800183 <timerSelectedHour+0x1>
    16fc:	a4 2e       	mov	r10, r20
    16fe:	c6 2e       	mov	r12, r22
    1700:	e8 2e       	mov	r14, r24
    1702:	00 e0       	ldi	r16, 0x00	; 0
    1704:	10 e0       	ldi	r17, 0x00	; 0
    1706:	af 01       	movw	r20, r30
    1708:	62 e0       	ldi	r22, 0x02	; 2
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	3e da       	rcall	.-2948   	; 0xb8e <draw_clock>
    1712:	1b c0       	rjmp	.+54     	; 0x174a <display_timer+0x70>
	}
	else if(timerIsRunning == 1 && timerIsReady == 0)
    1714:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <timerIsReady>
    1718:	91 11       	cpse	r25, r1
    171a:	16 c0       	rjmp	.+44     	; 0x1748 <display_timer+0x6e>
	{
		draw_clock(0,2, timerExpectedHour, timerExpectedMinute, timerExpectedSecond, displayHour, displayMinute, displaySecond);
    171c:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <timerExpectedSecond>
    1720:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <timerExpectedSecond+0x1>
    1724:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <timerExpectedMinute>
    1728:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <timerExpectedMinute+0x1>
    172c:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <timerExpectedHour>
    1730:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <timerExpectedHour+0x1>
    1734:	a4 2e       	mov	r10, r20
    1736:	c6 2e       	mov	r12, r22
    1738:	e8 2e       	mov	r14, r24
    173a:	af 01       	movw	r20, r30
    173c:	62 e0       	ldi	r22, 0x02	; 2
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	24 da       	rcall	.-3000   	; 0xb8e <draw_clock>
    1746:	01 c0       	rjmp	.+2      	; 0x174a <display_timer+0x70>
	}
	else
	{
		draw_its_time();
    1748:	88 da       	rcall	.-2800   	; 0xc5a <draw_its_time>
	}
}
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	ef 90       	pop	r14
    1750:	cf 90       	pop	r12
    1752:	af 90       	pop	r10
    1754:	08 95       	ret

00001756 <display_timer_view>:
	timerSelectedMinute = subtract_minute(timerSelectedMinute);
}

void display_timer_view()
{
	draw_string(0, 0, "TIMER");
    1756:	42 e6       	ldi	r20, 0x62	; 98
    1758:	51 e0       	ldi	r21, 0x01	; 1
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e da       	rcall	.-3044   	; 0xb80 <draw_string>
	display_timer(1,1,1);
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	b4 df       	rcall	.-152    	; 0x16da <display_timer>
    1772:	08 95       	ret

00001774 <display_timer_hour_set_view>:
}

void display_timer_hour_set_view()
{
	draw_string(0, 0, "TIMER SET H");
    1774:	40 e2       	ldi	r20, 0x20	; 32
    1776:	51 e0       	ldi	r21, 0x01	; 1
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	ff d9       	rcall	.-3074   	; 0xb80 <draw_string>
	display_timer(1,0,0);
    1782:	40 e0       	ldi	r20, 0x00	; 0
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a5 df       	rcall	.-182    	; 0x16da <display_timer>
    1790:	08 95       	ret

00001792 <display_timer_minute_set_view>:
}

void display_timer_minute_set_view()
{
	draw_string(0, 0, "TIMER SET M");
    1792:	4c e2       	ldi	r20, 0x2C	; 44
    1794:	51 e0       	ldi	r21, 0x01	; 1
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	f0 d9       	rcall	.-3104   	; 0xb80 <draw_string>
	display_timer(0,1,0);
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	96 df       	rcall	.-212    	; 0x16da <display_timer>
    17ae:	08 95       	ret

000017b0 <__divmodhi4>:
    17b0:	97 fb       	bst	r25, 7
    17b2:	07 2e       	mov	r0, r23
    17b4:	16 f4       	brtc	.+4      	; 0x17ba <__divmodhi4+0xa>
    17b6:	00 94       	com	r0
    17b8:	06 d0       	rcall	.+12     	; 0x17c6 <__divmodhi4_neg1>
    17ba:	77 fd       	sbrc	r23, 7
    17bc:	08 d0       	rcall	.+16     	; 0x17ce <__divmodhi4_neg2>
    17be:	27 d0       	rcall	.+78     	; 0x180e <__udivmodhi4>
    17c0:	07 fc       	sbrc	r0, 7
    17c2:	05 d0       	rcall	.+10     	; 0x17ce <__divmodhi4_neg2>
    17c4:	3e f4       	brtc	.+14     	; 0x17d4 <__divmodhi4_exit>

000017c6 <__divmodhi4_neg1>:
    17c6:	90 95       	com	r25
    17c8:	81 95       	neg	r24
    17ca:	9f 4f       	sbci	r25, 0xFF	; 255
    17cc:	08 95       	ret

000017ce <__divmodhi4_neg2>:
    17ce:	70 95       	com	r23
    17d0:	61 95       	neg	r22
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255

000017d4 <__divmodhi4_exit>:
    17d4:	08 95       	ret

000017d6 <__divmodsi4>:
    17d6:	05 2e       	mov	r0, r21
    17d8:	97 fb       	bst	r25, 7
    17da:	16 f4       	brtc	.+4      	; 0x17e0 <__divmodsi4+0xa>
    17dc:	00 94       	com	r0
    17de:	0f d0       	rcall	.+30     	; 0x17fe <__negsi2>
    17e0:	57 fd       	sbrc	r21, 7
    17e2:	05 d0       	rcall	.+10     	; 0x17ee <__divmodsi4_neg2>
    17e4:	28 d0       	rcall	.+80     	; 0x1836 <__udivmodsi4>
    17e6:	07 fc       	sbrc	r0, 7
    17e8:	02 d0       	rcall	.+4      	; 0x17ee <__divmodsi4_neg2>
    17ea:	46 f4       	brtc	.+16     	; 0x17fc <__divmodsi4_exit>
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <__negsi2>

000017ee <__divmodsi4_neg2>:
    17ee:	50 95       	com	r21
    17f0:	40 95       	com	r20
    17f2:	30 95       	com	r19
    17f4:	21 95       	neg	r18
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	4f 4f       	sbci	r20, 0xFF	; 255
    17fa:	5f 4f       	sbci	r21, 0xFF	; 255

000017fc <__divmodsi4_exit>:
    17fc:	08 95       	ret

000017fe <__negsi2>:
    17fe:	90 95       	com	r25
    1800:	80 95       	com	r24
    1802:	70 95       	com	r23
    1804:	61 95       	neg	r22
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	8f 4f       	sbci	r24, 0xFF	; 255
    180a:	9f 4f       	sbci	r25, 0xFF	; 255
    180c:	08 95       	ret

0000180e <__udivmodhi4>:
    180e:	aa 1b       	sub	r26, r26
    1810:	bb 1b       	sub	r27, r27
    1812:	51 e1       	ldi	r21, 0x11	; 17
    1814:	07 c0       	rjmp	.+14     	; 0x1824 <__udivmodhi4_ep>

00001816 <__udivmodhi4_loop>:
    1816:	aa 1f       	adc	r26, r26
    1818:	bb 1f       	adc	r27, r27
    181a:	a6 17       	cp	r26, r22
    181c:	b7 07       	cpc	r27, r23
    181e:	10 f0       	brcs	.+4      	; 0x1824 <__udivmodhi4_ep>
    1820:	a6 1b       	sub	r26, r22
    1822:	b7 0b       	sbc	r27, r23

00001824 <__udivmodhi4_ep>:
    1824:	88 1f       	adc	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	5a 95       	dec	r21
    182a:	a9 f7       	brne	.-22     	; 0x1816 <__udivmodhi4_loop>
    182c:	80 95       	com	r24
    182e:	90 95       	com	r25
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	08 95       	ret

00001836 <__udivmodsi4>:
    1836:	a1 e2       	ldi	r26, 0x21	; 33
    1838:	1a 2e       	mov	r1, r26
    183a:	aa 1b       	sub	r26, r26
    183c:	bb 1b       	sub	r27, r27
    183e:	fd 01       	movw	r30, r26
    1840:	0d c0       	rjmp	.+26     	; 0x185c <__udivmodsi4_ep>

00001842 <__udivmodsi4_loop>:
    1842:	aa 1f       	adc	r26, r26
    1844:	bb 1f       	adc	r27, r27
    1846:	ee 1f       	adc	r30, r30
    1848:	ff 1f       	adc	r31, r31
    184a:	a2 17       	cp	r26, r18
    184c:	b3 07       	cpc	r27, r19
    184e:	e4 07       	cpc	r30, r20
    1850:	f5 07       	cpc	r31, r21
    1852:	20 f0       	brcs	.+8      	; 0x185c <__udivmodsi4_ep>
    1854:	a2 1b       	sub	r26, r18
    1856:	b3 0b       	sbc	r27, r19
    1858:	e4 0b       	sbc	r30, r20
    185a:	f5 0b       	sbc	r31, r21

0000185c <__udivmodsi4_ep>:
    185c:	66 1f       	adc	r22, r22
    185e:	77 1f       	adc	r23, r23
    1860:	88 1f       	adc	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	1a 94       	dec	r1
    1866:	69 f7       	brne	.-38     	; 0x1842 <__udivmodsi4_loop>
    1868:	60 95       	com	r22
    186a:	70 95       	com	r23
    186c:	80 95       	com	r24
    186e:	90 95       	com	r25
    1870:	9b 01       	movw	r18, r22
    1872:	ac 01       	movw	r20, r24
    1874:	bd 01       	movw	r22, r26
    1876:	cf 01       	movw	r24, r30
    1878:	08 95       	ret

0000187a <sprintf>:
    187a:	ae e0       	ldi	r26, 0x0E	; 14
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e2 e4       	ldi	r30, 0x42	; 66
    1880:	fc e0       	ldi	r31, 0x0C	; 12
    1882:	aa c2       	rjmp	.+1364   	; 0x1dd8 <__prologue_saves__+0x1c>
    1884:	0d 89       	ldd	r16, Y+21	; 0x15
    1886:	1e 89       	ldd	r17, Y+22	; 0x16
    1888:	86 e0       	ldi	r24, 0x06	; 6
    188a:	8c 83       	std	Y+4, r24	; 0x04
    188c:	1a 83       	std	Y+2, r17	; 0x02
    188e:	09 83       	std	Y+1, r16	; 0x01
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	9f e7       	ldi	r25, 0x7F	; 127
    1894:	9e 83       	std	Y+6, r25	; 0x06
    1896:	8d 83       	std	Y+5, r24	; 0x05
    1898:	ae 01       	movw	r20, r28
    189a:	47 5e       	subi	r20, 0xE7	; 231
    189c:	5f 4f       	sbci	r21, 0xFF	; 255
    189e:	6f 89       	ldd	r22, Y+23	; 0x17
    18a0:	78 8d       	ldd	r23, Y+24	; 0x18
    18a2:	ce 01       	movw	r24, r28
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	08 d0       	rcall	.+16     	; 0x18b8 <vfprintf>
    18a8:	ef 81       	ldd	r30, Y+7	; 0x07
    18aa:	f8 85       	ldd	r31, Y+8	; 0x08
    18ac:	e0 0f       	add	r30, r16
    18ae:	f1 1f       	adc	r31, r17
    18b0:	10 82       	st	Z, r1
    18b2:	2e 96       	adiw	r28, 0x0e	; 14
    18b4:	e4 e0       	ldi	r30, 0x04	; 4
    18b6:	ac c2       	rjmp	.+1368   	; 0x1e10 <__epilogue_restores__+0x1c>

000018b8 <vfprintf>:
    18b8:	ab e0       	ldi	r26, 0x0B	; 11
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e1 e6       	ldi	r30, 0x61	; 97
    18be:	fc e0       	ldi	r31, 0x0C	; 12
    18c0:	7d c2       	rjmp	.+1274   	; 0x1dbc <__prologue_saves__>
    18c2:	6c 01       	movw	r12, r24
    18c4:	7b 01       	movw	r14, r22
    18c6:	8a 01       	movw	r16, r20
    18c8:	fc 01       	movw	r30, r24
    18ca:	17 82       	std	Z+7, r1	; 0x07
    18cc:	16 82       	std	Z+6, r1	; 0x06
    18ce:	83 81       	ldd	r24, Z+3	; 0x03
    18d0:	81 ff       	sbrs	r24, 1
    18d2:	bf c1       	rjmp	.+894    	; 0x1c52 <vfprintf+0x39a>
    18d4:	ce 01       	movw	r24, r28
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	3c 01       	movw	r6, r24
    18da:	f6 01       	movw	r30, r12
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	f7 01       	movw	r30, r14
    18e0:	93 fd       	sbrc	r25, 3
    18e2:	85 91       	lpm	r24, Z+
    18e4:	93 ff       	sbrs	r25, 3
    18e6:	81 91       	ld	r24, Z+
    18e8:	7f 01       	movw	r14, r30
    18ea:	88 23       	and	r24, r24
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <vfprintf+0x38>
    18ee:	ad c1       	rjmp	.+858    	; 0x1c4a <vfprintf+0x392>
    18f0:	85 32       	cpi	r24, 0x25	; 37
    18f2:	39 f4       	brne	.+14     	; 0x1902 <vfprintf+0x4a>
    18f4:	93 fd       	sbrc	r25, 3
    18f6:	85 91       	lpm	r24, Z+
    18f8:	93 ff       	sbrs	r25, 3
    18fa:	81 91       	ld	r24, Z+
    18fc:	7f 01       	movw	r14, r30
    18fe:	85 32       	cpi	r24, 0x25	; 37
    1900:	21 f4       	brne	.+8      	; 0x190a <vfprintf+0x52>
    1902:	b6 01       	movw	r22, r12
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	c0 d1       	rcall	.+896    	; 0x1c88 <fputc>
    1908:	e8 cf       	rjmp	.-48     	; 0x18da <vfprintf+0x22>
    190a:	91 2c       	mov	r9, r1
    190c:	21 2c       	mov	r2, r1
    190e:	31 2c       	mov	r3, r1
    1910:	ff e1       	ldi	r31, 0x1F	; 31
    1912:	f3 15       	cp	r31, r3
    1914:	d8 f0       	brcs	.+54     	; 0x194c <vfprintf+0x94>
    1916:	8b 32       	cpi	r24, 0x2B	; 43
    1918:	79 f0       	breq	.+30     	; 0x1938 <vfprintf+0x80>
    191a:	38 f4       	brcc	.+14     	; 0x192a <vfprintf+0x72>
    191c:	80 32       	cpi	r24, 0x20	; 32
    191e:	79 f0       	breq	.+30     	; 0x193e <vfprintf+0x86>
    1920:	83 32       	cpi	r24, 0x23	; 35
    1922:	a1 f4       	brne	.+40     	; 0x194c <vfprintf+0x94>
    1924:	23 2d       	mov	r18, r3
    1926:	20 61       	ori	r18, 0x10	; 16
    1928:	1d c0       	rjmp	.+58     	; 0x1964 <vfprintf+0xac>
    192a:	8d 32       	cpi	r24, 0x2D	; 45
    192c:	61 f0       	breq	.+24     	; 0x1946 <vfprintf+0x8e>
    192e:	80 33       	cpi	r24, 0x30	; 48
    1930:	69 f4       	brne	.+26     	; 0x194c <vfprintf+0x94>
    1932:	23 2d       	mov	r18, r3
    1934:	21 60       	ori	r18, 0x01	; 1
    1936:	16 c0       	rjmp	.+44     	; 0x1964 <vfprintf+0xac>
    1938:	83 2d       	mov	r24, r3
    193a:	82 60       	ori	r24, 0x02	; 2
    193c:	38 2e       	mov	r3, r24
    193e:	e3 2d       	mov	r30, r3
    1940:	e4 60       	ori	r30, 0x04	; 4
    1942:	3e 2e       	mov	r3, r30
    1944:	2a c0       	rjmp	.+84     	; 0x199a <vfprintf+0xe2>
    1946:	f3 2d       	mov	r31, r3
    1948:	f8 60       	ori	r31, 0x08	; 8
    194a:	1d c0       	rjmp	.+58     	; 0x1986 <vfprintf+0xce>
    194c:	37 fc       	sbrc	r3, 7
    194e:	2d c0       	rjmp	.+90     	; 0x19aa <vfprintf+0xf2>
    1950:	20 ed       	ldi	r18, 0xD0	; 208
    1952:	28 0f       	add	r18, r24
    1954:	2a 30       	cpi	r18, 0x0A	; 10
    1956:	40 f0       	brcs	.+16     	; 0x1968 <vfprintf+0xb0>
    1958:	8e 32       	cpi	r24, 0x2E	; 46
    195a:	b9 f4       	brne	.+46     	; 0x198a <vfprintf+0xd2>
    195c:	36 fc       	sbrc	r3, 6
    195e:	75 c1       	rjmp	.+746    	; 0x1c4a <vfprintf+0x392>
    1960:	23 2d       	mov	r18, r3
    1962:	20 64       	ori	r18, 0x40	; 64
    1964:	32 2e       	mov	r3, r18
    1966:	19 c0       	rjmp	.+50     	; 0x199a <vfprintf+0xe2>
    1968:	36 fe       	sbrs	r3, 6
    196a:	06 c0       	rjmp	.+12     	; 0x1978 <vfprintf+0xc0>
    196c:	8a e0       	ldi	r24, 0x0A	; 10
    196e:	98 9e       	mul	r9, r24
    1970:	20 0d       	add	r18, r0
    1972:	11 24       	eor	r1, r1
    1974:	92 2e       	mov	r9, r18
    1976:	11 c0       	rjmp	.+34     	; 0x199a <vfprintf+0xe2>
    1978:	ea e0       	ldi	r30, 0x0A	; 10
    197a:	2e 9e       	mul	r2, r30
    197c:	20 0d       	add	r18, r0
    197e:	11 24       	eor	r1, r1
    1980:	22 2e       	mov	r2, r18
    1982:	f3 2d       	mov	r31, r3
    1984:	f0 62       	ori	r31, 0x20	; 32
    1986:	3f 2e       	mov	r3, r31
    1988:	08 c0       	rjmp	.+16     	; 0x199a <vfprintf+0xe2>
    198a:	8c 36       	cpi	r24, 0x6C	; 108
    198c:	21 f4       	brne	.+8      	; 0x1996 <vfprintf+0xde>
    198e:	83 2d       	mov	r24, r3
    1990:	80 68       	ori	r24, 0x80	; 128
    1992:	38 2e       	mov	r3, r24
    1994:	02 c0       	rjmp	.+4      	; 0x199a <vfprintf+0xe2>
    1996:	88 36       	cpi	r24, 0x68	; 104
    1998:	41 f4       	brne	.+16     	; 0x19aa <vfprintf+0xf2>
    199a:	f7 01       	movw	r30, r14
    199c:	93 fd       	sbrc	r25, 3
    199e:	85 91       	lpm	r24, Z+
    19a0:	93 ff       	sbrs	r25, 3
    19a2:	81 91       	ld	r24, Z+
    19a4:	7f 01       	movw	r14, r30
    19a6:	81 11       	cpse	r24, r1
    19a8:	b3 cf       	rjmp	.-154    	; 0x1910 <vfprintf+0x58>
    19aa:	98 2f       	mov	r25, r24
    19ac:	9f 7d       	andi	r25, 0xDF	; 223
    19ae:	95 54       	subi	r25, 0x45	; 69
    19b0:	93 30       	cpi	r25, 0x03	; 3
    19b2:	28 f4       	brcc	.+10     	; 0x19be <vfprintf+0x106>
    19b4:	0c 5f       	subi	r16, 0xFC	; 252
    19b6:	1f 4f       	sbci	r17, 0xFF	; 255
    19b8:	9f e3       	ldi	r25, 0x3F	; 63
    19ba:	99 83       	std	Y+1, r25	; 0x01
    19bc:	0d c0       	rjmp	.+26     	; 0x19d8 <vfprintf+0x120>
    19be:	83 36       	cpi	r24, 0x63	; 99
    19c0:	31 f0       	breq	.+12     	; 0x19ce <vfprintf+0x116>
    19c2:	83 37       	cpi	r24, 0x73	; 115
    19c4:	71 f0       	breq	.+28     	; 0x19e2 <vfprintf+0x12a>
    19c6:	83 35       	cpi	r24, 0x53	; 83
    19c8:	09 f0       	breq	.+2      	; 0x19cc <vfprintf+0x114>
    19ca:	55 c0       	rjmp	.+170    	; 0x1a76 <vfprintf+0x1be>
    19cc:	20 c0       	rjmp	.+64     	; 0x1a0e <vfprintf+0x156>
    19ce:	f8 01       	movw	r30, r16
    19d0:	80 81       	ld	r24, Z
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	0e 5f       	subi	r16, 0xFE	; 254
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	88 24       	eor	r8, r8
    19da:	83 94       	inc	r8
    19dc:	91 2c       	mov	r9, r1
    19de:	53 01       	movw	r10, r6
    19e0:	12 c0       	rjmp	.+36     	; 0x1a06 <vfprintf+0x14e>
    19e2:	28 01       	movw	r4, r16
    19e4:	f2 e0       	ldi	r31, 0x02	; 2
    19e6:	4f 0e       	add	r4, r31
    19e8:	51 1c       	adc	r5, r1
    19ea:	f8 01       	movw	r30, r16
    19ec:	a0 80       	ld	r10, Z
    19ee:	b1 80       	ldd	r11, Z+1	; 0x01
    19f0:	36 fe       	sbrs	r3, 6
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <vfprintf+0x142>
    19f4:	69 2d       	mov	r22, r9
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <vfprintf+0x146>
    19fa:	6f ef       	ldi	r22, 0xFF	; 255
    19fc:	7f ef       	ldi	r23, 0xFF	; 255
    19fe:	c5 01       	movw	r24, r10
    1a00:	38 d1       	rcall	.+624    	; 0x1c72 <strnlen>
    1a02:	4c 01       	movw	r8, r24
    1a04:	82 01       	movw	r16, r4
    1a06:	f3 2d       	mov	r31, r3
    1a08:	ff 77       	andi	r31, 0x7F	; 127
    1a0a:	3f 2e       	mov	r3, r31
    1a0c:	15 c0       	rjmp	.+42     	; 0x1a38 <vfprintf+0x180>
    1a0e:	28 01       	movw	r4, r16
    1a10:	22 e0       	ldi	r18, 0x02	; 2
    1a12:	42 0e       	add	r4, r18
    1a14:	51 1c       	adc	r5, r1
    1a16:	f8 01       	movw	r30, r16
    1a18:	a0 80       	ld	r10, Z
    1a1a:	b1 80       	ldd	r11, Z+1	; 0x01
    1a1c:	36 fe       	sbrs	r3, 6
    1a1e:	03 c0       	rjmp	.+6      	; 0x1a26 <vfprintf+0x16e>
    1a20:	69 2d       	mov	r22, r9
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <vfprintf+0x172>
    1a26:	6f ef       	ldi	r22, 0xFF	; 255
    1a28:	7f ef       	ldi	r23, 0xFF	; 255
    1a2a:	c5 01       	movw	r24, r10
    1a2c:	17 d1       	rcall	.+558    	; 0x1c5c <strnlen_P>
    1a2e:	4c 01       	movw	r8, r24
    1a30:	f3 2d       	mov	r31, r3
    1a32:	f0 68       	ori	r31, 0x80	; 128
    1a34:	3f 2e       	mov	r3, r31
    1a36:	82 01       	movw	r16, r4
    1a38:	33 fc       	sbrc	r3, 3
    1a3a:	19 c0       	rjmp	.+50     	; 0x1a6e <vfprintf+0x1b6>
    1a3c:	82 2d       	mov	r24, r2
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	88 16       	cp	r8, r24
    1a42:	99 06       	cpc	r9, r25
    1a44:	a0 f4       	brcc	.+40     	; 0x1a6e <vfprintf+0x1b6>
    1a46:	b6 01       	movw	r22, r12
    1a48:	80 e2       	ldi	r24, 0x20	; 32
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	1d d1       	rcall	.+570    	; 0x1c88 <fputc>
    1a4e:	2a 94       	dec	r2
    1a50:	f5 cf       	rjmp	.-22     	; 0x1a3c <vfprintf+0x184>
    1a52:	f5 01       	movw	r30, r10
    1a54:	37 fc       	sbrc	r3, 7
    1a56:	85 91       	lpm	r24, Z+
    1a58:	37 fe       	sbrs	r3, 7
    1a5a:	81 91       	ld	r24, Z+
    1a5c:	5f 01       	movw	r10, r30
    1a5e:	b6 01       	movw	r22, r12
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	12 d1       	rcall	.+548    	; 0x1c88 <fputc>
    1a64:	21 10       	cpse	r2, r1
    1a66:	2a 94       	dec	r2
    1a68:	21 e0       	ldi	r18, 0x01	; 1
    1a6a:	82 1a       	sub	r8, r18
    1a6c:	91 08       	sbc	r9, r1
    1a6e:	81 14       	cp	r8, r1
    1a70:	91 04       	cpc	r9, r1
    1a72:	79 f7       	brne	.-34     	; 0x1a52 <vfprintf+0x19a>
    1a74:	e1 c0       	rjmp	.+450    	; 0x1c38 <vfprintf+0x380>
    1a76:	84 36       	cpi	r24, 0x64	; 100
    1a78:	11 f0       	breq	.+4      	; 0x1a7e <vfprintf+0x1c6>
    1a7a:	89 36       	cpi	r24, 0x69	; 105
    1a7c:	39 f5       	brne	.+78     	; 0x1acc <vfprintf+0x214>
    1a7e:	f8 01       	movw	r30, r16
    1a80:	37 fe       	sbrs	r3, 7
    1a82:	07 c0       	rjmp	.+14     	; 0x1a92 <vfprintf+0x1da>
    1a84:	60 81       	ld	r22, Z
    1a86:	71 81       	ldd	r23, Z+1	; 0x01
    1a88:	82 81       	ldd	r24, Z+2	; 0x02
    1a8a:	93 81       	ldd	r25, Z+3	; 0x03
    1a8c:	0c 5f       	subi	r16, 0xFC	; 252
    1a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a90:	08 c0       	rjmp	.+16     	; 0x1aa2 <vfprintf+0x1ea>
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	07 2e       	mov	r0, r23
    1a98:	00 0c       	add	r0, r0
    1a9a:	88 0b       	sbc	r24, r24
    1a9c:	99 0b       	sbc	r25, r25
    1a9e:	0e 5f       	subi	r16, 0xFE	; 254
    1aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa2:	f3 2d       	mov	r31, r3
    1aa4:	ff 76       	andi	r31, 0x6F	; 111
    1aa6:	3f 2e       	mov	r3, r31
    1aa8:	97 ff       	sbrs	r25, 7
    1aaa:	09 c0       	rjmp	.+18     	; 0x1abe <vfprintf+0x206>
    1aac:	90 95       	com	r25
    1aae:	80 95       	com	r24
    1ab0:	70 95       	com	r23
    1ab2:	61 95       	neg	r22
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	f0 68       	ori	r31, 0x80	; 128
    1abc:	3f 2e       	mov	r3, r31
    1abe:	2a e0       	ldi	r18, 0x0A	; 10
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	a3 01       	movw	r20, r6
    1ac4:	1d d1       	rcall	.+570    	; 0x1d00 <__ultoa_invert>
    1ac6:	88 2e       	mov	r8, r24
    1ac8:	86 18       	sub	r8, r6
    1aca:	44 c0       	rjmp	.+136    	; 0x1b54 <vfprintf+0x29c>
    1acc:	85 37       	cpi	r24, 0x75	; 117
    1ace:	31 f4       	brne	.+12     	; 0x1adc <vfprintf+0x224>
    1ad0:	23 2d       	mov	r18, r3
    1ad2:	2f 7e       	andi	r18, 0xEF	; 239
    1ad4:	b2 2e       	mov	r11, r18
    1ad6:	2a e0       	ldi	r18, 0x0A	; 10
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	25 c0       	rjmp	.+74     	; 0x1b26 <vfprintf+0x26e>
    1adc:	93 2d       	mov	r25, r3
    1ade:	99 7f       	andi	r25, 0xF9	; 249
    1ae0:	b9 2e       	mov	r11, r25
    1ae2:	8f 36       	cpi	r24, 0x6F	; 111
    1ae4:	c1 f0       	breq	.+48     	; 0x1b16 <vfprintf+0x25e>
    1ae6:	18 f4       	brcc	.+6      	; 0x1aee <vfprintf+0x236>
    1ae8:	88 35       	cpi	r24, 0x58	; 88
    1aea:	79 f0       	breq	.+30     	; 0x1b0a <vfprintf+0x252>
    1aec:	ae c0       	rjmp	.+348    	; 0x1c4a <vfprintf+0x392>
    1aee:	80 37       	cpi	r24, 0x70	; 112
    1af0:	19 f0       	breq	.+6      	; 0x1af8 <vfprintf+0x240>
    1af2:	88 37       	cpi	r24, 0x78	; 120
    1af4:	21 f0       	breq	.+8      	; 0x1afe <vfprintf+0x246>
    1af6:	a9 c0       	rjmp	.+338    	; 0x1c4a <vfprintf+0x392>
    1af8:	e9 2f       	mov	r30, r25
    1afa:	e0 61       	ori	r30, 0x10	; 16
    1afc:	be 2e       	mov	r11, r30
    1afe:	b4 fe       	sbrs	r11, 4
    1b00:	0d c0       	rjmp	.+26     	; 0x1b1c <vfprintf+0x264>
    1b02:	fb 2d       	mov	r31, r11
    1b04:	f4 60       	ori	r31, 0x04	; 4
    1b06:	bf 2e       	mov	r11, r31
    1b08:	09 c0       	rjmp	.+18     	; 0x1b1c <vfprintf+0x264>
    1b0a:	34 fe       	sbrs	r3, 4
    1b0c:	0a c0       	rjmp	.+20     	; 0x1b22 <vfprintf+0x26a>
    1b0e:	29 2f       	mov	r18, r25
    1b10:	26 60       	ori	r18, 0x06	; 6
    1b12:	b2 2e       	mov	r11, r18
    1b14:	06 c0       	rjmp	.+12     	; 0x1b22 <vfprintf+0x26a>
    1b16:	28 e0       	ldi	r18, 0x08	; 8
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	05 c0       	rjmp	.+10     	; 0x1b26 <vfprintf+0x26e>
    1b1c:	20 e1       	ldi	r18, 0x10	; 16
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <vfprintf+0x26e>
    1b22:	20 e1       	ldi	r18, 0x10	; 16
    1b24:	32 e0       	ldi	r19, 0x02	; 2
    1b26:	f8 01       	movw	r30, r16
    1b28:	b7 fe       	sbrs	r11, 7
    1b2a:	07 c0       	rjmp	.+14     	; 0x1b3a <vfprintf+0x282>
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	0c 5f       	subi	r16, 0xFC	; 252
    1b36:	1f 4f       	sbci	r17, 0xFF	; 255
    1b38:	06 c0       	rjmp	.+12     	; 0x1b46 <vfprintf+0x28e>
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 5f       	subi	r16, 0xFE	; 254
    1b44:	1f 4f       	sbci	r17, 0xFF	; 255
    1b46:	a3 01       	movw	r20, r6
    1b48:	db d0       	rcall	.+438    	; 0x1d00 <__ultoa_invert>
    1b4a:	88 2e       	mov	r8, r24
    1b4c:	86 18       	sub	r8, r6
    1b4e:	fb 2d       	mov	r31, r11
    1b50:	ff 77       	andi	r31, 0x7F	; 127
    1b52:	3f 2e       	mov	r3, r31
    1b54:	36 fe       	sbrs	r3, 6
    1b56:	0d c0       	rjmp	.+26     	; 0x1b72 <vfprintf+0x2ba>
    1b58:	23 2d       	mov	r18, r3
    1b5a:	2e 7f       	andi	r18, 0xFE	; 254
    1b5c:	a2 2e       	mov	r10, r18
    1b5e:	89 14       	cp	r8, r9
    1b60:	58 f4       	brcc	.+22     	; 0x1b78 <vfprintf+0x2c0>
    1b62:	34 fe       	sbrs	r3, 4
    1b64:	0b c0       	rjmp	.+22     	; 0x1b7c <vfprintf+0x2c4>
    1b66:	32 fc       	sbrc	r3, 2
    1b68:	09 c0       	rjmp	.+18     	; 0x1b7c <vfprintf+0x2c4>
    1b6a:	83 2d       	mov	r24, r3
    1b6c:	8e 7e       	andi	r24, 0xEE	; 238
    1b6e:	a8 2e       	mov	r10, r24
    1b70:	05 c0       	rjmp	.+10     	; 0x1b7c <vfprintf+0x2c4>
    1b72:	b8 2c       	mov	r11, r8
    1b74:	a3 2c       	mov	r10, r3
    1b76:	03 c0       	rjmp	.+6      	; 0x1b7e <vfprintf+0x2c6>
    1b78:	b8 2c       	mov	r11, r8
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <vfprintf+0x2c6>
    1b7c:	b9 2c       	mov	r11, r9
    1b7e:	a4 fe       	sbrs	r10, 4
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <vfprintf+0x2e8>
    1b82:	fe 01       	movw	r30, r28
    1b84:	e8 0d       	add	r30, r8
    1b86:	f1 1d       	adc	r31, r1
    1b88:	80 81       	ld	r24, Z
    1b8a:	80 33       	cpi	r24, 0x30	; 48
    1b8c:	21 f4       	brne	.+8      	; 0x1b96 <vfprintf+0x2de>
    1b8e:	9a 2d       	mov	r25, r10
    1b90:	99 7e       	andi	r25, 0xE9	; 233
    1b92:	a9 2e       	mov	r10, r25
    1b94:	09 c0       	rjmp	.+18     	; 0x1ba8 <vfprintf+0x2f0>
    1b96:	a2 fe       	sbrs	r10, 2
    1b98:	06 c0       	rjmp	.+12     	; 0x1ba6 <vfprintf+0x2ee>
    1b9a:	b3 94       	inc	r11
    1b9c:	b3 94       	inc	r11
    1b9e:	04 c0       	rjmp	.+8      	; 0x1ba8 <vfprintf+0x2f0>
    1ba0:	8a 2d       	mov	r24, r10
    1ba2:	86 78       	andi	r24, 0x86	; 134
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <vfprintf+0x2f0>
    1ba6:	b3 94       	inc	r11
    1ba8:	a3 fc       	sbrc	r10, 3
    1baa:	10 c0       	rjmp	.+32     	; 0x1bcc <vfprintf+0x314>
    1bac:	a0 fe       	sbrs	r10, 0
    1bae:	06 c0       	rjmp	.+12     	; 0x1bbc <vfprintf+0x304>
    1bb0:	b2 14       	cp	r11, r2
    1bb2:	80 f4       	brcc	.+32     	; 0x1bd4 <vfprintf+0x31c>
    1bb4:	28 0c       	add	r2, r8
    1bb6:	92 2c       	mov	r9, r2
    1bb8:	9b 18       	sub	r9, r11
    1bba:	0d c0       	rjmp	.+26     	; 0x1bd6 <vfprintf+0x31e>
    1bbc:	b2 14       	cp	r11, r2
    1bbe:	58 f4       	brcc	.+22     	; 0x1bd6 <vfprintf+0x31e>
    1bc0:	b6 01       	movw	r22, r12
    1bc2:	80 e2       	ldi	r24, 0x20	; 32
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	60 d0       	rcall	.+192    	; 0x1c88 <fputc>
    1bc8:	b3 94       	inc	r11
    1bca:	f8 cf       	rjmp	.-16     	; 0x1bbc <vfprintf+0x304>
    1bcc:	b2 14       	cp	r11, r2
    1bce:	18 f4       	brcc	.+6      	; 0x1bd6 <vfprintf+0x31e>
    1bd0:	2b 18       	sub	r2, r11
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <vfprintf+0x320>
    1bd4:	98 2c       	mov	r9, r8
    1bd6:	21 2c       	mov	r2, r1
    1bd8:	a4 fe       	sbrs	r10, 4
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <vfprintf+0x342>
    1bdc:	b6 01       	movw	r22, r12
    1bde:	80 e3       	ldi	r24, 0x30	; 48
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	52 d0       	rcall	.+164    	; 0x1c88 <fputc>
    1be4:	a2 fe       	sbrs	r10, 2
    1be6:	16 c0       	rjmp	.+44     	; 0x1c14 <vfprintf+0x35c>
    1be8:	a1 fc       	sbrc	r10, 1
    1bea:	03 c0       	rjmp	.+6      	; 0x1bf2 <vfprintf+0x33a>
    1bec:	88 e7       	ldi	r24, 0x78	; 120
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <vfprintf+0x33e>
    1bf2:	88 e5       	ldi	r24, 0x58	; 88
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	b6 01       	movw	r22, r12
    1bf8:	0c c0       	rjmp	.+24     	; 0x1c12 <vfprintf+0x35a>
    1bfa:	8a 2d       	mov	r24, r10
    1bfc:	86 78       	andi	r24, 0x86	; 134
    1bfe:	51 f0       	breq	.+20     	; 0x1c14 <vfprintf+0x35c>
    1c00:	a1 fe       	sbrs	r10, 1
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <vfprintf+0x350>
    1c04:	8b e2       	ldi	r24, 0x2B	; 43
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <vfprintf+0x352>
    1c08:	80 e2       	ldi	r24, 0x20	; 32
    1c0a:	a7 fc       	sbrc	r10, 7
    1c0c:	8d e2       	ldi	r24, 0x2D	; 45
    1c0e:	b6 01       	movw	r22, r12
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	3a d0       	rcall	.+116    	; 0x1c88 <fputc>
    1c14:	89 14       	cp	r8, r9
    1c16:	30 f4       	brcc	.+12     	; 0x1c24 <vfprintf+0x36c>
    1c18:	b6 01       	movw	r22, r12
    1c1a:	80 e3       	ldi	r24, 0x30	; 48
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	34 d0       	rcall	.+104    	; 0x1c88 <fputc>
    1c20:	9a 94       	dec	r9
    1c22:	f8 cf       	rjmp	.-16     	; 0x1c14 <vfprintf+0x35c>
    1c24:	8a 94       	dec	r8
    1c26:	f3 01       	movw	r30, r6
    1c28:	e8 0d       	add	r30, r8
    1c2a:	f1 1d       	adc	r31, r1
    1c2c:	80 81       	ld	r24, Z
    1c2e:	b6 01       	movw	r22, r12
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	2a d0       	rcall	.+84     	; 0x1c88 <fputc>
    1c34:	81 10       	cpse	r8, r1
    1c36:	f6 cf       	rjmp	.-20     	; 0x1c24 <vfprintf+0x36c>
    1c38:	22 20       	and	r2, r2
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <vfprintf+0x386>
    1c3c:	4e ce       	rjmp	.-868    	; 0x18da <vfprintf+0x22>
    1c3e:	b6 01       	movw	r22, r12
    1c40:	80 e2       	ldi	r24, 0x20	; 32
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	21 d0       	rcall	.+66     	; 0x1c88 <fputc>
    1c46:	2a 94       	dec	r2
    1c48:	f7 cf       	rjmp	.-18     	; 0x1c38 <vfprintf+0x380>
    1c4a:	f6 01       	movw	r30, r12
    1c4c:	86 81       	ldd	r24, Z+6	; 0x06
    1c4e:	97 81       	ldd	r25, Z+7	; 0x07
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <vfprintf+0x39e>
    1c52:	8f ef       	ldi	r24, 0xFF	; 255
    1c54:	9f ef       	ldi	r25, 0xFF	; 255
    1c56:	2b 96       	adiw	r28, 0x0b	; 11
    1c58:	e2 e1       	ldi	r30, 0x12	; 18
    1c5a:	cc c0       	rjmp	.+408    	; 0x1df4 <__epilogue_restores__>

00001c5c <strnlen_P>:
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	05 90       	lpm	r0, Z+
    1c60:	61 50       	subi	r22, 0x01	; 1
    1c62:	70 40       	sbci	r23, 0x00	; 0
    1c64:	01 10       	cpse	r0, r1
    1c66:	d8 f7       	brcc	.-10     	; 0x1c5e <strnlen_P+0x2>
    1c68:	80 95       	com	r24
    1c6a:	90 95       	com	r25
    1c6c:	8e 0f       	add	r24, r30
    1c6e:	9f 1f       	adc	r25, r31
    1c70:	08 95       	ret

00001c72 <strnlen>:
    1c72:	fc 01       	movw	r30, r24
    1c74:	61 50       	subi	r22, 0x01	; 1
    1c76:	70 40       	sbci	r23, 0x00	; 0
    1c78:	01 90       	ld	r0, Z+
    1c7a:	01 10       	cpse	r0, r1
    1c7c:	d8 f7       	brcc	.-10     	; 0x1c74 <strnlen+0x2>
    1c7e:	80 95       	com	r24
    1c80:	90 95       	com	r25
    1c82:	8e 0f       	add	r24, r30
    1c84:	9f 1f       	adc	r25, r31
    1c86:	08 95       	ret

00001c88 <fputc>:
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	fb 01       	movw	r30, r22
    1c92:	23 81       	ldd	r18, Z+3	; 0x03
    1c94:	21 fd       	sbrc	r18, 1
    1c96:	03 c0       	rjmp	.+6      	; 0x1c9e <fputc+0x16>
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	9f ef       	ldi	r25, 0xFF	; 255
    1c9c:	2c c0       	rjmp	.+88     	; 0x1cf6 <fputc+0x6e>
    1c9e:	22 ff       	sbrs	r18, 2
    1ca0:	16 c0       	rjmp	.+44     	; 0x1cce <fputc+0x46>
    1ca2:	46 81       	ldd	r20, Z+6	; 0x06
    1ca4:	57 81       	ldd	r21, Z+7	; 0x07
    1ca6:	24 81       	ldd	r18, Z+4	; 0x04
    1ca8:	35 81       	ldd	r19, Z+5	; 0x05
    1caa:	42 17       	cp	r20, r18
    1cac:	53 07       	cpc	r21, r19
    1cae:	44 f4       	brge	.+16     	; 0x1cc0 <fputc+0x38>
    1cb0:	a0 81       	ld	r26, Z
    1cb2:	b1 81       	ldd	r27, Z+1	; 0x01
    1cb4:	9d 01       	movw	r18, r26
    1cb6:	2f 5f       	subi	r18, 0xFF	; 255
    1cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cba:	31 83       	std	Z+1, r19	; 0x01
    1cbc:	20 83       	st	Z, r18
    1cbe:	8c 93       	st	X, r24
    1cc0:	26 81       	ldd	r18, Z+6	; 0x06
    1cc2:	37 81       	ldd	r19, Z+7	; 0x07
    1cc4:	2f 5f       	subi	r18, 0xFF	; 255
    1cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc8:	37 83       	std	Z+7, r19	; 0x07
    1cca:	26 83       	std	Z+6, r18	; 0x06
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <fputc+0x6e>
    1cce:	8b 01       	movw	r16, r22
    1cd0:	ec 01       	movw	r28, r24
    1cd2:	fb 01       	movw	r30, r22
    1cd4:	00 84       	ldd	r0, Z+8	; 0x08
    1cd6:	f1 85       	ldd	r31, Z+9	; 0x09
    1cd8:	e0 2d       	mov	r30, r0
    1cda:	09 95       	icall
    1cdc:	89 2b       	or	r24, r25
    1cde:	e1 f6       	brne	.-72     	; 0x1c98 <fputc+0x10>
    1ce0:	d8 01       	movw	r26, r16
    1ce2:	16 96       	adiw	r26, 0x06	; 6
    1ce4:	8d 91       	ld	r24, X+
    1ce6:	9c 91       	ld	r25, X
    1ce8:	17 97       	sbiw	r26, 0x07	; 7
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	17 96       	adiw	r26, 0x07	; 7
    1cee:	9c 93       	st	X, r25
    1cf0:	8e 93       	st	-X, r24
    1cf2:	16 97       	sbiw	r26, 0x06	; 6
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	08 95       	ret

00001d00 <__ultoa_invert>:
    1d00:	fa 01       	movw	r30, r20
    1d02:	aa 27       	eor	r26, r26
    1d04:	28 30       	cpi	r18, 0x08	; 8
    1d06:	51 f1       	breq	.+84     	; 0x1d5c <__ultoa_invert+0x5c>
    1d08:	20 31       	cpi	r18, 0x10	; 16
    1d0a:	81 f1       	breq	.+96     	; 0x1d6c <__ultoa_invert+0x6c>
    1d0c:	e8 94       	clt
    1d0e:	6f 93       	push	r22
    1d10:	6e 7f       	andi	r22, 0xFE	; 254
    1d12:	6e 5f       	subi	r22, 0xFE	; 254
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	8f 4f       	sbci	r24, 0xFF	; 255
    1d18:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1a:	af 4f       	sbci	r26, 0xFF	; 255
    1d1c:	b1 e0       	ldi	r27, 0x01	; 1
    1d1e:	3e d0       	rcall	.+124    	; 0x1d9c <__ultoa_invert+0x9c>
    1d20:	b4 e0       	ldi	r27, 0x04	; 4
    1d22:	3c d0       	rcall	.+120    	; 0x1d9c <__ultoa_invert+0x9c>
    1d24:	67 0f       	add	r22, r23
    1d26:	78 1f       	adc	r23, r24
    1d28:	89 1f       	adc	r24, r25
    1d2a:	9a 1f       	adc	r25, r26
    1d2c:	a1 1d       	adc	r26, r1
    1d2e:	68 0f       	add	r22, r24
    1d30:	79 1f       	adc	r23, r25
    1d32:	8a 1f       	adc	r24, r26
    1d34:	91 1d       	adc	r25, r1
    1d36:	a1 1d       	adc	r26, r1
    1d38:	6a 0f       	add	r22, r26
    1d3a:	71 1d       	adc	r23, r1
    1d3c:	81 1d       	adc	r24, r1
    1d3e:	91 1d       	adc	r25, r1
    1d40:	a1 1d       	adc	r26, r1
    1d42:	20 d0       	rcall	.+64     	; 0x1d84 <__ultoa_invert+0x84>
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <__ultoa_invert+0x48>
    1d46:	68 94       	set
    1d48:	3f 91       	pop	r19
    1d4a:	2a e0       	ldi	r18, 0x0A	; 10
    1d4c:	26 9f       	mul	r18, r22
    1d4e:	11 24       	eor	r1, r1
    1d50:	30 19       	sub	r19, r0
    1d52:	30 5d       	subi	r19, 0xD0	; 208
    1d54:	31 93       	st	Z+, r19
    1d56:	de f6       	brtc	.-74     	; 0x1d0e <__ultoa_invert+0xe>
    1d58:	cf 01       	movw	r24, r30
    1d5a:	08 95       	ret
    1d5c:	46 2f       	mov	r20, r22
    1d5e:	47 70       	andi	r20, 0x07	; 7
    1d60:	40 5d       	subi	r20, 0xD0	; 208
    1d62:	41 93       	st	Z+, r20
    1d64:	b3 e0       	ldi	r27, 0x03	; 3
    1d66:	0f d0       	rcall	.+30     	; 0x1d86 <__ultoa_invert+0x86>
    1d68:	c9 f7       	brne	.-14     	; 0x1d5c <__ultoa_invert+0x5c>
    1d6a:	f6 cf       	rjmp	.-20     	; 0x1d58 <__ultoa_invert+0x58>
    1d6c:	46 2f       	mov	r20, r22
    1d6e:	4f 70       	andi	r20, 0x0F	; 15
    1d70:	40 5d       	subi	r20, 0xD0	; 208
    1d72:	4a 33       	cpi	r20, 0x3A	; 58
    1d74:	18 f0       	brcs	.+6      	; 0x1d7c <__ultoa_invert+0x7c>
    1d76:	49 5d       	subi	r20, 0xD9	; 217
    1d78:	31 fd       	sbrc	r19, 1
    1d7a:	40 52       	subi	r20, 0x20	; 32
    1d7c:	41 93       	st	Z+, r20
    1d7e:	02 d0       	rcall	.+4      	; 0x1d84 <__ultoa_invert+0x84>
    1d80:	a9 f7       	brne	.-22     	; 0x1d6c <__ultoa_invert+0x6c>
    1d82:	ea cf       	rjmp	.-44     	; 0x1d58 <__ultoa_invert+0x58>
    1d84:	b4 e0       	ldi	r27, 0x04	; 4
    1d86:	a6 95       	lsr	r26
    1d88:	97 95       	ror	r25
    1d8a:	87 95       	ror	r24
    1d8c:	77 95       	ror	r23
    1d8e:	67 95       	ror	r22
    1d90:	ba 95       	dec	r27
    1d92:	c9 f7       	brne	.-14     	; 0x1d86 <__ultoa_invert+0x86>
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	61 05       	cpc	r22, r1
    1d98:	71 05       	cpc	r23, r1
    1d9a:	08 95       	ret
    1d9c:	9b 01       	movw	r18, r22
    1d9e:	ac 01       	movw	r20, r24
    1da0:	0a 2e       	mov	r0, r26
    1da2:	06 94       	lsr	r0
    1da4:	57 95       	ror	r21
    1da6:	47 95       	ror	r20
    1da8:	37 95       	ror	r19
    1daa:	27 95       	ror	r18
    1dac:	ba 95       	dec	r27
    1dae:	c9 f7       	brne	.-14     	; 0x1da2 <__ultoa_invert+0xa2>
    1db0:	62 0f       	add	r22, r18
    1db2:	73 1f       	adc	r23, r19
    1db4:	84 1f       	adc	r24, r20
    1db6:	95 1f       	adc	r25, r21
    1db8:	a0 1d       	adc	r26, r0
    1dba:	08 95       	ret

00001dbc <__prologue_saves__>:
    1dbc:	2f 92       	push	r2
    1dbe:	3f 92       	push	r3
    1dc0:	4f 92       	push	r4
    1dc2:	5f 92       	push	r5
    1dc4:	6f 92       	push	r6
    1dc6:	7f 92       	push	r7
    1dc8:	8f 92       	push	r8
    1dca:	9f 92       	push	r9
    1dcc:	af 92       	push	r10
    1dce:	bf 92       	push	r11
    1dd0:	cf 92       	push	r12
    1dd2:	df 92       	push	r13
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	ca 1b       	sub	r28, r26
    1de6:	db 0b       	sbc	r29, r27
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	09 94       	ijmp

00001df4 <__epilogue_restores__>:
    1df4:	2a 88       	ldd	r2, Y+18	; 0x12
    1df6:	39 88       	ldd	r3, Y+17	; 0x11
    1df8:	48 88       	ldd	r4, Y+16	; 0x10
    1dfa:	5f 84       	ldd	r5, Y+15	; 0x0f
    1dfc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dfe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e00:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e02:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e04:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e06:	b9 84       	ldd	r11, Y+9	; 0x09
    1e08:	c8 84       	ldd	r12, Y+8	; 0x08
    1e0a:	df 80       	ldd	r13, Y+7	; 0x07
    1e0c:	ee 80       	ldd	r14, Y+6	; 0x06
    1e0e:	fd 80       	ldd	r15, Y+5	; 0x05
    1e10:	0c 81       	ldd	r16, Y+4	; 0x04
    1e12:	1b 81       	ldd	r17, Y+3	; 0x03
    1e14:	aa 81       	ldd	r26, Y+2	; 0x02
    1e16:	b9 81       	ldd	r27, Y+1	; 0x01
    1e18:	ce 0f       	add	r28, r30
    1e1a:	d1 1d       	adc	r29, r1
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	ed 01       	movw	r28, r26
    1e28:	08 95       	ret

00001e2a <_exit>:
    1e2a:	f8 94       	cli

00001e2c <__stop_program>:
    1e2c:	ff cf       	rjmp	.-2      	; 0x1e2c <__stop_program>
