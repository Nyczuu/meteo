
meteoMN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001c6e  00001d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800162  00800162  00001d64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b7f  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000138f  00000000  00000000  00005ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d51  00000000  00000000  00007076  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000940  00000000  00000000  00008dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c48  00000000  00000000  00009708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024a8  00000000  00000000  0000a350  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	42 c2       	rjmp	.+1156   	; 0x486 <__ctors_end>
       2:	5c c2       	rjmp	.+1208   	; 0x4bc <__bad_interrupt>
       4:	5b c2       	rjmp	.+1206   	; 0x4bc <__bad_interrupt>
       6:	5a c2       	rjmp	.+1204   	; 0x4bc <__bad_interrupt>
       8:	59 c2       	rjmp	.+1202   	; 0x4bc <__bad_interrupt>
       a:	58 c2       	rjmp	.+1200   	; 0x4bc <__bad_interrupt>
       c:	57 c2       	rjmp	.+1198   	; 0x4bc <__bad_interrupt>
       e:	56 c2       	rjmp	.+1196   	; 0x4bc <__bad_interrupt>
      10:	55 c2       	rjmp	.+1194   	; 0x4bc <__bad_interrupt>
      12:	54 c2       	rjmp	.+1192   	; 0x4bc <__bad_interrupt>
      14:	53 c2       	rjmp	.+1190   	; 0x4bc <__bad_interrupt>
      16:	cd c7       	rjmp	.+3994   	; 0xfb2 <__vector_11>
      18:	51 c2       	rjmp	.+1186   	; 0x4bc <__bad_interrupt>
      1a:	50 c2       	rjmp	.+1184   	; 0x4bc <__bad_interrupt>
      1c:	4f c2       	rjmp	.+1182   	; 0x4bc <__bad_interrupt>
      1e:	4e c2       	rjmp	.+1180   	; 0x4bc <__bad_interrupt>
      20:	4d c2       	rjmp	.+1178   	; 0x4bc <__bad_interrupt>
      22:	4c c2       	rjmp	.+1176   	; 0x4bc <__bad_interrupt>
      24:	4b c2       	rjmp	.+1174   	; 0x4bc <__bad_interrupt>
      26:	4a c2       	rjmp	.+1172   	; 0x4bc <__bad_interrupt>
      28:	49 c2       	rjmp	.+1170   	; 0x4bc <__bad_interrupt>
      2a:	48 c2       	rjmp	.+1168   	; 0x4bc <__bad_interrupt>
      2c:	47 c2       	rjmp	.+1166   	; 0x4bc <__bad_interrupt>
      2e:	46 c2       	rjmp	.+1164   	; 0x4bc <__bad_interrupt>
      30:	45 c2       	rjmp	.+1162   	; 0x4bc <__bad_interrupt>
      32:	44 c2       	rjmp	.+1160   	; 0x4bc <__bad_interrupt>
      34:	07 63       	ori	r16, 0x37	; 55
      36:	42 36       	cpi	r20, 0x62	; 98
      38:	b7 9b       	sbis	0x16, 7	; 22
      3a:	d8 a7       	std	Y+40, r29	; 0x28
      3c:	1a 39       	cpi	r17, 0x9A	; 154
      3e:	68 56       	subi	r22, 0x68	; 104
      40:	18 ae       	std	Y+56, r1	; 0x38
      42:	ba ab       	std	Y+50, r27	; 0x32
      44:	55 8c       	ldd	r5, Z+29	; 0x1d
      46:	1d 3c       	cpi	r17, 0xCD	; 205
      48:	b7 cc       	rjmp	.-1682   	; 0xfffff9b8 <__eeprom_end+0xff7ef9b8>
      4a:	57 63       	ori	r21, 0x37	; 55
      4c:	bd 6d       	ori	r27, 0xDD	; 221
      4e:	ed fd       	.word	0xfded	; ????
      50:	75 3e       	cpi	r23, 0xE5	; 229
      52:	f6 17       	cp	r31, r22
      54:	72 31       	cpi	r23, 0x12	; 18
      56:	bf 00       	.word	0x00bf	; ????
      58:	00 00       	nop
      5a:	80 3f       	cpi	r24, 0xF0	; 240
      5c:	08 00       	.word	0x0008	; ????
      5e:	00 00       	nop
      60:	be 92       	st	-X, r11
      62:	24 49       	sbci	r18, 0x94	; 148
      64:	12 3e       	cpi	r17, 0xE2	; 226
      66:	ab aa       	std	Y+51, r10	; 0x33
      68:	aa 2a       	or	r10, r26
      6a:	be cd       	rjmp	.-1156   	; 0xfffffbe8 <__eeprom_end+0xff7efbe8>
      6c:	cc cc       	rjmp	.-1640   	; 0xfffffa06 <__eeprom_end+0xff7efa06>
      6e:	4c 3e       	cpi	r20, 0xEC	; 236
      70:	00 00       	nop
      72:	00 80       	ld	r0, Z
      74:	be ab       	std	Y+54, r27	; 0x36
      76:	aa aa       	std	Y+50, r10	; 0x32
      78:	aa 3e       	cpi	r26, 0xEA	; 234
      7a:	00 00       	nop
      7c:	00 00       	nop
      7e:	bf 00       	.word	0x00bf	; ????
      80:	00 00       	nop
      82:	80 3f       	cpi	r24, 0xF0	; 240
      84:	00 00       	nop
      86:	00 00       	nop
      88:	00 08       	sbc	r0, r0
      8a:	41 78       	andi	r20, 0x81	; 129
      8c:	d3 bb       	out	0x13, r29	; 19
      8e:	43 87       	std	Z+11, r20	; 0x0b
      90:	d1 13       	cpse	r29, r17
      92:	3d 19       	sub	r19, r13
      94:	0e 3c       	cpi	r16, 0xCE	; 206
      96:	c3 bd       	out	0x23, r28	; 35
      98:	42 82       	std	Z+2, r4	; 0x02
      9a:	ad 2b       	or	r26, r29
      9c:	3e 68       	ori	r19, 0x8E	; 142
      9e:	ec 82       	std	Y+4, r14	; 0x04
      a0:	76 be       	out	0x36, r7	; 54
      a2:	d9 8f       	std	Y+25, r29	; 0x19
      a4:	e1 a9       	ldd	r30, Z+49	; 0x31
      a6:	3e 4c       	sbci	r19, 0xCE	; 206
      a8:	80 ef       	ldi	r24, 0xF0	; 240
      aa:	ff be       	out	0x3f, r15	; 63
      ac:	01 c4       	rjmp	.+2050   	; 0x8b0 <ssd1306tx_stringxy+0x5e>
      ae:	ff 7f       	andi	r31, 0xFF	; 255
      b0:	3f 00       	.word	0x003f	; ????
      b2:	00 00       	nop
	...

000000b6 <__trampolines_end>:
      b6:	ae d5       	rcall	.+2908   	; 0xc14 <refresh_screen+0x1c>
      b8:	f0 a8       	ldd	r15, Z+48	; 0x30
      ba:	3f d3       	rcall	.+1662   	; 0x73a <DHT_Read+0xcc>
      bc:	00 40       	sbci	r16, 0x00	; 0
      be:	8d 14       	cp	r8, r13
      c0:	20 00       	.word	0x0020	; ????
      c2:	a1 c8       	rjmp	.-3774   	; 0xfffff206 <__eeprom_end+0xff7ef206>
      c4:	da 12       	cpse	r13, r26
      c6:	81 3f       	cpi	r24, 0xF1	; 241
      c8:	d9 22       	and	r13, r25
      ca:	db 20       	and	r13, r11
      cc:	a4 a6       	std	Z+44, r10	; 0x2c
      ce:	2e af       	std	Y+62, r18	; 0x3e
      d0:	22 00       	.word	0x0022	; ????
      d2:	3f 21       	and	r19, r15
      d4:	00 7f       	andi	r16, 0xF0	; 240

000000d6 <ssd1306xled_font8x16data>:
	...
      e6:	00 00 00 f8 00 00 00 00 00 00 00 33 30 00 00 00     ...........30...
      f6:	00 10 0c 06 10 0c 06 00 00 00 00 00 00 00 00 00     ................
     106:	40 c0 78 40 c0 78 40 00 04 3f 04 04 3f 04 04 00     @.x@.x@..?..?...
     116:	00 70 88 fc 08 30 00 00 00 18 20 ff 21 1e 00 00     .p...0.... .!...
     126:	f0 08 f0 00 e0 18 00 00 00 21 1c 03 1e 21 1e 00     .........!...!..
     136:	00 f0 08 88 70 00 00 00 1e 21 23 24 19 27 21 10     ....p....!#$.'!.
     146:	10 16 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     156:	00 00 00 e0 18 04 02 00 00 00 00 07 18 20 40 00     ............. @.
     166:	00 02 04 18 e0 00 00 00 00 40 20 18 07 00 00 00     .........@ .....
     176:	40 40 80 f0 80 40 40 00 02 02 01 0f 01 02 02 00     @@...@@.........
     186:	00 00 00 f0 00 00 00 00 01 01 01 1f 01 01 01 00     ................
	...
     19e:	80 b0 70 00 00 00 00 00 00 00 00 00 00 00 00 00     ..p.............
     1ae:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
     1be:	00 30 30 00 00 00 00 00 00 00 00 00 80 60 18 04     .00..........`..
     1ce:	00 60 18 06 01 00 00 00 00 e0 10 08 08 10 e0 00     .`..............
     1de:	00 0f 10 20 20 10 0f 00 00 10 10 f8 00 00 00 00     ...  ...........
     1ee:	00 20 20 3f 20 20 00 00 00 70 08 08 08 88 70 00     .  ?  ...p....p.
     1fe:	00 30 28 24 22 21 30 00 00 30 08 88 88 48 30 00     .0($"!0..0...H0.
     20e:	00 18 20 20 20 11 0e 00 00 00 c0 20 10 f8 00 00     ..   ...... ....
     21e:	00 07 04 24 24 3f 24 00 00 f8 08 88 88 08 08 00     ...$$?$.........
     22e:	00 19 21 20 20 11 0e 00 00 e0 10 88 88 18 00 00     ..!  ...........
     23e:	00 0f 11 20 20 11 0e 00 00 38 08 08 c8 38 08 00     ...  ....8...8..
     24e:	00 00 00 3f 00 00 00 00 00 70 88 08 08 88 70 00     ...?.....p....p.
     25e:	00 1c 22 21 21 22 1c 00 00 e0 10 08 08 10 e0 00     .."!!"..........
     26e:	00 00 31 22 22 11 0f 00 00 00 00 c0 c0 00 00 00     ..1""...........
     27e:	00 00 00 30 30 00 00 00 00 00 00 80 00 00 00 00     ...00...........
     28e:	00 00 80 60 00 00 00 00 00 00 80 40 20 10 08 00     ...`.......@ ...
     29e:	00 01 02 04 08 10 20 00 40 40 40 40 40 40 40 00     ...... .@@@@@@@.
     2ae:	04 04 04 04 04 04 04 00 00 08 10 20 40 80 00 00     ........... @...
     2be:	00 20 10 08 04 02 01 00 00 70 48 08 08 08 f0 00     . .......pH.....
     2ce:	00 00 00 30 36 01 00 00 c0 30 c8 28 e8 10 e0 00     ...06....0.(....
     2de:	07 18 27 24 23 14 0b 00 00 00 c0 38 e0 00 00 00     ..'$#......8....
     2ee:	20 3c 23 02 02 27 38 20 08 f8 88 88 88 70 00 00      <#..'8 .....p..
     2fe:	20 3f 20 20 20 11 0e 00 c0 30 08 08 08 08 38 00      ?   ....0....8.
     30e:	07 18 20 20 20 10 08 00 08 f8 08 08 08 10 e0 00     ..   ...........
     31e:	20 3f 20 20 20 10 0f 00 08 f8 88 88 e8 08 10 00      ?   ...........
     32e:	20 3f 20 20 23 20 18 00 08 f8 88 88 e8 08 10 00      ?  # ..........
     33e:	20 3f 20 00 03 00 00 00 c0 30 08 08 08 38 00 00      ? ......0...8..
     34e:	07 18 20 20 22 1e 02 00 08 f8 08 00 00 08 f8 08     ..  "...........
     35e:	20 3f 21 01 01 21 3f 20 00 08 08 f8 08 08 00 00      ?!..!? ........
     36e:	00 20 20 3f 20 20 00 00 00 00 08 08 f8 08 08 00     .  ?  ..........
     37e:	c0 80 80 80 7f 00 00 00 08 f8 88 c0 28 18 08 00     ............(...
     38e:	20 3f 20 01 26 38 20 00 08 f8 08 00 00 00 00 00      ? .&8 .........
     39e:	20 3f 20 20 20 20 30 00 08 f8 f8 00 f8 f8 08 00      ?    0.........
     3ae:	20 3f 00 3f 00 3f 20 00 08 f8 30 c0 00 08 f8 08      ?.?.? ...0.....
     3be:	20 3f 20 00 07 18 3f 00 e0 10 08 08 08 10 e0 00      ? ...?.........
     3ce:	0f 10 20 20 20 10 0f 00 08 f8 08 08 08 08 f0 00     ..   ...........
     3de:	20 3f 21 01 01 01 00 00 e0 10 08 08 08 10 e0 00      ?!.............
     3ee:	0f 18 24 24 38 50 4f 00 08 f8 88 88 88 88 70 00     ..$$8PO.......p.
     3fe:	20 3f 20 00 03 0c 30 20 00 70 88 08 08 08 38 00      ? ...0 .p....8.
     40e:	00 38 20 21 21 22 1c 00 18 08 08 f8 08 08 18 00     .8 !!"..........
     41e:	00 00 20 3f 20 00 00 00 08 f8 08 00 00 08 f8 08     .. ? ...........
     42e:	00 1f 20 20 20 20 1f 00 08 78 88 00 00 c8 38 08     ..    ...x....8.
     43e:	00 00 07 38 0e 01 00 00 f8 08 00 f8 00 08 f8 00     ...8............
     44e:	03 3c 07 00 07 3c 03 00 08 18 68 80 80 68 18 08     .<...<....h..h..
     45e:	20 30 2c 03 03 2c 30 20 08 38 c8 00 c8 38 08 00      0,..,0 .8...8..
     46e:	00 00 20 3f 20 00 00 00 10 08 08 08 c8 38 08 00     .. ? ........8..
     47e:	20 38 26 21 20 20 18 00                              8&!  ..

00000486 <__ctors_end>:
     486:	11 24       	eor	r1, r1
     488:	1f be       	out	0x3f, r1	; 63
     48a:	cf ef       	ldi	r28, 0xFF	; 255
     48c:	d4 e0       	ldi	r29, 0x04	; 4
     48e:	de bf       	out	0x3e, r29	; 62
     490:	cd bf       	out	0x3d, r28	; 61

00000492 <__do_copy_data>:
     492:	11 e0       	ldi	r17, 0x01	; 1
     494:	a0 e0       	ldi	r26, 0x00	; 0
     496:	b1 e0       	ldi	r27, 0x01	; 1
     498:	ee e6       	ldi	r30, 0x6E	; 110
     49a:	fc e1       	ldi	r31, 0x1C	; 28
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__do_copy_data+0x10>
     49e:	05 90       	lpm	r0, Z+
     4a0:	0d 92       	st	X+, r0
     4a2:	a2 36       	cpi	r26, 0x62	; 98
     4a4:	b1 07       	cpc	r27, r17
     4a6:	d9 f7       	brne	.-10     	; 0x49e <__do_copy_data+0xc>

000004a8 <__do_clear_bss>:
     4a8:	21 e0       	ldi	r18, 0x01	; 1
     4aa:	a2 e6       	ldi	r26, 0x62	; 98
     4ac:	b1 e0       	ldi	r27, 0x01	; 1
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <.do_clear_bss_start>

000004b0 <.do_clear_bss_loop>:
     4b0:	1d 92       	st	X+, r1

000004b2 <.do_clear_bss_start>:
     4b2:	ae 37       	cpi	r26, 0x7E	; 126
     4b4:	b2 07       	cpc	r27, r18
     4b6:	e1 f7       	brne	.-8      	; 0x4b0 <.do_clear_bss_loop>
     4b8:	6e d5       	rcall	.+2780   	; 0xf96 <main>
     4ba:	d7 cb       	rjmp	.-2130   	; 0xfffffc6a <__eeprom_end+0xff7efc6a>

000004bc <__bad_interrupt>:
     4bc:	a1 cd       	rjmp	.-1214   	; 0x0 <__vectors>

000004be <DHT_Setup>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4be:	2f ef       	ldi	r18, 0xFF	; 255
     4c0:	83 ed       	ldi	r24, 0xD3	; 211
     4c2:	90 e3       	ldi	r25, 0x30	; 48
     4c4:	21 50       	subi	r18, 0x01	; 1
     4c6:	80 40       	sbci	r24, 0x00	; 0
     4c8:	90 40       	sbci	r25, 0x00	; 0
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <DHT_Setup+0x6>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <DHT_Setup+0x10>
     4ce:	00 00       	nop
//----- Functions -----------------------------//
//Setup sensor.
void DHT_Setup()
{
	_delay_ms(__DHT_Delay_Setup);
	__DHT_STATUS = DHT_Ok;
     4d0:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__DHT_STATUS>
     4d4:	08 95       	ret

000004d6 <DHT_GetStatus>:

//Get sensor status.
enum DHT_Status_t DHT_GetStatus()
{
	return (__DHT_STATUS);
}
     4d6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__DHT_STATUS>
     4da:	08 95       	ret

000004dc <DHT_ReadRaw>:

//Read raw buffer from sensor.
enum DHT_Status_t DHT_ReadRaw(uint8_t Data[4])
{
     4dc:	cf 92       	push	r12
     4de:	df 92       	push	r13
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <DHT_ReadRaw+0xe>
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <DHT_ReadRaw+0x10>
     4ec:	1f 92       	push	r1
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	68 2f       	mov	r22, r24
     4f4:	79 2f       	mov	r23, r25
	uint8_t buffer[5] = {0, 0, 0, 0, 0};
     4f6:	fe 01       	movw	r30, r28
     4f8:	31 96       	adiw	r30, 0x01	; 1
     4fa:	85 e0       	ldi	r24, 0x05	; 5
     4fc:	df 01       	movw	r26, r30
     4fe:	1d 92       	st	X+, r1
     500:	8a 95       	dec	r24
     502:	e9 f7       	brne	.-6      	; 0x4fe <DHT_ReadRaw+0x22>
	uint8_t retries, i;
	int8_t j;
	__DHT_STATUS = DHT_Ok;
     504:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__DHT_STATUS>

	//----- Step 1 - Start communication -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Request data
		DigitalWrite(DHT_Pin, Low);			//DHT_PIN = 0
     508:	5e 98       	cbi	0x0b, 6	; 11
		PinMode(DHT_Pin, Output);			//DHT_PIN = Output
     50a:	56 9a       	sbi	0x0a, 6	; 10
     50c:	8f e3       	ldi	r24, 0x3F	; 63
     50e:	9c e9       	ldi	r25, 0x9C	; 156
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	f1 f7       	brne	.-4      	; 0x510 <__stack+0x11>
     514:	00 c0       	rjmp	.+0      	; 0x516 <__stack+0x17>
     516:	00 00       	nop
		_delay_ms(__DHT_Delay_Read);

		//Setup DHT_PIN as input with pull-up resistor so as to read data
		DigitalWrite(DHT_Pin, High);		//DHT_PIN = 1 (Pull-up resistor)
     518:	5e 9a       	sbi	0x0b, 6	; 11
		PinMode(DHT_Pin, Input);			//DHT_PIN = Input
     51a:	56 98       	cbi	0x0a, 6	; 10

		//Wait for response for 20-40us
		retries = 0;
		while (DigitalRead(DHT_Pin))
     51c:	2f e1       	ldi	r18, 0x1F	; 31
     51e:	0a c0       	rjmp	.+20     	; 0x534 <__stack+0x35>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     520:	95 e0       	ldi	r25, 0x05	; 5
     522:	9a 95       	dec	r25
     524:	f1 f7       	brne	.-4      	; 0x522 <__stack+0x23>
     526:	00 00       	nop
     528:	21 50       	subi	r18, 0x01	; 1
		{
			_delay_us(2);
			retries += 2;
			if (retries > 60)
     52a:	21 f4       	brne	.+8      	; 0x534 <__stack+0x35>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     52c:	84 e0       	ldi	r24, 0x04	; 4
     52e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__DHT_STATUS>
     532:	8f c0       	rjmp	.+286    	; 0x652 <__stack+0x153>
		DigitalWrite(DHT_Pin, High);		//DHT_PIN = 1 (Pull-up resistor)
		PinMode(DHT_Pin, Input);			//DHT_PIN = Input

		//Wait for response for 20-40us
		retries = 0;
		while (DigitalRead(DHT_Pin))
     534:	4e 99       	sbic	0x09, 6	; 9
     536:	f4 cf       	rjmp	.-24     	; 0x520 <__stack+0x21>
		}
	}
	//----------------------------------------

	//----- Step 2 - Wait for response -----
	if (__DHT_STATUS == DHT_Ok)
     538:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__DHT_STATUS>
     53c:	88 23       	and	r24, r24
     53e:	59 f0       	breq	.+22     	; 0x556 <__stack+0x57>
     540:	88 c0       	rjmp	.+272    	; 0x652 <__stack+0x153>
     542:	a5 e0       	ldi	r26, 0x05	; 5
     544:	aa 95       	dec	r26
     546:	f1 f7       	brne	.-4      	; 0x544 <__stack+0x45>
     548:	00 00       	nop
     54a:	21 50       	subi	r18, 0x01	; 1
		retries = 0;
		while (!DigitalRead(DHT_Pin))
		{
			_delay_us(2);
			retries += 2;
			if (retries > 100)
     54c:	29 f4       	brne	.+10     	; 0x558 <__stack+0x59>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     54e:	84 e0       	ldi	r24, 0x04	; 4
     550:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__DHT_STATUS>
				break;
     554:	0e c0       	rjmp	.+28     	; 0x572 <__stack+0x73>
     556:	23 e3       	ldi	r18, 0x33	; 51
	if (__DHT_STATUS == DHT_Ok)
	{
		//Response sequence began
		//Wait for the first response to finish (low for ~80us)
		retries = 0;
		while (!DigitalRead(DHT_Pin))
     558:	4e 9b       	sbis	0x09, 6	; 9
     55a:	f3 cf       	rjmp	.-26     	; 0x542 <__stack+0x43>
     55c:	0a c0       	rjmp	.+20     	; 0x572 <__stack+0x73>
     55e:	b5 e0       	ldi	r27, 0x05	; 5
     560:	ba 95       	dec	r27
     562:	f1 f7       	brne	.-4      	; 0x560 <__stack+0x61>
     564:	00 00       	nop
     566:	21 50       	subi	r18, 0x01	; 1
		retries = 0;
		while(DigitalRead(DHT_Pin))
		{
			_delay_us(2);
			retries += 2;
			if (retries > 100)
     568:	29 f4       	brne	.+10     	; 0x574 <__stack+0x75>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     56a:	84 e0       	ldi	r24, 0x04	; 4
     56c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__DHT_STATUS>
				break;
     570:	70 c0       	rjmp	.+224    	; 0x652 <__stack+0x153>
     572:	23 e3       	ldi	r18, 0x33	; 51
				break;
			}
		}
		//Wait for the last response to finish (high for ~80us)
		retries = 0;
		while(DigitalRead(DHT_Pin))
     574:	4e 99       	sbic	0x09, 6	; 9
     576:	f3 cf       	rjmp	.-26     	; 0x55e <__stack+0x5f>
		}
	}
	//--------------------------------------

	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
     578:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__DHT_STATUS>
     57c:	88 23       	and	r24, r24
     57e:	09 f4       	brne	.+2      	; 0x582 <__stack+0x83>
     580:	43 c0       	rjmp	.+134    	; 0x608 <__stack+0x109>
     582:	67 c0       	rjmp	.+206    	; 0x652 <__stack+0x153>
     584:	85 e0       	ldi	r24, 0x05	; 5
     586:	8a 95       	dec	r24
     588:	f1 f7       	brne	.-4      	; 0x586 <__stack+0x87>
     58a:	00 00       	nop
     58c:	21 50       	subi	r18, 0x01	; 1
				retries = 0;
				while(!DigitalRead(DHT_Pin))
				{
					_delay_us(2);
					retries += 2;
					if (retries > 70)
     58e:	31 f4       	brne	.+12     	; 0x59c <__stack+0x9d>
					{
						__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     590:	50 93 6a 01 	sts	0x016A, r21	; 0x80016a <__DHT_STATUS>
						j = -1;								//Break inner for-loop
						i = 5;								//Break outer for-loop
     594:	45 e0       	ldi	r20, 0x05	; 5
     596:	34 c0       	rjmp	.+104    	; 0x600 <__stack+0x101>
     598:	42 2f       	mov	r20, r18
     59a:	24 e2       	ldi	r18, 0x24	; 36
		for (i = 0 ; i < 5 ; i++)
			for (j = 7 ; j >= 0 ; j--)
			{
				//There is always a leading low level of 50 us
				retries = 0;
				while(!DigitalRead(DHT_Pin))
     59c:	4e 9b       	sbis	0x09, 6	; 9
     59e:	f2 cf       	rjmp	.-28     	; 0x584 <__stack+0x85>
						i = 5;								//Break outer for-loop
						break;								//Break while loop
					}
				}

				if (__DHT_STATUS == DHT_Ok)
     5a0:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <__DHT_STATUS>
     5a4:	21 11       	cpse	r18, r1
     5a6:	29 c0       	rjmp	.+82     	; 0x5fa <__stack+0xfb>
     5a8:	9d e5       	ldi	r25, 0x5D	; 93
     5aa:	9a 95       	dec	r25
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <__stack+0xab>
     5ae:	00 00       	nop
				{
					//We read data bit || 26-28us means '0' || 70us means '1'
					_delay_us(35);							//Wait for more than 28us
					if (DigitalRead(DHT_Pin))				//If HIGH
     5b0:	4e 9b       	sbis	0x09, 6	; 9
     5b2:	1e c0       	rjmp	.+60     	; 0x5f0 <__stack+0xf1>
						BitSet(buffer[i], j);				//bit = '1'
     5b4:	e1 e0       	ldi	r30, 0x01	; 1
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	ec 0f       	add	r30, r28
     5ba:	fd 1f       	adc	r31, r29
     5bc:	e4 0f       	add	r30, r20
     5be:	f1 1d       	adc	r31, r1
     5c0:	20 81       	ld	r18, Z
     5c2:	d7 01       	movw	r26, r14
     5c4:	c6 01       	movw	r24, r12
     5c6:	03 2e       	mov	r0, r19
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <__stack+0xd3>
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	aa 1f       	adc	r26, r26
     5d0:	bb 1f       	adc	r27, r27
     5d2:	0a 94       	dec	r0
     5d4:	d2 f7       	brpl	.-12     	; 0x5ca <__stack+0xcb>
     5d6:	82 2b       	or	r24, r18
     5d8:	80 83       	st	Z, r24
     5da:	0a c0       	rjmp	.+20     	; 0x5f0 <__stack+0xf1>
     5dc:	a5 e0       	ldi	r26, 0x05	; 5
     5de:	aa 95       	dec	r26
     5e0:	f1 f7       	brne	.-4      	; 0x5de <__stack+0xdf>
     5e2:	00 00       	nop
     5e4:	21 50       	subi	r18, 0x01	; 1
					retries = 0;
					while(DigitalRead(DHT_Pin))
					{
						_delay_us(2);
						retries += 2;
						if (retries > 100)
     5e6:	29 f4       	brne	.+10     	; 0x5f2 <__stack+0xf3>
						{
							__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     5e8:	50 93 6a 01 	sts	0x016A, r21	; 0x80016a <__DHT_STATUS>
							break;
     5ec:	24 2f       	mov	r18, r20
     5ee:	06 c0       	rjmp	.+12     	; 0x5fc <__stack+0xfd>
     5f0:	23 e3       	ldi	r18, 0x33	; 51
					_delay_us(35);							//Wait for more than 28us
					if (DigitalRead(DHT_Pin))				//If HIGH
						BitSet(buffer[i], j);				//bit = '1'

					retries = 0;
					while(DigitalRead(DHT_Pin))
     5f2:	4e 99       	sbic	0x09, 6	; 9
     5f4:	f3 cf       	rjmp	.-26     	; 0x5dc <__stack+0xdd>
     5f6:	24 2f       	mov	r18, r20
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <__stack+0xfd>
     5fa:	24 2f       	mov	r18, r20
	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
			for (j = 7 ; j >= 0 ; j--)
     5fc:	31 50       	subi	r19, 0x01	; 1
     5fe:	62 f6       	brpl	.-104    	; 0x598 <__stack+0x99>

	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
     600:	4f 5f       	subi	r20, 0xFF	; 255
     602:	45 30       	cpi	r20, 0x05	; 5
     604:	38 f0       	brcs	.+14     	; 0x614 <__stack+0x115>
     606:	08 c0       	rjmp	.+16     	; 0x618 <__stack+0x119>
     608:	40 e0       	ldi	r20, 0x00	; 0
				if (__DHT_STATUS == DHT_Ok)
				{
					//We read data bit || 26-28us means '0' || 70us means '1'
					_delay_us(35);							//Wait for more than 28us
					if (DigitalRead(DHT_Pin))				//If HIGH
						BitSet(buffer[i], j);				//bit = '1'
     60a:	c1 2c       	mov	r12, r1
     60c:	d1 2c       	mov	r13, r1
     60e:	76 01       	movw	r14, r12
     610:	c3 94       	inc	r12
					{
						_delay_us(2);
						retries += 2;
						if (retries > 100)
						{
							__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     612:	54 e0       	ldi	r21, 0x04	; 4
     614:	37 e0       	ldi	r19, 0x07	; 7
     616:	c1 cf       	rjmp	.-126    	; 0x59a <__stack+0x9b>
	}
	//--------------------------------------


	//----- Step 4 - Check checksum and return data -----
	if (__DHT_STATUS == DHT_Ok)
     618:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__DHT_STATUS>
     61c:	81 11       	cpse	r24, r1
     61e:	19 c0       	rjmp	.+50     	; 0x652 <__stack+0x153>
	{
		if (((uint8_t)(buffer[0] + buffer[1] + buffer[2] + buffer[3])) != buffer[4])
     620:	99 81       	ldd	r25, Y+1	; 0x01
     622:	8a 81       	ldd	r24, Y+2	; 0x02
     624:	98 0f       	add	r25, r24
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	98 0f       	add	r25, r24
     62a:	8c 81       	ldd	r24, Y+4	; 0x04
     62c:	89 0f       	add	r24, r25
     62e:	9d 81       	ldd	r25, Y+5	; 0x05
     630:	89 17       	cp	r24, r25
     632:	21 f0       	breq	.+8      	; 0x63c <__stack+0x13d>
		{
			__DHT_STATUS = DHT_Error_Checksum;	//Checksum error
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__DHT_STATUS>
     63a:	0b c0       	rjmp	.+22     	; 0x652 <__stack+0x153>
     63c:	de 01       	movw	r26, r28
     63e:	11 96       	adiw	r26, 0x01	; 1
     640:	e6 2f       	mov	r30, r22
     642:	f7 2f       	mov	r31, r23
     644:	ce 01       	movw	r24, r28
     646:	05 96       	adiw	r24, 0x05	; 5
			//data[1] = Humidity		(dec)
			//data[2] = Temperature		(int)
			//data[3] = Temperature		(dec)
			//data[4] = Checksum
			for (i = 0 ; i < 4 ; i++)
				Data[i] = buffer[i];
     648:	2d 91       	ld	r18, X+
     64a:	21 93       	st	Z+, r18
			//data[0] = Humidity		(int)
			//data[1] = Humidity		(dec)
			//data[2] = Temperature		(int)
			//data[3] = Temperature		(dec)
			//data[4] = Checksum
			for (i = 0 ; i < 4 ; i++)
     64c:	a8 17       	cp	r26, r24
     64e:	b9 07       	cpc	r27, r25
     650:	d9 f7       	brne	.-10     	; 0x648 <__stack+0x149>
		}
	}
	//---------------------------------------------------

	return DHT_GetStatus();
}
     652:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__DHT_STATUS>
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	df 90       	pop	r13
     66a:	cf 90       	pop	r12
     66c:	08 95       	ret

0000066e <DHT_Read>:
	return DHT_Read(waste, Humidity);
}

//Read temperature and humidity.
enum DHT_Status_t DHT_Read(float *Temperature, float *Humidity)
{
     66e:	8f 92       	push	r8
     670:	9f 92       	push	r9
     672:	af 92       	push	r10
     674:	bf 92       	push	r11
     676:	cf 92       	push	r12
     678:	df 92       	push	r13
     67a:	ef 92       	push	r14
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	00 d0       	rcall	.+0      	; 0x688 <DHT_Read+0x1a>
     688:	00 d0       	rcall	.+0      	; 0x68a <DHT_Read+0x1c>
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	8c 01       	movw	r16, r24
     690:	7b 01       	movw	r14, r22
	uint8_t data[4] = { 0, 0, 0, 0 };
     692:	19 82       	std	Y+1, r1	; 0x01
     694:	1a 82       	std	Y+2, r1	; 0x02
     696:	1b 82       	std	Y+3, r1	; 0x03
     698:	1c 82       	std	Y+4, r1	; 0x04

	//Read data
	enum DHT_Status_t status =  DHT_ReadRaw(data);
     69a:	ce 01       	movw	r24, r28
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	1e df       	rcall	.-452    	; 0x4dc <DHT_ReadRaw>

	//If read successfully
	if (status == DHT_Ok)
     6a0:	81 11       	cpse	r24, r1
     6a2:	69 c0       	rjmp	.+210    	; 0x776 <DHT_Read+0x108>
	{
		//Calculate values
		*Temperature = ExtractTemperature(data[2], data[3]);
     6a4:	6c 81       	ldd	r22, Y+4	; 0x04
     6a6:	8b 81       	ldd	r24, Y+3	; 0x03

	#if (DHT_Type == DHT11)
		temp = Data2;
	#elif (DHT_Type == DHT22)
		//(Integral<<8 + Decimal) / 10
		temp = (BitCheck(Data2, 7) ? ((((Data2 & 0x7F) << 8) | Data3) / (-10.0)) : (((Data2 << 8) | Data3) / 10.0));
     6a8:	88 23       	and	r24, r24
     6aa:	74 f4       	brge	.+28     	; 0x6c8 <DHT_Read+0x5a>
     6ac:	8f 77       	andi	r24, 0x7F	; 127
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	78 2b       	or	r23, r24
     6b2:	07 2e       	mov	r0, r23
     6b4:	00 0c       	add	r0, r0
     6b6:	88 0b       	sbc	r24, r24
     6b8:	99 0b       	sbc	r25, r25
     6ba:	f6 d7       	rcall	.+4076   	; 0x16a8 <__floatsisf>
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e2       	ldi	r20, 0x20	; 32
     6c2:	51 ec       	ldi	r21, 0xC1	; 193
     6c4:	56 d7       	rcall	.+3756   	; 0x1572 <__divsf3>
     6c6:	0c c0       	rjmp	.+24     	; 0x6e0 <DHT_Read+0x72>
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	78 2b       	or	r23, r24
     6cc:	07 2e       	mov	r0, r23
     6ce:	00 0c       	add	r0, r0
     6d0:	88 0b       	sbc	r24, r24
     6d2:	99 0b       	sbc	r25, r25
     6d4:	e9 d7       	rcall	.+4050   	; 0x16a8 <__floatsisf>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e2       	ldi	r20, 0x20	; 32
     6dc:	51 e4       	ldi	r21, 0x41	; 65
     6de:	49 d7       	rcall	.+3730   	; 0x1572 <__divsf3>

	//If read successfully
	if (status == DHT_Ok)
	{
		//Calculate values
		*Temperature = ExtractTemperature(data[2], data[3]);
     6e0:	f8 01       	movw	r30, r16
     6e2:	60 83       	st	Z, r22
     6e4:	71 83       	std	Z+1, r23	; 0x01
     6e6:	82 83       	std	Z+2, r24	; 0x02
     6e8:	93 83       	std	Z+3, r25	; 0x03

	#if (DHT_Type == DHT11)
		hum = Data0;
	#elif (DHT_Type == DHT22)
		//(Integral<<8 + Decimal) / 10
		hum = ((Data0<<8) | Data1) / 10.0;
     6ea:	69 81       	ldd	r22, Y+1	; 0x01
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	76 2f       	mov	r23, r22
     6f0:	66 27       	eor	r22, r22
     6f2:	8a 81       	ldd	r24, Y+2	; 0x02
     6f4:	68 2b       	or	r22, r24
     6f6:	07 2e       	mov	r0, r23
     6f8:	00 0c       	add	r0, r0
     6fa:	88 0b       	sbc	r24, r24
     6fc:	99 0b       	sbc	r25, r25
     6fe:	d4 d7       	rcall	.+4008   	; 0x16a8 <__floatsisf>
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	40 e2       	ldi	r20, 0x20	; 32
     706:	51 e4       	ldi	r21, 0x41	; 65
     708:	34 d7       	rcall	.+3688   	; 0x1572 <__divsf3>
     70a:	4b 01       	movw	r8, r22
     70c:	5c 01       	movw	r10, r24
	//If read successfully
	if (status == DHT_Ok)
	{
		//Calculate values
		*Temperature = ExtractTemperature(data[2], data[3]);
		*Humidity = ExtractHumidity(data[0], data[1]);
     70e:	f7 01       	movw	r30, r14
     710:	60 83       	st	Z, r22
     712:	71 83       	std	Z+1, r23	; 0x01
     714:	82 83       	std	Z+2, r24	; 0x02
     716:	93 83       	std	Z+3, r25	; 0x03

		//Check values
		if ((*Temperature < __DHT_Temperature_Min) || (*Temperature > __DHT_Temperature_Max))
     718:	f8 01       	movw	r30, r16
     71a:	c0 80       	ld	r12, Z
     71c:	d1 80       	ldd	r13, Z+1	; 0x01
     71e:	e2 80       	ldd	r14, Z+2	; 0x02
     720:	f3 80       	ldd	r15, Z+3	; 0x03
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e2       	ldi	r20, 0x20	; 32
     728:	52 ec       	ldi	r21, 0xC2	; 194
     72a:	c7 01       	movw	r24, r14
     72c:	b6 01       	movw	r22, r12
     72e:	1d d7       	rcall	.+3642   	; 0x156a <__cmpsf2>
     730:	88 23       	and	r24, r24
     732:	4c f0       	brlt	.+18     	; 0x746 <DHT_Read+0xd8>
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 ea       	ldi	r20, 0xA0	; 160
     73a:	52 e4       	ldi	r21, 0x42	; 66
     73c:	c7 01       	movw	r24, r14
     73e:	b6 01       	movw	r22, r12
     740:	63 d8       	rcall	.-3898   	; 0xfffff808 <__eeprom_end+0xff7ef808>
     742:	18 16       	cp	r1, r24
     744:	24 f4       	brge	.+8      	; 0x74e <DHT_Read+0xe0>
			__DHT_STATUS = DHT_Error_Temperature;
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__DHT_STATUS>
     74c:	14 c0       	rjmp	.+40     	; 0x776 <DHT_Read+0x108>
		else if ((*Humidity < __DHT_Humidity_Min) || (*Humidity > __DHT_Humidity_Max))
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	a9 01       	movw	r20, r18
     754:	c5 01       	movw	r24, r10
     756:	b4 01       	movw	r22, r8
     758:	08 d7       	rcall	.+3600   	; 0x156a <__cmpsf2>
     75a:	88 23       	and	r24, r24
     75c:	4c f0       	brlt	.+18     	; 0x770 <DHT_Read+0x102>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	48 ec       	ldi	r20, 0xC8	; 200
     764:	52 e4       	ldi	r21, 0x42	; 66
     766:	c5 01       	movw	r24, r10
     768:	b4 01       	movw	r22, r8
     76a:	4e d8       	rcall	.-3940   	; 0xfffff808 <__eeprom_end+0xff7ef808>
     76c:	18 16       	cp	r1, r24
     76e:	1c f4       	brge	.+6      	; 0x776 <DHT_Read+0x108>
			__DHT_STATUS = DHT_Error_Humidity;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__DHT_STATUS>
	}

	return DHT_GetStatus();
}
     776:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__DHT_STATUS>
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	bf 90       	pop	r11
     794:	af 90       	pop	r10
     796:	9f 90       	pop	r9
     798:	8f 90       	pop	r8
     79a:	08 95       	ret

0000079c <ssd1306_start_command>:

void ssd1306tx_string(char *s) {
	while (*s) {
		ssd1306tx_char(*s++);
	}
}
     79c:	d6 d0       	rcall	.+428    	; 0x94a <I2C_start>
     79e:	88 e7       	ldi	r24, 0x78	; 120
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	e5 d0       	rcall	.+458    	; 0x96e <I2C_write>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	e2 d0       	rcall	.+452    	; 0x96e <I2C_write>
     7aa:	08 95       	ret

000007ac <ssd1306_start_data>:
     7ac:	ce d0       	rcall	.+412    	; 0x94a <I2C_start>
     7ae:	88 e7       	ldi	r24, 0x78	; 120
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	dd d0       	rcall	.+442    	; 0x96e <I2C_write>
     7b4:	80 e4       	ldi	r24, 0x40	; 64
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	da d0       	rcall	.+436    	; 0x96e <I2C_write>
     7ba:	08 95       	ret

000007bc <ssd1306_init>:
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	eb df       	rcall	.-42     	; 0x79c <ssd1306_start_command>
     7c6:	c6 eb       	ldi	r28, 0xB6	; 182
     7c8:	d0 e0       	ldi	r29, 0x00	; 0
     7ca:	06 ed       	ldi	r16, 0xD6	; 214
     7cc:	10 e0       	ldi	r17, 0x00	; 0
     7ce:	fe 01       	movw	r30, r28
     7d0:	84 91       	lpm	r24, Z
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	cc d0       	rcall	.+408    	; 0x96e <I2C_write>
     7d6:	21 96       	adiw	r28, 0x01	; 1
     7d8:	c0 17       	cp	r28, r16
     7da:	d1 07       	cpc	r29, r17
     7dc:	c1 f7       	brne	.-16     	; 0x7ce <ssd1306_init+0x12>
     7de:	be d0       	rcall	.+380    	; 0x95c <I2C_stop>
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	08 95       	ret

000007ea <ssd1306_setpos>:
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	c8 2f       	mov	r28, r24
     7f0:	d6 2f       	mov	r29, r22
     7f2:	d4 df       	rcall	.-88     	; 0x79c <ssd1306_start_command>
     7f4:	d7 70       	andi	r29, 0x07	; 7
     7f6:	8d 2f       	mov	r24, r29
     7f8:	80 6b       	ori	r24, 0xB0	; 176
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	b8 d0       	rcall	.+368    	; 0x96e <I2C_write>
     7fe:	8c 2f       	mov	r24, r28
     800:	8f 70       	andi	r24, 0x0F	; 15
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	b4 d0       	rcall	.+360    	; 0x96e <I2C_write>
     806:	c2 95       	swap	r28
     808:	cf 70       	andi	r28, 0x0F	; 15
     80a:	8c 2f       	mov	r24, r28
     80c:	80 61       	ori	r24, 0x10	; 16
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	ae d0       	rcall	.+348    	; 0x96e <I2C_write>
     812:	a4 d0       	rcall	.+328    	; 0x95c <I2C_stop>
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <ssd1306_stop>:
     81a:	a0 d0       	rcall	.+320    	; 0x95c <I2C_stop>
     81c:	08 95       	ret

0000081e <ssd1306_clear_display>:
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	d0 e0       	ldi	r29, 0x00	; 0
     824:	6d 2f       	mov	r22, r29
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	e0 df       	rcall	.-64     	; 0x7ea <ssd1306_setpos>
     82a:	c0 df       	rcall	.-128    	; 0x7ac <ssd1306_start_data>
     82c:	c0 e8       	ldi	r28, 0x80	; 128
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	9d d0       	rcall	.+314    	; 0x96e <I2C_write>
     834:	c1 50       	subi	r28, 0x01	; 1
     836:	d9 f7       	brne	.-10     	; 0x82e <ssd1306_clear_display+0x10>
     838:	df 5f       	subi	r29, 0xFF	; 255
     83a:	d8 30       	cpi	r29, 0x08	; 8
     83c:	99 f7       	brne	.-26     	; 0x824 <ssd1306_clear_display+0x6>
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <ssd1306tx_init>:
     844:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <ssd1306tx_font_src+0x1>
     848:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <ssd1306tx_font_src>
     84c:	60 93 6b 01 	sts	0x016B, r22	; 0x80016b <ssd1306tx_font_char_base>
     850:	08 95       	ret

00000852 <ssd1306tx_stringxy>:

void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
     852:	8f 92       	push	r8
     854:	9f 92       	push	r9
     856:	af 92       	push	r10
     858:	bf 92       	push	r11
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	6c 01       	movw	r12, r24
     86c:	96 2e       	mov	r9, r22
     86e:	84 2e       	mov	r8, r20
	uint16_t j, k = 0;
	while (s[k] != '\0') {
     870:	f9 01       	movw	r30, r18
     872:	a0 80       	ld	r10, Z
     874:	aa 20       	and	r10, r10
     876:	09 f4       	brne	.+2      	; 0x87a <ssd1306tx_stringxy+0x28>
     878:	44 c0       	rjmp	.+136    	; 0x902 <ssd1306tx_stringxy+0xb0>
     87a:	79 01       	movw	r14, r18
     87c:	ff ef       	ldi	r31, 0xFF	; 255
     87e:	ef 1a       	sub	r14, r31
     880:	ff 0a       	sbc	r15, r31
		j = s[k] * 16 - (32 * 16); // Convert ASCII code to font data index. NOTE: (x*16) already optimized to (x<<4).
     882:	b1 2c       	mov	r11, r1
     884:	80 e2       	ldi	r24, 0x20	; 32
     886:	a8 1a       	sub	r10, r24
     888:	b1 08       	sbc	r11, r1
     88a:	aa 0c       	add	r10, r10
     88c:	bb 1c       	adc	r11, r11
     88e:	aa 0c       	add	r10, r10
     890:	bb 1c       	adc	r11, r11
     892:	aa 0c       	add	r10, r10
     894:	bb 1c       	adc	r11, r11
     896:	aa 0c       	add	r10, r10
     898:	bb 1c       	adc	r11, r11
		if (x > 120) {
     89a:	e8 e7       	ldi	r30, 0x78	; 120
     89c:	e9 15       	cp	r30, r9
     89e:	10 f4       	brcc	.+4      	; 0x8a4 <ssd1306tx_stringxy+0x52>
			x = 0;    // Go to the next line.
			y++;
     8a0:	83 94       	inc	r8
void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
	uint16_t j, k = 0;
	while (s[k] != '\0') {
		j = s[k] * 16 - (32 * 16); // Convert ASCII code to font data index. NOTE: (x*16) already optimized to (x<<4).
		if (x > 120) {
			x = 0;    // Go to the next line.
     8a2:	91 2c       	mov	r9, r1
			y++;
		}
		ssd1306_setpos(x, y);
     8a4:	68 2d       	mov	r22, r8
     8a6:	89 2d       	mov	r24, r9
     8a8:	a0 df       	rcall	.-192    	; 0x7ea <ssd1306_setpos>
		ssd1306_start_data();
     8aa:	80 df       	rcall	.-256    	; 0x7ac <ssd1306_start_data>
     8ac:	86 01       	movw	r16, r12
     8ae:	0a 0d       	add	r16, r10
     8b0:	1b 1d       	adc	r17, r11
     8b2:	e5 01       	movw	r28, r10
     8b4:	28 96       	adiw	r28, 0x08	; 8
     8b6:	cc 0d       	add	r28, r12
     8b8:	dd 1d       	adc	r29, r13
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
     8ba:	f8 01       	movw	r30, r16
     8bc:	84 91       	lpm	r24, Z
	}
	I2C_stop();	// Finish transmission
}

void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	56 d0       	rcall	.+172    	; 0x96e <I2C_write>
     8c2:	0f 5f       	subi	r16, 0xFF	; 255
     8c4:	1f 4f       	sbci	r17, 0xFF	; 255
			x = 0;    // Go to the next line.
			y++;
		}
		ssd1306_setpos(x, y);
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
     8c6:	0c 17       	cp	r16, r28
     8c8:	1d 07       	cpc	r17, r29
     8ca:	b9 f7       	brne	.-18     	; 0x8ba <ssd1306tx_stringxy+0x68>
void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
}

void ssd1306_stop(void) {
	I2C_stop();
     8cc:	47 d0       	rcall	.+142    	; 0x95c <I2C_stop>
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
		}
		ssd1306_stop();
		ssd1306_setpos(x, y + 1);
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	68 0d       	add	r22, r8
     8d2:	89 2d       	mov	r24, r9
     8d4:	8a df       	rcall	.-236    	; 0x7ea <ssd1306_setpos>
		ssd1306_start_data();
     8d6:	6a df       	rcall	.-300    	; 0x7ac <ssd1306_start_data>
     8d8:	85 01       	movw	r16, r10
     8da:	00 5f       	subi	r16, 0xF0	; 240
     8dc:	1f 4f       	sbci	r17, 0xFF	; 255
     8de:	0c 0d       	add	r16, r12
     8e0:	1d 1d       	adc	r17, r13
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i + 8]));
     8e2:	fe 01       	movw	r30, r28
     8e4:	84 91       	lpm	r24, Z
	}
	I2C_stop();	// Finish transmission
}

void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	42 d0       	rcall	.+132    	; 0x96e <I2C_write>
     8ea:	21 96       	adiw	r28, 0x01	; 1
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
		}
		ssd1306_stop();
		ssd1306_setpos(x, y + 1);
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
     8ec:	c0 17       	cp	r28, r16
     8ee:	d1 07       	cpc	r29, r17
     8f0:	c1 f7       	brne	.-16     	; 0x8e2 <ssd1306tx_stringxy+0x90>
void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
}

void ssd1306_stop(void) {
	I2C_stop();
     8f2:	34 d0       	rcall	.+104    	; 0x95c <I2C_stop>
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i + 8]));
		}
		ssd1306_stop();
		x += 8;
     8f4:	f8 e0       	ldi	r31, 0x08	; 8
     8f6:	9f 0e       	add	r9, r31
	}
}

void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
	uint16_t j, k = 0;
	while (s[k] != '\0') {
     8f8:	f7 01       	movw	r30, r14
     8fa:	a1 90       	ld	r10, Z+
     8fc:	7f 01       	movw	r14, r30
     8fe:	a1 10       	cpse	r10, r1
     900:	c0 cf       	rjmp	.-128    	; 0x882 <ssd1306tx_stringxy+0x30>
		}
		ssd1306_stop();
		x += 8;
		k++;
	}
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	bf 90       	pop	r11
     914:	af 90       	pop	r10
     916:	9f 90       	pop	r9
     918:	8f 90       	pop	r8
     91a:	08 95       	ret

0000091c <I2C_Initialize>:
{
	//TWSR |= 0x00; // Set prescaler to 1

	uint8_t bitrate_div;

	bitrate_div = ((F_CPU/1000l)/bitRate_kHz);
     91c:	9c 01       	movw	r18, r24
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	60 e4       	ldi	r22, 0x40	; 64
     924:	7f e1       	ldi	r23, 0x1F	; 31
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	4d d9       	rcall	.-3430   	; 0xfffffbc6 <__eeprom_end+0xff7efbc6>
     92c:	82 2f       	mov	r24, r18
	
	if(bitrate_div >= 16)
     92e:	20 31       	cpi	r18, 0x10	; 16
     930:	48 f0       	brcs	.+18     	; 0x944 <I2C_Initialize+0x28>
	bitrate_div = (bitrate_div-16)/2;
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	20 51       	subi	r18, 0x10	; 16
     936:	31 09       	sbc	r19, r1
     938:	c9 01       	movw	r24, r18
     93a:	99 23       	and	r25, r25
     93c:	0c f4       	brge	.+2      	; 0x940 <I2C_Initialize+0x24>
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	95 95       	asr	r25
     942:	87 95       	ror	r24
	
	TWBR = bitrate_div;
     944:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     948:	08 95       	ret

0000094a <I2C_start>:
}

void I2C_start(void){
	TWCR = (1<<TWINT) | (1<<TWEN) |( 1<<TWSTA);
     94a:	84 ea       	ldi	r24, 0xA4	; 164
     94c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWINT)));
     950:	ec eb       	ldi	r30, 0xBC	; 188
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	88 23       	and	r24, r24
     958:	ec f7       	brge	.-6      	; 0x954 <I2C_start+0xa>
}
     95a:	08 95       	ret

0000095c <I2C_stop>:

void I2C_stop(void){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     95c:	84 e9       	ldi	r24, 0x94	; 148
     95e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWSTO)));
     962:	ec eb       	ldi	r30, 0xBC	; 188
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	80 81       	ld	r24, Z
     968:	84 ff       	sbrs	r24, 4
     96a:	fd cf       	rjmp	.-6      	; 0x966 <I2C_stop+0xa>
}
     96c:	08 95       	ret

0000096e <I2C_write>:

void I2C_write(uint8_t dane){
	TWDR = dane;
     96e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     972:	84 e8       	ldi	r24, 0x84	; 132
     974:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWINT)));
     978:	ec eb       	ldi	r30, 0xBC	; 188
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	88 23       	and	r24, r24
     980:	ec f7       	brge	.-6      	; 0x97c <I2C_write+0xe>
}
     982:	08 95       	ret

00000984 <display_init>:
#include "../External/display.h"
#include "display_extensions.h"

void display_init()
{
	I2C_Initialize(100);
     984:	84 e6       	ldi	r24, 0x64	; 100
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	c9 df       	rcall	.-110    	; 0x91c <I2C_Initialize>
	ssd1306_init();
     98a:	18 df       	rcall	.-464    	; 0x7bc <ssd1306_init>
	ssd1306tx_init(ssd1306xled_font8x16data, ' ');
     98c:	60 e2       	ldi	r22, 0x20	; 32
     98e:	86 ed       	ldi	r24, 0xD6	; 214
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	58 df       	rcall	.-336    	; 0x844 <ssd1306tx_init>
	ssd1306_start_command();
     994:	03 df       	rcall	.-506    	; 0x79c <ssd1306_start_command>
	I2C_write(0xA6);
     996:	86 ea       	ldi	r24, 0xA6	; 166
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	e9 df       	rcall	.-46     	; 0x96e <I2C_write>
	ssd1306_stop();
     99c:	3e df       	rcall	.-388    	; 0x81a <ssd1306_stop>
	ssd1306_clear_display();
     99e:	3f df       	rcall	.-386    	; 0x81e <ssd1306_clear_display>
     9a0:	08 95       	ret

000009a2 <draw_string>:
}

void draw_string(uint8_t xstart, uint8_t ystart, char* str)
{
     9a2:	9a 01       	movw	r18, r20
	ssd1306tx_stringxy(ssd1306xled_font8x16data, xstart, ystart, str);
     9a4:	46 2f       	mov	r20, r22
     9a6:	68 2f       	mov	r22, r24
     9a8:	86 ed       	ldi	r24, 0xD6	; 214
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	52 df       	rcall	.-348    	; 0x852 <ssd1306tx_stringxy>
     9ae:	08 95       	ret

000009b0 <reverse>:
}

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
     9b0:	9b 01       	movw	r18, r22
     9b2:	21 50       	subi	r18, 0x01	; 1
     9b4:	31 09       	sbc	r19, r1
	while (i < j) {
     9b6:	12 16       	cp	r1, r18
     9b8:	13 06       	cpc	r1, r19
     9ba:	84 f4       	brge	.+32     	; 0x9dc <reverse+0x2c>
     9bc:	fc 01       	movw	r30, r24
     9be:	e6 0f       	add	r30, r22
     9c0:	f7 1f       	adc	r31, r23
     9c2:	dc 01       	movw	r26, r24
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
		temp = str[i];
     9c8:	4c 91       	ld	r20, X
		str[i] = str[j];
     9ca:	52 91       	ld	r21, -Z
     9cc:	5d 93       	st	X+, r21
		str[j] = temp;
     9ce:	40 83       	st	Z, r20
		i++;
     9d0:	01 96       	adiw	r24, 0x01	; 1
		j--;
     9d2:	21 50       	subi	r18, 0x01	; 1
     9d4:	31 09       	sbc	r19, r1
}

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
	while (i < j) {
     9d6:	82 17       	cp	r24, r18
     9d8:	93 07       	cpc	r25, r19
     9da:	b4 f3       	brlt	.-20     	; 0x9c8 <reverse+0x18>
     9dc:	08 95       	ret

000009de <intToStr>:
		j--;
	}
}

int intToStr(int x, char str[], int d)
{
     9de:	cf 92       	push	r12
     9e0:	df 92       	push	r13
     9e2:	ef 92       	push	r14
     9e4:	ff 92       	push	r15
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	6b 01       	movw	r12, r22
     9f0:	8a 01       	movw	r16, r20
	int i = 0;
	while (x) {
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	91 f0       	breq	.+36     	; 0xa1a <intToStr+0x3c>
     9f6:	eb 01       	movw	r28, r22
     9f8:	e0 e0       	ldi	r30, 0x00	; 0
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
		str[i++] = (x % 10) + '0';
     9fc:	0f 2e       	mov	r0, r31
     9fe:	fa e0       	ldi	r31, 0x0A	; 10
     a00:	ef 2e       	mov	r14, r31
     a02:	f1 2c       	mov	r15, r1
     a04:	f0 2d       	mov	r31, r0
     a06:	31 96       	adiw	r30, 0x01	; 1
     a08:	b7 01       	movw	r22, r14
     a0a:	ca d8       	rcall	.-3692   	; 0xfffffba0 <__eeprom_end+0xff7efba0>
     a0c:	80 5d       	subi	r24, 0xD0	; 208
     a0e:	89 93       	st	Y+, r24
		x = x / 10;
     a10:	86 2f       	mov	r24, r22
     a12:	97 2f       	mov	r25, r23
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	b9 f7       	brne	.-18     	; 0xa06 <intToStr+0x28>
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <intToStr+0x40>
	}
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
     a1a:	e0 e0       	ldi	r30, 0x00	; 0
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
	while (x) {
		str[i++] = (x % 10) + '0';
		x = x / 10;
	}
	
	while (i < d)
     a1e:	e0 17       	cp	r30, r16
     a20:	f1 07       	cpc	r31, r17
     a22:	5c f4       	brge	.+22     	; 0xa3a <intToStr+0x5c>
     a24:	ec 0d       	add	r30, r12
     a26:	fd 1d       	adc	r31, r13
     a28:	96 01       	movw	r18, r12
     a2a:	20 0f       	add	r18, r16
     a2c:	31 1f       	adc	r19, r17
	str[i++] = '0';
     a2e:	80 e3       	ldi	r24, 0x30	; 48
     a30:	81 93       	st	Z+, r24
	while (x) {
		str[i++] = (x % 10) + '0';
		x = x / 10;
	}
	
	while (i < d)
     a32:	e2 17       	cp	r30, r18
     a34:	f3 07       	cpc	r31, r19
     a36:	e1 f7       	brne	.-8      	; 0xa30 <intToStr+0x52>
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <intToStr+0x5e>
     a3a:	8f 01       	movw	r16, r30
	str[i++] = '0';
	
	reverse(str, i);
     a3c:	b8 01       	movw	r22, r16
     a3e:	c6 01       	movw	r24, r12
     a40:	b7 df       	rcall	.-146    	; 0x9b0 <reverse>
	str[i] = '\0';
     a42:	e6 01       	movw	r28, r12
     a44:	c0 0f       	add	r28, r16
     a46:	d1 1f       	adc	r29, r17
     a48:	18 82       	st	Y, r1
	return i;
}
     a4a:	c8 01       	movw	r24, r16
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	08 95       	ret

00000a5e <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
     a5e:	2f 92       	push	r2
     a60:	3f 92       	push	r3
     a62:	4f 92       	push	r4
     a64:	5f 92       	push	r5
     a66:	6f 92       	push	r6
     a68:	7f 92       	push	r7
     a6a:	8f 92       	push	r8
     a6c:	9f 92       	push	r9
     a6e:	af 92       	push	r10
     a70:	bf 92       	push	r11
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	4b 01       	movw	r8, r22
     a84:	5c 01       	movw	r10, r24
     a86:	8a 01       	movw	r16, r20
     a88:	e9 01       	movw	r28, r18
	int ipart = (int)n;
     a8a:	db d5       	rcall	.+2998   	; 0x1642 <__fixsfsi>
     a8c:	6b 01       	movw	r12, r22
     a8e:	7c 01       	movw	r14, r24
	float fpart = n - (float)ipart;
	int i = intToStr(ipart, res, 0);
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	b8 01       	movw	r22, r16
     a96:	c6 01       	movw	r24, r12
     a98:	a2 df       	rcall	.-188    	; 0x9de <intToStr>
     a9a:	1c 01       	movw	r2, r24
	
	if (afterpoint != 0) {
     a9c:	20 97       	sbiw	r28, 0x00	; 0
     a9e:	61 f1       	breq	.+88     	; 0xaf8 <ftoa+0x9a>
		res[i] = '.';
     aa0:	f8 01       	movw	r30, r16
     aa2:	e8 0f       	add	r30, r24
     aa4:	f9 1f       	adc	r31, r25
     aa6:	8e e2       	ldi	r24, 0x2E	; 46
     aa8:	80 83       	st	Z, r24
		fpart = fpart * pow(10, afterpoint);
     aaa:	be 01       	movw	r22, r28
     aac:	0d 2e       	mov	r0, r29
     aae:	00 0c       	add	r0, r0
     ab0:	88 0b       	sbc	r24, r24
     ab2:	99 0b       	sbc	r25, r25
     ab4:	f9 d5       	rcall	.+3058   	; 0x16a8 <__floatsisf>
     ab6:	9b 01       	movw	r18, r22
     ab8:	ac 01       	movw	r20, r24
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	80 e2       	ldi	r24, 0x20	; 32
     ac0:	91 e4       	ldi	r25, 0x41	; 65
     ac2:	09 d7       	rcall	.+3602   	; 0x18d6 <pow>
     ac4:	2b 01       	movw	r4, r22
     ac6:	3c 01       	movw	r6, r24
}

void ftoa(float n, char* res, int afterpoint)
{
	int ipart = (int)n;
	float fpart = n - (float)ipart;
     ac8:	b6 01       	movw	r22, r12
     aca:	dd 0c       	add	r13, r13
     acc:	88 0b       	sbc	r24, r24
     ace:	99 0b       	sbc	r25, r25
     ad0:	eb d5       	rcall	.+3030   	; 0x16a8 <__floatsisf>
     ad2:	9b 01       	movw	r18, r22
     ad4:	ac 01       	movw	r20, r24
     ad6:	c5 01       	movw	r24, r10
     ad8:	b4 01       	movw	r22, r8
     ada:	e2 d4       	rcall	.+2500   	; 0x14a0 <__subsf3>
	int i = intToStr(ipart, res, 0);
	
	if (afterpoint != 0) {
		res[i] = '.';
		fpart = fpart * pow(10, afterpoint);
		intToStr((int)fpart, res + i + 1, afterpoint);
     adc:	2f ef       	ldi	r18, 0xFF	; 255
     ade:	22 1a       	sub	r2, r18
     ae0:	32 0a       	sbc	r3, r18
     ae2:	02 0d       	add	r16, r2
     ae4:	13 1d       	adc	r17, r3
     ae6:	a3 01       	movw	r20, r6
     ae8:	92 01       	movw	r18, r4
     aea:	92 d6       	rcall	.+3364   	; 0x1810 <__mulsf3>
     aec:	aa d5       	rcall	.+2900   	; 0x1642 <__fixsfsi>
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	ae 01       	movw	r20, r28
     af4:	b8 01       	movw	r22, r16
     af6:	73 df       	rcall	.-282    	; 0x9de <intToStr>
	}
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	bf 90       	pop	r11
     b0a:	af 90       	pop	r10
     b0c:	9f 90       	pop	r9
     b0e:	8f 90       	pop	r8
     b10:	7f 90       	pop	r7
     b12:	6f 90       	pop	r6
     b14:	5f 90       	pop	r5
     b16:	4f 90       	pop	r4
     b18:	3f 90       	pop	r3
     b1a:	2f 90       	pop	r2
     b1c:	08 95       	ret

00000b1e <draw_number>:

void draw_number(uint8_t xstart, uint8_t ystart, uint8_t number)
{
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	00 d0       	rcall	.+0      	; 0xb28 <draw_number+0xa>
     b28:	1f 92       	push	r1
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	18 2f       	mov	r17, r24
     b30:	06 2f       	mov	r16, r22
     b32:	84 2f       	mov	r24, r20
	char number_as_char[3];
	
	if(number < 10)
     b34:	4a 30       	cpi	r20, 0x0A	; 10
     b36:	60 f4       	brcc	.+24     	; 0xb50 <draw_number+0x32>
	{
		intToStr(number, number_as_char, 1);
     b38:	41 e0       	ldi	r20, 0x01	; 1
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	be 01       	movw	r22, r28
     b3e:	6f 5f       	subi	r22, 0xFF	; 255
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	4c df       	rcall	.-360    	; 0x9de <intToStr>
		number_as_char[1] = number_as_char[0];
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	8a 83       	std	Y+2, r24	; 0x02
		number_as_char[0] = '0';
     b4a:	80 e3       	ldi	r24, 0x30	; 48
     b4c:	89 83       	std	Y+1, r24	; 0x01
     b4e:	07 c0       	rjmp	.+14     	; 0xb5e <draw_number+0x40>
	}
	else
	{
		intToStr(number, number_as_char, 2);
     b50:	42 e0       	ldi	r20, 0x02	; 2
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	be 01       	movw	r22, r28
     b56:	6f 5f       	subi	r22, 0xFF	; 255
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	40 df       	rcall	.-384    	; 0x9de <intToStr>
	}

	number_as_char[2] = '\0';
     b5e:	1b 82       	std	Y+3, r1	; 0x03
	
	draw_string(xstart, ystart, number_as_char);
     b60:	ae 01       	movw	r20, r28
     b62:	4f 5f       	subi	r20, 0xFF	; 255
     b64:	5f 4f       	sbci	r21, 0xFF	; 255
     b66:	60 2f       	mov	r22, r16
     b68:	81 2f       	mov	r24, r17
     b6a:	1b df       	rcall	.-458    	; 0x9a2 <draw_string>
}
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	08 95       	ret

00000b7c <draw_clock>:

void draw_clock(uint8_t xstart, uint8_t ystart, uint8_t hours, uint8_t minutes, uint8_t seconds, bool displayHour, bool displayMinute, bool displaySecond)
{
     b7c:	af 92       	push	r10
     b7e:	cf 92       	push	r12
     b80:	ef 92       	push	r14
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	c8 2f       	mov	r28, r24
     b8c:	d6 2f       	mov	r29, r22
     b8e:	12 2f       	mov	r17, r18
	if(displayHour == 1)
     b90:	e1 10       	cpse	r14, r1
	{
		draw_number(xstart,ystart, hours);
     b92:	c5 df       	rcall	.-118    	; 0xb1e <draw_number>
	}
	
	draw_string(xstart +20, ystart, ":");
     b94:	41 e0       	ldi	r20, 0x01	; 1
     b96:	51 e0       	ldi	r21, 0x01	; 1
     b98:	6d 2f       	mov	r22, r29
     b9a:	84 e1       	ldi	r24, 0x14	; 20
     b9c:	8c 0f       	add	r24, r28
     b9e:	01 df       	rcall	.-510    	; 0x9a2 <draw_string>
	
	if(displayMinute == 1)
     ba0:	cc 20       	and	r12, r12
     ba2:	29 f0       	breq	.+10     	; 0xbae <draw_clock+0x32>
	{
		draw_number(xstart + 30, ystart, minutes);
     ba4:	41 2f       	mov	r20, r17
     ba6:	6d 2f       	mov	r22, r29
     ba8:	8e e1       	ldi	r24, 0x1E	; 30
     baa:	8c 0f       	add	r24, r28
     bac:	b8 df       	rcall	.-144    	; 0xb1e <draw_number>
	}
	if(displaySecond == 1)
     bae:	aa 20       	and	r10, r10
     bb0:	59 f0       	breq	.+22     	; 0xbc8 <draw_clock+0x4c>
	{
		draw_string(xstart +50, ystart, ":");
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	51 e0       	ldi	r21, 0x01	; 1
     bb6:	6d 2f       	mov	r22, r29
     bb8:	82 e3       	ldi	r24, 0x32	; 50
     bba:	8c 0f       	add	r24, r28
     bbc:	f2 de       	rcall	.-540    	; 0x9a2 <draw_string>
		draw_number(xstart + 60, ystart,seconds);
     bbe:	40 2f       	mov	r20, r16
     bc0:	6d 2f       	mov	r22, r29
     bc2:	8c e3       	ldi	r24, 0x3C	; 60
     bc4:	8c 0f       	add	r24, r28
     bc6:	ab df       	rcall	.-170    	; 0xb1e <draw_number>
	}
}
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	ef 90       	pop	r14
     bd2:	cf 90       	pop	r12
     bd4:	af 90       	pop	r10
     bd6:	08 95       	ret

00000bd8 <draw_its_time>:

void draw_its_time()
{
	draw_string(2,2,"IT IS TIME");
     bd8:	43 e0       	ldi	r20, 0x03	; 3
     bda:	51 e0       	ldi	r21, 0x01	; 1
     bdc:	62 e0       	ldi	r22, 0x02	; 2
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	e0 de       	rcall	.-576    	; 0x9a2 <draw_string>
	draw_string(2,4,"IT IS TIME");
     be2:	43 e0       	ldi	r20, 0x03	; 3
     be4:	51 e0       	ldi	r21, 0x01	; 1
     be6:	64 e0       	ldi	r22, 0x04	; 4
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	db de       	rcall	.-586    	; 0x9a2 <draw_string>
	draw_string(2,6,"IT IS TIME");
     bec:	43 e0       	ldi	r20, 0x03	; 3
     bee:	51 e0       	ldi	r21, 0x01	; 1
     bf0:	66 e0       	ldi	r22, 0x06	; 6
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	d6 de       	rcall	.-596    	; 0x9a2 <draw_string>
     bf6:	08 95       	ret

00000bf8 <refresh_screen>:
	_delay_ms(200);
}

void refresh_screen()
{
	if(selectedMenu == MENU_CLOCK)
     bf8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     bfc:	8a 30       	cpi	r24, 0x0A	; 10
     bfe:	11 f4       	brne	.+4      	; 0xc04 <refresh_screen+0xc>
	display_clock_view();
     c00:	ef d2       	rcall	.+1502   	; 0x11e0 <display_clock_view>
     c02:	08 95       	ret
	else if (selectedMenu == MENU_CLOCK_SET_HOUR)
     c04:	8b 30       	cpi	r24, 0x0B	; 11
     c06:	11 f4       	brne	.+4      	; 0xc0c <refresh_screen+0x14>
	display_clock_hour_set_view();
     c08:	0a d3       	rcall	.+1556   	; 0x121e <display_clock_hour_set_view>
     c0a:	08 95       	ret
	else if (selectedMenu == MENU_CLOCK_SET_MINUTE)
     c0c:	8c 30       	cpi	r24, 0x0C	; 12
     c0e:	11 f4       	brne	.+4      	; 0xc14 <refresh_screen+0x1c>
	display_clock_minute_set_view();
     c10:	23 d3       	rcall	.+1606   	; 0x1258 <display_clock_minute_set_view>
     c12:	08 95       	ret
	else if (selectedMenu == MENU_TIMER)
     c14:	84 31       	cpi	r24, 0x14	; 20
     c16:	11 f4       	brne	.+4      	; 0xc1c <refresh_screen+0x24>
	display_timer_view();
     c18:	1c d4       	rcall	.+2104   	; 0x1452 <display_timer_view>
     c1a:	08 95       	ret
	else if (selectedMenu == MENU_TIMER_SET_HOUR)
     c1c:	85 31       	cpi	r24, 0x15	; 21
     c1e:	11 f4       	brne	.+4      	; 0xc24 <refresh_screen+0x2c>
	display_timer_hour_set_view();
     c20:	25 d4       	rcall	.+2122   	; 0x146c <display_timer_hour_set_view>
     c22:	08 95       	ret
	else if (selectedMenu == MENU_TIMER_SET_MINUTE)
     c24:	86 31       	cpi	r24, 0x16	; 22
     c26:	11 f4       	brne	.+4      	; 0xc2c <refresh_screen+0x34>
	display_timer_minute_set_view();
     c28:	2e d4       	rcall	.+2140   	; 0x1486 <display_timer_minute_set_view>
     c2a:	08 95       	ret
	else if (selectedMenu == MENU_TEMPEREATURE)
     c2c:	88 32       	cpi	r24, 0x28	; 40
     c2e:	11 f4       	brne	.+4      	; 0xc34 <refresh_screen+0x3c>
	display_temperature_view();
     c30:	30 d3       	rcall	.+1632   	; 0x1292 <display_temperature_view>
     c32:	08 95       	ret
	else if (selectedMenu == MENU_ALARM)
     c34:	8e 31       	cpi	r24, 0x1E	; 30
     c36:	11 f4       	brne	.+4      	; 0xc3c <refresh_screen+0x44>
	display_alarm_view();
     c38:	43 d2       	rcall	.+1158   	; 0x10c0 <display_alarm_view>
     c3a:	08 95       	ret
	else if (selectedMenu == MENU_ALARM_SET_HOUR)
     c3c:	8f 31       	cpi	r24, 0x1F	; 31
     c3e:	11 f4       	brne	.+4      	; 0xc44 <refresh_screen+0x4c>
	display_alarm_hour_set_view();
     c40:	5c d2       	rcall	.+1208   	; 0x10fa <display_alarm_hour_set_view>
     c42:	08 95       	ret
	else if (selectedMenu == MENU_ALARM_SET_MINUTE)
     c44:	80 32       	cpi	r24, 0x20	; 32
     c46:	09 f4       	brne	.+2      	; 0xc4a <refresh_screen+0x52>
	display_alarm_minute_set_view();
     c48:	75 d2       	rcall	.+1258   	; 0x1134 <display_alarm_minute_set_view>
     c4a:	08 95       	ret

00000c4c <clock_set_minute_confirm>:
	temperature_view();
}

void clock_set_minute_confirm()
{
	clock_save();
     c4c:	ac d2       	rcall	.+1368   	; 0x11a6 <clock_save>
	selectedMenu = MENU_CLOCK;
     c4e:	8a e0       	ldi	r24, 0x0A	; 10
     c50:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     c54:	08 95       	ret

00000c56 <timer_view>:
}

void timer_view()
{
	if(timerIsRunning == 0)
     c56:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <timerIsRunning>
     c5a:	81 11       	cpse	r24, r1
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <timer_view+0xa>
	timer_reset();
     c5e:	75 d3       	rcall	.+1770   	; 0x134a <timer_reset>
	
	selectedMenu = MENU_TIMER;
     c60:	84 e1       	ldi	r24, 0x14	; 20
     c62:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     c66:	08 95       	ret

00000c68 <timer_set_hour>:
}

void timer_set_hour()
{
	if(timerIsRunning == 1)
     c68:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <timerIsRunning>
     c6c:	81 11       	cpse	r24, r1
	timer_reset();
     c6e:	6d d3       	rcall	.+1754   	; 0x134a <timer_reset>

	selectedMenu = MENU_TIMER_SET_HOUR;
     c70:	85 e1       	ldi	r24, 0x15	; 21
     c72:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     c76:	08 95       	ret

00000c78 <timer_set_minute_confirm>:
}

void timer_set_minute_confirm()
{
	timer_run();
     c78:	74 d3       	rcall	.+1768   	; 0x1362 <timer_run>
	timer_view();
     c7a:	ed df       	rcall	.-38     	; 0xc56 <timer_view>
     c7c:	08 95       	ret

00000c7e <alarm_view>:
}

void alarm_view()
{
	//if(alarmIsRunning == 0)
	alarm_reset();
     c7e:	be d1       	rcall	.+892    	; 0xffc <alarm_reset>
	
	selectedMenu = MENU_ALARM;
     c80:	8e e1       	ldi	r24, 0x1E	; 30
     c82:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     c86:	08 95       	ret

00000c88 <alarm_set_hour>:
}

void alarm_set_hour()
{
	//if(alarmIsRunning == 1 && alarmIsReady == 1)
	alarm_reset();
     c88:	b9 d1       	rcall	.+882    	; 0xffc <alarm_reset>

	selectedMenu = MENU_ALARM_SET_HOUR;
     c8a:	8f e1       	ldi	r24, 0x1F	; 31
     c8c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     c90:	08 95       	ret

00000c92 <alarm_set_minute_confirm>:
}

void alarm_set_minute_confirm()
{
	alarm_run();
     c92:	c0 d1       	rcall	.+896    	; 0x1014 <alarm_run>
	alarm_view();
     c94:	f4 df       	rcall	.-24     	; 0xc7e <alarm_view>
     c96:	08 95       	ret

00000c98 <switch_menu>:
	display_alarm_minute_set_view();
}

void switch_menu()
{
	if(BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK)
     c98:	33 99       	sbic	0x06, 3	; 6
     c9a:	08 c0       	rjmp	.+16     	; 0xcac <switch_menu+0x14>
     c9c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ca0:	8a 30       	cpi	r24, 0x0A	; 10
     ca2:	21 f4       	brne	.+8      	; 0xcac <switch_menu+0x14>
	selectedMenu = MENU_CLOCK_SET_HOUR;
     ca4:	8b e0       	ldi	r24, 0x0B	; 11
     ca6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     caa:	08 95       	ret

	else if (BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     cac:	33 99       	sbic	0x06, 3	; 6
     cae:	06 c0       	rjmp	.+12     	; 0xcbc <switch_menu+0x24>
     cb0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cb4:	8b 30       	cpi	r24, 0x0B	; 11
     cb6:	11 f4       	brne	.+4      	; 0xcbc <switch_menu+0x24>
	add_hour();
     cb8:	33 d1       	rcall	.+614    	; 0xf20 <add_hour>
     cba:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     cbc:	32 99       	sbic	0x06, 2	; 6
     cbe:	07 c0       	rjmp	.+14     	; 0xcce <switch_menu+0x36>
     cc0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cc4:	8b 30       	cpi	r24, 0x0B	; 11
     cc6:	09 f0       	breq	.+2      	; 0xcca <switch_menu+0x32>
     cc8:	f6 c0       	rjmp	.+492    	; 0xeb6 <switch_menu+0x21e>
	subtract_hour();
     cca:	3c d1       	rcall	.+632    	; 0xf44 <subtract_hour>
     ccc:	08 95       	ret
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     cce:	1a 99       	sbic	0x03, 2	; 3
     cd0:	09 c0       	rjmp	.+18     	; 0xce4 <switch_menu+0x4c>
     cd2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cd6:	8b 30       	cpi	r24, 0x0B	; 11
     cd8:	09 f0       	breq	.+2      	; 0xcdc <switch_menu+0x44>
     cda:	e1 c0       	rjmp	.+450    	; 0xe9e <switch_menu+0x206>
	selectedMenu = MENU_CLOCK_SET_MINUTE;
     cdc:	8c e0       	ldi	r24, 0x0C	; 12
     cde:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     ce2:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     ce4:	19 99       	sbic	0x03, 1	; 3
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <switch_menu+0x60>
     ce8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cec:	8b 30       	cpi	r24, 0x0B	; 11
     cee:	21 f4       	brne	.+8      	; 0xcf8 <switch_menu+0x60>
	selectedMenu = MENU_CLOCK;
     cf0:	8a e0       	ldi	r24, 0x0A	; 10
     cf2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     cf6:	08 95       	ret

	else if (BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     cf8:	33 99       	sbic	0x06, 3	; 6
     cfa:	06 c0       	rjmp	.+12     	; 0xd08 <switch_menu+0x70>
     cfc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d00:	8c 30       	cpi	r24, 0x0C	; 12
     d02:	11 f4       	brne	.+4      	; 0xd08 <switch_menu+0x70>
	add_minute();
     d04:	16 d1       	rcall	.+556    	; 0xf32 <add_minute>
     d06:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     d08:	32 99       	sbic	0x06, 2	; 6
     d0a:	07 c0       	rjmp	.+14     	; 0xd1a <switch_menu+0x82>
     d0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d10:	8c 30       	cpi	r24, 0x0C	; 12
     d12:	09 f0       	breq	.+2      	; 0xd16 <switch_menu+0x7e>
     d14:	d3 c0       	rjmp	.+422    	; 0xebc <switch_menu+0x224>
	subtract_minute();
     d16:	1e d1       	rcall	.+572    	; 0xf54 <subtract_minute>
     d18:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     d1a:	1a 99       	sbic	0x03, 2	; 3
     d1c:	07 c0       	rjmp	.+14     	; 0xd2c <switch_menu+0x94>
     d1e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d22:	8c 30       	cpi	r24, 0x0C	; 12
     d24:	09 f0       	breq	.+2      	; 0xd28 <switch_menu+0x90>
     d26:	bd c0       	rjmp	.+378    	; 0xea2 <switch_menu+0x20a>
	clock_set_minute_confirm();
     d28:	91 df       	rcall	.-222    	; 0xc4c <clock_set_minute_confirm>
     d2a:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     d2c:	19 99       	sbic	0x03, 1	; 3
     d2e:	08 c0       	rjmp	.+16     	; 0xd40 <switch_menu+0xa8>
     d30:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d34:	8c 30       	cpi	r24, 0x0C	; 12
     d36:	21 f4       	brne	.+8      	; 0xd40 <switch_menu+0xa8>
	selectedMenu = MENU_CLOCK_SET_HOUR;
     d38:	8b e0       	ldi	r24, 0x0B	; 11
     d3a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     d3e:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER)
     d40:	32 99       	sbic	0x06, 2	; 6
     d42:	06 c0       	rjmp	.+12     	; 0xd50 <switch_menu+0xb8>
     d44:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d48:	84 31       	cpi	r24, 0x14	; 20
     d4a:	11 f4       	brne	.+4      	; 0xd50 <switch_menu+0xb8>
	timer_set_hour();
     d4c:	8d df       	rcall	.-230    	; 0xc68 <timer_set_hour>
     d4e:	08 95       	ret
	
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     d50:	33 99       	sbic	0x06, 3	; 6
     d52:	06 c0       	rjmp	.+12     	; 0xd60 <switch_menu+0xc8>
     d54:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d58:	85 31       	cpi	r24, 0x15	; 21
     d5a:	11 f4       	brne	.+4      	; 0xd60 <switch_menu+0xc8>
	add_hour();
     d5c:	e1 d0       	rcall	.+450    	; 0xf20 <add_hour>
     d5e:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     d60:	32 99       	sbic	0x06, 2	; 6
     d62:	07 c0       	rjmp	.+14     	; 0xd72 <switch_menu+0xda>
     d64:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d68:	85 31       	cpi	r24, 0x15	; 21
     d6a:	09 f0       	breq	.+2      	; 0xd6e <switch_menu+0xd6>
     d6c:	aa c0       	rjmp	.+340    	; 0xec2 <switch_menu+0x22a>
	subtract_hour();
     d6e:	ea d0       	rcall	.+468    	; 0xf44 <subtract_hour>
     d70:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     d72:	1a 99       	sbic	0x03, 2	; 3
     d74:	09 c0       	rjmp	.+18     	; 0xd88 <switch_menu+0xf0>
     d76:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d7a:	85 31       	cpi	r24, 0x15	; 21
     d7c:	09 f0       	breq	.+2      	; 0xd80 <switch_menu+0xe8>
     d7e:	93 c0       	rjmp	.+294    	; 0xea6 <switch_menu+0x20e>
	selectedMenu = MENU_TIMER_SET_MINUTE;
     d80:	86 e1       	ldi	r24, 0x16	; 22
     d82:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     d86:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     d88:	19 99       	sbic	0x03, 1	; 3
     d8a:	06 c0       	rjmp	.+12     	; 0xd98 <switch_menu+0x100>
     d8c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d90:	85 31       	cpi	r24, 0x15	; 21
     d92:	11 f4       	brne	.+4      	; 0xd98 <switch_menu+0x100>
	timer_view();
     d94:	60 df       	rcall	.-320    	; 0xc56 <timer_view>
     d96:	08 95       	ret

	else if (BUTTON_1_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     d98:	33 99       	sbic	0x06, 3	; 6
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <switch_menu+0x110>
     d9c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     da0:	86 31       	cpi	r24, 0x16	; 22
     da2:	11 f4       	brne	.+4      	; 0xda8 <switch_menu+0x110>
	add_minute();
     da4:	c6 d0       	rcall	.+396    	; 0xf32 <add_minute>
     da6:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     da8:	32 99       	sbic	0x06, 2	; 6
     daa:	07 c0       	rjmp	.+14     	; 0xdba <switch_menu+0x122>
     dac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     db0:	86 31       	cpi	r24, 0x16	; 22
     db2:	09 f0       	breq	.+2      	; 0xdb6 <switch_menu+0x11e>
     db4:	89 c0       	rjmp	.+274    	; 0xec8 <switch_menu+0x230>
	subtract_minute();
     db6:	ce d0       	rcall	.+412    	; 0xf54 <subtract_minute>
     db8:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     dba:	1a 99       	sbic	0x03, 2	; 3
     dbc:	07 c0       	rjmp	.+14     	; 0xdcc <switch_menu+0x134>
     dbe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dc2:	86 31       	cpi	r24, 0x16	; 22
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <switch_menu+0x130>
     dc6:	71 c0       	rjmp	.+226    	; 0xeaa <switch_menu+0x212>
	timer_set_minute_confirm();
     dc8:	57 df       	rcall	.-338    	; 0xc78 <timer_set_minute_confirm>
     dca:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     dcc:	19 99       	sbic	0x03, 1	; 3
     dce:	06 c0       	rjmp	.+12     	; 0xddc <switch_menu+0x144>
     dd0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dd4:	86 31       	cpi	r24, 0x16	; 22
     dd6:	11 f4       	brne	.+4      	; 0xddc <switch_menu+0x144>
	timer_set_hour();
     dd8:	47 df       	rcall	.-370    	; 0xc68 <timer_set_hour>
     dda:	08 95       	ret
	
	else if (BUTTON_3_PRESSED && selectedMenu == MENU_ALARM)
     ddc:	1a 99       	sbic	0x03, 2	; 3
     dde:	06 c0       	rjmp	.+12     	; 0xdec <switch_menu+0x154>
     de0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     de4:	8e 31       	cpi	r24, 0x1E	; 30
     de6:	11 f4       	brne	.+4      	; 0xdec <switch_menu+0x154>
	alarm_set_hour();
     de8:	4f df       	rcall	.-354    	; 0xc88 <alarm_set_hour>
     dea:	08 95       	ret
	
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     dec:	33 99       	sbic	0x06, 3	; 6
     dee:	06 c0       	rjmp	.+12     	; 0xdfc <switch_menu+0x164>
     df0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     df4:	8f 31       	cpi	r24, 0x1F	; 31
     df6:	11 f4       	brne	.+4      	; 0xdfc <switch_menu+0x164>
	add_hour();
     df8:	93 d0       	rcall	.+294    	; 0xf20 <add_hour>
     dfa:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     dfc:	32 99       	sbic	0x06, 2	; 6
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <switch_menu+0x176>
     e00:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e04:	8f 31       	cpi	r24, 0x1F	; 31
     e06:	09 f0       	breq	.+2      	; 0xe0a <switch_menu+0x172>
     e08:	62 c0       	rjmp	.+196    	; 0xece <switch_menu+0x236>
	subtract_hour();
     e0a:	9c d0       	rcall	.+312    	; 0xf44 <subtract_hour>
     e0c:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     e0e:	1a 99       	sbic	0x03, 2	; 3
     e10:	09 c0       	rjmp	.+18     	; 0xe24 <switch_menu+0x18c>
     e12:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e16:	8f 31       	cpi	r24, 0x1F	; 31
     e18:	09 f0       	breq	.+2      	; 0xe1c <switch_menu+0x184>
     e1a:	49 c0       	rjmp	.+146    	; 0xeae <switch_menu+0x216>
	selectedMenu = MENU_ALARM_SET_MINUTE;
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     e22:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     e24:	19 99       	sbic	0x03, 1	; 3
     e26:	06 c0       	rjmp	.+12     	; 0xe34 <switch_menu+0x19c>
     e28:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e2c:	8f 31       	cpi	r24, 0x1F	; 31
     e2e:	11 f4       	brne	.+4      	; 0xe34 <switch_menu+0x19c>
	alarm_view();
     e30:	26 df       	rcall	.-436    	; 0xc7e <alarm_view>
     e32:	08 95       	ret

	else if (BUTTON_1_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     e34:	33 99       	sbic	0x06, 3	; 6
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <switch_menu+0x1ac>
     e38:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e3c:	80 32       	cpi	r24, 0x20	; 32
     e3e:	11 f4       	brne	.+4      	; 0xe44 <switch_menu+0x1ac>
	add_minute();
     e40:	78 d0       	rcall	.+240    	; 0xf32 <add_minute>
     e42:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     e44:	32 99       	sbic	0x06, 2	; 6
     e46:	07 c0       	rjmp	.+14     	; 0xe56 <switch_menu+0x1be>
     e48:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e4c:	80 32       	cpi	r24, 0x20	; 32
     e4e:	09 f0       	breq	.+2      	; 0xe52 <switch_menu+0x1ba>
     e50:	41 c0       	rjmp	.+130    	; 0xed4 <switch_menu+0x23c>
	subtract_minute();
     e52:	80 d0       	rcall	.+256    	; 0xf54 <subtract_minute>
     e54:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     e56:	1a 99       	sbic	0x03, 2	; 3
     e58:	06 c0       	rjmp	.+12     	; 0xe66 <switch_menu+0x1ce>
     e5a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e5e:	80 32       	cpi	r24, 0x20	; 32
     e60:	41 f5       	brne	.+80     	; 0xeb2 <switch_menu+0x21a>
	alarm_set_minute_confirm();
     e62:	17 df       	rcall	.-466    	; 0xc92 <alarm_set_minute_confirm>
     e64:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     e66:	19 99       	sbic	0x03, 1	; 3
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <switch_menu+0x1de>
     e6a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e6e:	80 32       	cpi	r24, 0x20	; 32
     e70:	11 f4       	brne	.+4      	; 0xe76 <switch_menu+0x1de>
	alarm_set_hour();
     e72:	0a df       	rcall	.-492    	; 0xc88 <alarm_set_hour>
     e74:	08 95       	ret
	
	else if(BUTTON_1_PRESSED)
     e76:	33 99       	sbic	0x06, 3	; 6
     e78:	04 c0       	rjmp	.+8      	; 0xe82 <switch_menu+0x1ea>
	selectedMenu = MENU_CLOCK;
     e7a:	8a e0       	ldi	r24, 0x0A	; 10
     e7c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     e80:	08 95       	ret
	
	else if (BUTTON_2_PRESSED)
     e82:	32 99       	sbic	0x06, 2	; 6
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <switch_menu+0x1f2>
	timer_view();
     e86:	e7 de       	rcall	.-562    	; 0xc56 <timer_view>
     e88:	08 95       	ret
	
	else if (BUTTON_3_PRESSED)
     e8a:	1a 99       	sbic	0x03, 2	; 3
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <switch_menu+0x1fa>
	alarm_view();
     e8e:	f7 de       	rcall	.-530    	; 0xc7e <alarm_view>
     e90:	08 95       	ret
	
	else if (BUTTON_4_PRESSED)
     e92:	19 99       	sbic	0x03, 1	; 3
     e94:	22 c0       	rjmp	.+68     	; 0xeda <switch_menu+0x242>
	alarm_view();
}

void temperature_view()
{
	selectedMenu = MENU_TEMPEREATURE;
     e96:	88 e2       	ldi	r24, 0x28	; 40
     e98:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	else if (BUTTON_3_PRESSED)
	alarm_view();
	
	else if (BUTTON_4_PRESSED)
	temperature_view();
}
     e9c:	08 95       	ret
	subtract_hour();
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
	selectedMenu = MENU_CLOCK_SET_MINUTE;
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     e9e:	83 b1       	in	r24, 0x03	; 3
     ea0:	2b cf       	rjmp	.-426    	; 0xcf8 <switch_menu+0x60>
	subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
	clock_set_minute_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     ea2:	83 b1       	in	r24, 0x03	; 3
     ea4:	4d cf       	rjmp	.-358    	; 0xd40 <switch_menu+0xa8>
	subtract_hour();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
	selectedMenu = MENU_TIMER_SET_MINUTE;
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     ea6:	83 b1       	in	r24, 0x03	; 3
     ea8:	77 cf       	rjmp	.-274    	; 0xd98 <switch_menu+0x100>
	subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
	timer_set_minute_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     eaa:	83 b1       	in	r24, 0x03	; 3
     eac:	97 cf       	rjmp	.-210    	; 0xddc <switch_menu+0x144>
	subtract_hour();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
	selectedMenu = MENU_ALARM_SET_MINUTE;
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     eae:	83 b1       	in	r24, 0x03	; 3
     eb0:	c1 cf       	rjmp	.-126    	; 0xe34 <switch_menu+0x19c>
	subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
	alarm_set_minute_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     eb2:	83 b1       	in	r24, 0x03	; 3
     eb4:	e0 cf       	rjmp	.-64     	; 0xe76 <switch_menu+0x1de>
	add_hour();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
	subtract_hour();
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     eb6:	1a 9b       	sbis	0x03, 2	; 3
     eb8:	f2 cf       	rjmp	.-28     	; 0xe9e <switch_menu+0x206>
     eba:	14 cf       	rjmp	.-472    	; 0xce4 <switch_menu+0x4c>
	add_minute();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
	subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     ebc:	1a 9b       	sbis	0x03, 2	; 3
     ebe:	f1 cf       	rjmp	.-30     	; 0xea2 <switch_menu+0x20a>
     ec0:	35 cf       	rjmp	.-406    	; 0xd2c <switch_menu+0x94>
	add_hour();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
	subtract_hour();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     ec2:	1a 9b       	sbis	0x03, 2	; 3
     ec4:	f0 cf       	rjmp	.-32     	; 0xea6 <switch_menu+0x20e>
     ec6:	60 cf       	rjmp	.-320    	; 0xd88 <switch_menu+0xf0>
	add_minute();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
	subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     ec8:	1a 9b       	sbis	0x03, 2	; 3
     eca:	ef cf       	rjmp	.-34     	; 0xeaa <switch_menu+0x212>
     ecc:	7f cf       	rjmp	.-258    	; 0xdcc <switch_menu+0x134>
	add_hour();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
	subtract_hour();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     ece:	1a 9b       	sbis	0x03, 2	; 3
     ed0:	ee cf       	rjmp	.-36     	; 0xeae <switch_menu+0x216>
     ed2:	a8 cf       	rjmp	.-176    	; 0xe24 <switch_menu+0x18c>
	add_minute();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
	subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     ed4:	1a 9b       	sbis	0x03, 2	; 3
     ed6:	ed cf       	rjmp	.-38     	; 0xeb2 <switch_menu+0x21a>
     ed8:	c6 cf       	rjmp	.-116    	; 0xe66 <switch_menu+0x1ce>
     eda:	08 95       	ret

00000edc <on_button_pressed>:
	selectedMenu = MENU_CLOCK;
}

void on_button_pressed()
{
	ssd1306_clear_display();
     edc:	a0 dc       	rcall	.-1728   	; 0x81e <ssd1306_clear_display>
	switch_menu();
     ede:	dc de       	rcall	.-584    	; 0xc98 <switch_menu>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ee0:	2f ef       	ldi	r18, 0xFF	; 255
     ee2:	81 ee       	ldi	r24, 0xE1	; 225
     ee4:	94 e0       	ldi	r25, 0x04	; 4
     ee6:	21 50       	subi	r18, 0x01	; 1
     ee8:	80 40       	sbci	r24, 0x00	; 0
     eea:	90 40       	sbci	r25, 0x00	; 0
     eec:	e1 f7       	brne	.-8      	; 0xee6 <on_button_pressed+0xa>
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <on_button_pressed+0x14>
     ef0:	00 00       	nop
     ef2:	08 95       	ret

00000ef4 <add_safe_hour>:
	selectedMinute = add_number(selectedMinute, MINUTES_IN_HOUR - 1);
}

void add_second()
{
	selectedSecond = add_number(selectedSecond, SECONDS_IN_MINUTE -1);
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	88 31       	cpi	r24, 0x18	; 24
     ef8:	0c f0       	brlt	.+2      	; 0xefc <add_safe_hour+0x8>
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	08 95       	ret

00000efe <add_safe_minute>:
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	8c 33       	cpi	r24, 0x3C	; 60
     f02:	0c f0       	brlt	.+2      	; 0xf06 <add_safe_minute+0x8>
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	08 95       	ret

00000f08 <add_safe_second>:
     f08:	8f 5f       	subi	r24, 0xFF	; 255
     f0a:	8c 33       	cpi	r24, 0x3C	; 60
     f0c:	0c f0       	brlt	.+2      	; 0xf10 <add_safe_second+0x8>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	08 95       	ret

00000f12 <reset>:
     f12:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <selectedHour>
     f16:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <selectedMinute>
     f1a:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <selectedSecond>
     f1e:	08 95       	ret

00000f20 <add_hour>:
     f20:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedHour>
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	88 31       	cpi	r24, 0x18	; 24
     f28:	0c f0       	brlt	.+2      	; 0xf2c <add_hour+0xc>
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <selectedHour>
     f30:	08 95       	ret

00000f32 <add_minute>:
     f32:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <selectedMinute>
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	8c 33       	cpi	r24, 0x3C	; 60
     f3a:	0c f0       	brlt	.+2      	; 0xf3e <add_minute+0xc>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <selectedMinute>
     f42:	08 95       	ret

00000f44 <subtract_hour>:
	return number;
}

uint8_t subtract_number(int8_t number, int8_t max)
{
	number--;
     f44:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedHour>
     f48:	81 50       	subi	r24, 0x01	; 1
	
	if(number < 0)
     f4a:	0a f4       	brpl	.+2      	; 0xf4e <subtract_hour+0xa>
	{
		number = max;
     f4c:	87 e1       	ldi	r24, 0x17	; 23
	selectedSecond = add_number(selectedSecond, SECONDS_IN_MINUTE -1);
}

void subtract_hour()
{
	selectedHour = subtract_number(selectedHour, HOURS_IN_DAY - 1);
     f4e:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <selectedHour>
     f52:	08 95       	ret

00000f54 <subtract_minute>:
	return number;
}

uint8_t subtract_number(int8_t number, int8_t max)
{
	number--;
     f54:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <selectedMinute>
     f58:	81 50       	subi	r24, 0x01	; 1
	
	if(number < 0)
     f5a:	0a f4       	brpl	.+2      	; 0xf5e <subtract_minute+0xa>
	{
		number = max;
     f5c:	8b e3       	ldi	r24, 0x3B	; 59
	selectedHour = subtract_number(selectedHour, HOURS_IN_DAY - 1);
}

void subtract_minute()
{
	selectedMinute = subtract_number(selectedMinute, MINUTES_IN_HOUR - 1);
     f5e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <selectedMinute>
     f62:	08 95       	ret

00000f64 <port_init>:
#define LED1 (1<<PD7)
#define LED2 (1<<PB0)

void port_init()
{
	DDRC &= ~(BUTTON_2 | BUTTON_1);
     f64:	87 b1       	in	r24, 0x07	; 7
     f66:	83 7f       	andi	r24, 0xF3	; 243
     f68:	87 b9       	out	0x07, r24	; 7
	DDRB &= ~(BUTTON_4 | BUTTON_3);
     f6a:	84 b1       	in	r24, 0x04	; 4
     f6c:	89 7f       	andi	r24, 0xF9	; 249
     f6e:	84 b9       	out	0x04, r24	; 4
	DDRB |= LED2;
     f70:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= BUZZER | LED1;
     f72:	8a b1       	in	r24, 0x0a	; 10
     f74:	80 6a       	ori	r24, 0xA0	; 160
     f76:	8a b9       	out	0x0a, r24	; 10
	
	TCCR1B = (1<<CS12) | (1<<WGM12);
     f78:	8c e0       	ldi	r24, 0x0C	; 12
     f7a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	OCR1AH = 0x7A;
     f7e:	8a e7       	ldi	r24, 0x7A	; 122
     f80:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
	OCR1AL = 0x12;
     f84:	82 e1       	ldi	r24, 0x12	; 18
     f86:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 |= (1<<ICIE1) | (1<<OCIE1A);
     f8a:	ef e6       	ldi	r30, 0x6F	; 111
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	82 62       	ori	r24, 0x22	; 34
     f92:	80 83       	st	Z, r24
     f94:	08 95       	ret

00000f96 <main>:
}

int main(void)
{
	sei();
     f96:	78 94       	sei
	port_init();
     f98:	e5 df       	rcall	.-54     	; 0xf64 <port_init>
	display_init();
     f9a:	f4 dc       	rcall	.-1560   	; 0x984 <display_init>
	DHT_Setup();
     f9c:	90 da       	rcall	.-2784   	; 0x4be <DHT_Setup>

	while (1)
	{
		if(BUTTON_PRESSED)
     f9e:	33 9b       	sbis	0x06, 3	; 6
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <main+0x16>
     fa2:	32 9b       	sbis	0x06, 2	; 6
     fa4:	03 c0       	rjmp	.+6      	; 0xfac <main+0x16>
     fa6:	1a 9b       	sbis	0x03, 2	; 3
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <main+0x16>
     faa:	19 9b       	sbis	0x03, 1	; 3
			on_button_pressed();
     fac:	97 df       	rcall	.-210    	; 0xedc <on_button_pressed>
		
		refresh_screen();
     fae:	24 de       	rcall	.-952    	; 0xbf8 <refresh_screen>
	}
     fb0:	f6 cf       	rjmp	.-20     	; 0xf9e <main+0x8>

00000fb2 <__vector_11>:
}

ISR (TIMER1_COMPA_vect)
{
     fb2:	1f 92       	push	r1
     fb4:	0f 92       	push	r0
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31
	clock_trigger();
     fd4:	cc d0       	rcall	.+408    	; 0x116e <clock_trigger>
	timer_trigger();
     fd6:	d7 d1       	rcall	.+942    	; 0x1386 <timer_trigger>
	alarm_trigger();
     fd8:	2f d0       	rcall	.+94     	; 0x1038 <alarm_trigger>
}
     fda:	ff 91       	pop	r31
     fdc:	ef 91       	pop	r30
     fde:	bf 91       	pop	r27
     fe0:	af 91       	pop	r26
     fe2:	9f 91       	pop	r25
     fe4:	8f 91       	pop	r24
     fe6:	7f 91       	pop	r23
     fe8:	6f 91       	pop	r22
     fea:	5f 91       	pop	r21
     fec:	4f 91       	pop	r20
     fee:	3f 91       	pop	r19
     ff0:	2f 91       	pop	r18
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	0f 90       	pop	r0
     ff8:	1f 90       	pop	r1
     ffa:	18 95       	reti

00000ffc <alarm_reset>:
uint8_t alarmExpectedMinute = 0;
uint8_t alarmExpectedSecond = 0;

void alarm_reset()
{
	reset();
     ffc:	8a df       	rcall	.-236    	; 0xf12 <reset>
	
	alarmIsReady = 0;
     ffe:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <alarmIsReady>
	alarmIsRunning = 0;
    1002:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <alarmIsRunning>
	
	alarmExpectedHour = 0;
    1006:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <alarmExpectedHour>
	alarmExpectedMinute = 0;
    100a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <alarmExpectedMinute>
	alarmExpectedSecond = 0;
    100e:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
    1012:	08 95       	ret

00001014 <alarm_run>:
}

void alarm_run()
{
	if(alarmIsRunning == 0)
    1014:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <alarmIsRunning>
    1018:	81 11       	cpse	r24, r1
    101a:	0d c0       	rjmp	.+26     	; 0x1036 <alarm_run+0x22>
	{
		alarmExpectedSecond = 0;
    101c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
		alarmExpectedHour = selectedHour;
    1020:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedHour>
    1024:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <alarmExpectedHour>
		alarmExpectedMinute = selectedMinute;
    1028:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <selectedMinute>
    102c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <alarmExpectedMinute>
		alarmIsRunning = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <alarmIsRunning>
    1036:	08 95       	ret

00001038 <alarm_trigger>:
	}
}

void alarm_trigger()
{
	if(alarmIsRunning == 1 
    1038:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <alarmIsRunning>
    103c:	88 23       	and	r24, r24
    103e:	c9 f0       	breq	.+50     	; 0x1072 <alarm_trigger+0x3a>
	&& alarmIsReady == 0
    1040:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <alarmIsReady>
    1044:	81 11       	cpse	r24, r1
    1046:	15 c0       	rjmp	.+42     	; 0x1072 <alarm_trigger+0x3a>
	&& current_hour == alarmExpectedHour 
    1048:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <current_hour>
    104c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <alarmExpectedHour>
    1050:	98 13       	cpse	r25, r24
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <alarm_trigger+0x3a>
	&& current_minute == alarmExpectedMinute 
    1054:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <current_minute>
    1058:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <alarmExpectedMinute>
    105c:	98 13       	cpse	r25, r24
    105e:	09 c0       	rjmp	.+18     	; 0x1072 <alarm_trigger+0x3a>
	&& current_second == alarmExpectedSecond)
    1060:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <current_second>
    1064:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
    1068:	98 13       	cpse	r25, r24
    106a:	03 c0       	rjmp	.+6      	; 0x1072 <alarm_trigger+0x3a>
	{
		alarmIsReady = 1;	
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <alarmIsReady>
    1072:	08 95       	ret

00001074 <display_alarm>:
	draw_string(0, 0, "TIMER SET M");
	display_alarm(selectedHour,selectedMinute,0,0,1,0);
}

void display_alarm(uint8_t hour, uint8_t minute, uint8_t second, bool displayHour, bool displayMinute, bool displaySeconds)
{
    1074:	af 92       	push	r10
    1076:	cf 92       	push	r12
    1078:	ef 92       	push	r14
    107a:	0f 93       	push	r16
	if(alarmIsRunning == 0)
    107c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <alarmIsRunning>
    1080:	91 11       	cpse	r25, r1
    1082:	0a c0       	rjmp	.+20     	; 0x1098 <display_alarm+0x24>
	{
		draw_clock(0,2, hour, minute,second, displayHour, displayMinute, displaySeconds);
    1084:	ae 2c       	mov	r10, r14
    1086:	c0 2e       	mov	r12, r16
    1088:	e2 2e       	mov	r14, r18
    108a:	04 2f       	mov	r16, r20
    108c:	26 2f       	mov	r18, r22
    108e:	48 2f       	mov	r20, r24
    1090:	62 e0       	ldi	r22, 0x02	; 2
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	73 dd       	rcall	.-1306   	; 0xb7c <draw_clock>
    1096:	0f c0       	rjmp	.+30     	; 0x10b6 <display_alarm+0x42>
	}
	else if(alarmIsRunning == 1 && alarmIsReady == 0)
    1098:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <alarmIsReady>
    109c:	91 11       	cpse	r25, r1
    109e:	0a c0       	rjmp	.+20     	; 0x10b4 <display_alarm+0x40>
	{
		draw_clock(0,2, hour, minute, second, displayHour, displayMinute, displaySeconds);
    10a0:	ae 2c       	mov	r10, r14
    10a2:	c0 2e       	mov	r12, r16
    10a4:	e2 2e       	mov	r14, r18
    10a6:	04 2f       	mov	r16, r20
    10a8:	26 2f       	mov	r18, r22
    10aa:	48 2f       	mov	r20, r24
    10ac:	62 e0       	ldi	r22, 0x02	; 2
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	65 dd       	rcall	.-1334   	; 0xb7c <draw_clock>
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <display_alarm+0x42>
	}
	else
	{
		draw_its_time();
    10b4:	91 dd       	rcall	.-1246   	; 0xbd8 <draw_its_time>
	}
    10b6:	0f 91       	pop	r16
    10b8:	ef 90       	pop	r14
    10ba:	cf 90       	pop	r12
    10bc:	af 90       	pop	r10
    10be:	08 95       	ret

000010c0 <display_alarm_view>:
		alarmIsReady = 1;	
	}
}

void display_alarm_view()
{
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
	draw_string(0, 0, "ALARM");
    10c8:	4e e0       	ldi	r20, 0x0E	; 14
    10ca:	51 e0       	ldi	r21, 0x01	; 1
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	68 dc       	rcall	.-1840   	; 0x9a2 <draw_string>
	display_alarm(alarmExpectedHour,alarmExpectedMinute,0,1,1,0);
    10d2:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <alarmExpectedMinute>
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <alarmExpectedHour>
    10dc:	e1 2c       	mov	r14, r1
    10de:	f1 2c       	mov	r15, r1
    10e0:	01 e0       	ldi	r16, 0x01	; 1
    10e2:	10 e0       	ldi	r17, 0x00	; 0
    10e4:	21 e0       	ldi	r18, 0x01	; 1
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	c2 df       	rcall	.-124    	; 0x1074 <display_alarm>
}
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	08 95       	ret

000010fa <display_alarm_hour_set_view>:

void display_alarm_hour_set_view()
{
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
	draw_string(0, 0, "TIMER SET H");
    1102:	44 e1       	ldi	r20, 0x14	; 20
    1104:	51 e0       	ldi	r21, 0x01	; 1
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	4b dc       	rcall	.-1898   	; 0x9a2 <draw_string>
	display_alarm(selectedHour,selectedMinute,0,1,0,0);
    110c:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <selectedMinute>
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedHour>
    1116:	e1 2c       	mov	r14, r1
    1118:	f1 2c       	mov	r15, r1
    111a:	00 e0       	ldi	r16, 0x00	; 0
    111c:	10 e0       	ldi	r17, 0x00	; 0
    111e:	21 e0       	ldi	r18, 0x01	; 1
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a5 df       	rcall	.-182    	; 0x1074 <display_alarm>
}
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	08 95       	ret

00001134 <display_alarm_minute_set_view>:

void display_alarm_minute_set_view()
{
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
	draw_string(0, 0, "TIMER SET M");
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e0       	ldi	r21, 0x01	; 1
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	2e dc       	rcall	.-1956   	; 0x9a2 <draw_string>
	display_alarm(selectedHour,selectedMinute,0,0,1,0);
    1146:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <selectedMinute>
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedHour>
    1150:	e1 2c       	mov	r14, r1
    1152:	f1 2c       	mov	r15, r1
    1154:	01 e0       	ldi	r16, 0x01	; 1
    1156:	10 e0       	ldi	r17, 0x00	; 0
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	88 df       	rcall	.-240    	; 0x1074 <display_alarm>
}
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	08 95       	ret

0000116e <clock_trigger>:
#include "../Logic/display_extensions.h"
#include "../Logic/time.h"
#include "clock.h"

void clock_trigger()
{
    116e:	cf 93       	push	r28
	uint8_t previous = current_second;
    1170:	c0 91 70 01 	lds	r28, 0x0170	; 0x800170 <current_second>
	current_second = add_safe_second(current_second);
    1174:	8c 2f       	mov	r24, r28
    1176:	c8 de       	rcall	.-624    	; 0xf08 <add_safe_second>
    1178:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <current_second>
	
	if(previous == (SECONDS_IN_MINUTE - 1) && current_second == 0)
    117c:	cb 33       	cpi	r28, 0x3B	; 59
    117e:	89 f4       	brne	.+34     	; 0x11a2 <clock_trigger+0x34>
    1180:	81 11       	cpse	r24, r1
    1182:	08 c0       	rjmp	.+16     	; 0x1194 <clock_trigger+0x26>
	{
		previous = current_minute;
    1184:	c0 91 6e 01 	lds	r28, 0x016E	; 0x80016e <current_minute>
		current_minute = add_safe_minute(current_minute);
    1188:	8c 2f       	mov	r24, r28
    118a:	b9 de       	rcall	.-654    	; 0xefe <add_safe_minute>
    118c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <current_minute>
	}
	
	if(previous == (MINUTES_IN_HOUR - 1) && current_hour == 0)
    1190:	cb 33       	cpi	r28, 0x3B	; 59
    1192:	39 f4       	brne	.+14     	; 0x11a2 <clock_trigger+0x34>
    1194:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <current_hour>
    1198:	81 11       	cpse	r24, r1
    119a:	03 c0       	rjmp	.+6      	; 0x11a2 <clock_trigger+0x34>
	current_hour = add_safe_hour(current_hour);
    119c:	ab de       	rcall	.-682    	; 0xef4 <add_safe_hour>
    119e:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <current_hour>
}
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <clock_save>:

void clock_save()
{
	current_second = 0;
    11a6:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <current_second>
	current_hour = selectedHour;
    11aa:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedHour>
    11ae:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <current_hour>
	current_minute	= selectedMinute;
    11b2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <selectedMinute>
    11b6:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <current_minute>
    11ba:	08 95       	ret

000011bc <display_clock>:
	draw_string(0, 0, "CLOCK SET M");
	display_clock(selectedHour, selectedMinute, 0, 0, 1, 0);
}

void display_clock(uint8_t hour, uint8_t minute, uint8_t second, bool displayHour, bool displayMinute, bool displaySeconds)
{
    11bc:	af 92       	push	r10
    11be:	cf 92       	push	r12
    11c0:	ef 92       	push	r14
    11c2:	0f 93       	push	r16
	draw_clock(0,2, hour, minute, second, displayHour, displayMinute, displaySeconds);
    11c4:	ae 2c       	mov	r10, r14
    11c6:	c0 2e       	mov	r12, r16
    11c8:	e2 2e       	mov	r14, r18
    11ca:	04 2f       	mov	r16, r20
    11cc:	26 2f       	mov	r18, r22
    11ce:	48 2f       	mov	r20, r24
    11d0:	62 e0       	ldi	r22, 0x02	; 2
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	d3 dc       	rcall	.-1626   	; 0xb7c <draw_clock>
    11d6:	0f 91       	pop	r16
    11d8:	ef 90       	pop	r14
    11da:	cf 90       	pop	r12
    11dc:	af 90       	pop	r10
    11de:	08 95       	ret

000011e0 <display_clock_view>:
	current_hour = selectedHour;
	current_minute	= selectedMinute;
}

void display_clock_view()
{
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
	draw_string(0, 0, "CLOCK");
    11e8:	4c e2       	ldi	r20, 0x2C	; 44
    11ea:	51 e0       	ldi	r21, 0x01	; 1
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	d8 db       	rcall	.-2128   	; 0x9a2 <draw_string>
	display_clock(current_hour, current_minute,current_second, 1,1,1);
    11f2:	40 91 70 01 	lds	r20, 0x0170	; 0x800170 <current_second>
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <current_minute>
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <current_hour>
    1202:	ee 24       	eor	r14, r14
    1204:	e3 94       	inc	r14
    1206:	f1 2c       	mov	r15, r1
    1208:	01 e0       	ldi	r16, 0x01	; 1
    120a:	10 e0       	ldi	r17, 0x00	; 0
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	d4 df       	rcall	.-88     	; 0x11bc <display_clock>
}
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	08 95       	ret

0000121e <display_clock_hour_set_view>:

void display_clock_hour_set_view()
{
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
	draw_string(0, 0, "CLOCK SET H");
    1226:	42 e3       	ldi	r20, 0x32	; 50
    1228:	51 e0       	ldi	r21, 0x01	; 1
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	b9 db       	rcall	.-2190   	; 0x9a2 <draw_string>
	display_clock(selectedHour, selectedMinute, 0,1,0,0);
    1230:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <selectedMinute>
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedHour>
    123a:	e1 2c       	mov	r14, r1
    123c:	f1 2c       	mov	r15, r1
    123e:	00 e0       	ldi	r16, 0x00	; 0
    1240:	10 e0       	ldi	r17, 0x00	; 0
    1242:	21 e0       	ldi	r18, 0x01	; 1
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	b7 df       	rcall	.-146    	; 0x11bc <display_clock>
}
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	ff 90       	pop	r15
    1254:	ef 90       	pop	r14
    1256:	08 95       	ret

00001258 <display_clock_minute_set_view>:

void display_clock_minute_set_view()
{
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
	draw_string(0, 0, "CLOCK SET M");
    1260:	4e e3       	ldi	r20, 0x3E	; 62
    1262:	51 e0       	ldi	r21, 0x01	; 1
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	9c db       	rcall	.-2248   	; 0x9a2 <draw_string>
	display_clock(selectedHour, selectedMinute, 0, 0, 1, 0);
    126a:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <selectedMinute>
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedHour>
    1274:	e1 2c       	mov	r14, r1
    1276:	f1 2c       	mov	r15, r1
    1278:	01 e0       	ldi	r16, 0x01	; 1
    127a:	10 e0       	ldi	r17, 0x00	; 0
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	9a df       	rcall	.-204    	; 0x11bc <display_clock>
}
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	08 95       	ret

00001292 <display_temperature_view>:

float temperature[1];
float humidity[1];

void display_temperature_view()
{
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	2a 97       	sbiw	r28, 0x0a	; 10
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
	draw_string(0, 0, "WEATHER");
    12a6:	4a e4       	ldi	r20, 0x4A	; 74
    12a8:	51 e0       	ldi	r21, 0x01	; 1
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	77 db       	rcall	.-2322   	; 0x9a2 <draw_string>
	
	char tempAsChar[5];
	char humAsChar[5];
	
	DHT_Read(temperature, humidity);
    12b4:	6a e7       	ldi	r22, 0x7A	; 122
    12b6:	71 e0       	ldi	r23, 0x01	; 1
    12b8:	86 e7       	ldi	r24, 0x76	; 118
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	d8 d9       	rcall	.-3152   	; 0x66e <DHT_Read>
	
	ftoa(temperature[0],tempAsChar,1);
    12be:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <temperature>
    12c2:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <temperature+0x1>
    12c6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <temperature+0x2>
    12ca:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <temperature+0x3>
    12ce:	21 e0       	ldi	r18, 0x01	; 1
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	ae 01       	movw	r20, r28
    12d4:	4f 5f       	subi	r20, 0xFF	; 255
    12d6:	5f 4f       	sbci	r21, 0xFF	; 255
    12d8:	c2 db       	rcall	.-2172   	; 0xa5e <ftoa>
	ftoa(humidity[0],humAsChar,2);
    12da:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <humidity>
    12de:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <humidity+0x1>
    12e2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <humidity+0x2>
    12e6:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <humidity+0x3>
    12ea:	22 e0       	ldi	r18, 0x02	; 2
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	ae 01       	movw	r20, r28
    12f0:	4a 5f       	subi	r20, 0xFA	; 250
    12f2:	5f 4f       	sbci	r21, 0xFF	; 255
    12f4:	b4 db       	rcall	.-2200   	; 0xa5e <ftoa>
	
	switch (DHT_GetStatus())
    12f6:	ef d8       	rcall	.-3618   	; 0x4d6 <DHT_GetStatus>
    12f8:	81 11       	cpse	r24, r1
    12fa:	1e c0       	rjmp	.+60     	; 0x1338 <display_temperature_view+0xa6>
	{
		case (DHT_Ok):
		draw_string(0, 2, "TEMP");
    12fc:	42 e5       	ldi	r20, 0x52	; 82
    12fe:	51 e0       	ldi	r21, 0x01	; 1
    1300:	62 e0       	ldi	r22, 0x02	; 2
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	4c db       	rcall	.-2408   	; 0x9a2 <draw_string>
		draw_string(50,2,tempAsChar);
    130a:	ae 01       	movw	r20, r28
    130c:	4f 5f       	subi	r20, 0xFF	; 255
    130e:	5f 4f       	sbci	r21, 0xFF	; 255
    1310:	62 e0       	ldi	r22, 0x02	; 2
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	82 e3       	ldi	r24, 0x32	; 50
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	44 db       	rcall	.-2424   	; 0x9a2 <draw_string>
		draw_string(0, 4, "HUM");
    131a:	47 e5       	ldi	r20, 0x57	; 87
    131c:	51 e0       	ldi	r21, 0x01	; 1
    131e:	64 e0       	ldi	r22, 0x04	; 4
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	3d db       	rcall	.-2438   	; 0x9a2 <draw_string>
		draw_string(50,4,humAsChar);
    1328:	ae 01       	movw	r20, r28
    132a:	4a 5f       	subi	r20, 0xFA	; 250
    132c:	5f 4f       	sbci	r21, 0xFF	; 255
    132e:	64 e0       	ldi	r22, 0x04	; 4
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	82 e3       	ldi	r24, 0x32	; 50
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	35 db       	rcall	.-2454   	; 0x9a2 <draw_string>
		break;
	}
}
    1338:	2a 96       	adiw	r28, 0x0a	; 10
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <timer_reset>:
int8_t timerExpectedMinute = 0;
int8_t timerExpectedSecond = 0;

void timer_reset()
{
	reset();
    134a:	e3 dd       	rcall	.-1082   	; 0xf12 <reset>
	
	timerIsReady = 0;
    134c:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <timerIsReady>
	timerIsRunning = 0;
    1350:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <timerIsRunning>
	
	timerExpectedHour = 0;
    1354:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <timerExpectedHour>
	timerExpectedMinute = 0;
    1358:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <timerExpectedMinute>
	timerExpectedSecond = 0;
    135c:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <timerExpectedSecond>
    1360:	08 95       	ret

00001362 <timer_run>:
}

void timer_run()
{
	if(timerIsRunning == 0)
    1362:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <timerIsRunning>
    1366:	81 11       	cpse	r24, r1
    1368:	0d c0       	rjmp	.+26     	; 0x1384 <timer_run+0x22>
	{
		timerExpectedSecond = 0;
    136a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <timerExpectedSecond>
		timerExpectedHour = selectedHour;
    136e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedHour>
    1372:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <timerExpectedHour>
		timerExpectedMinute = selectedMinute;
    1376:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <selectedMinute>
    137a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <timerExpectedMinute>
		timerIsRunning = 1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <timerIsRunning>
    1384:	08 95       	ret

00001386 <timer_trigger>:
	}
}

void timer_trigger()
{	
	if(timerIsReady == 0 && timerIsRunning == 1)
    1386:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <timerIsReady>
    138a:	81 11       	cpse	r24, r1
    138c:	36 c0       	rjmp	.+108    	; 0x13fa <timer_trigger+0x74>
    138e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <timerIsRunning>
    1392:	88 23       	and	r24, r24
    1394:	91 f1       	breq	.+100    	; 0x13fa <timer_trigger+0x74>
	{
		if(timerExpectedSecond == 0 && timerExpectedMinute == 0 && timerExpectedHour == 0)
    1396:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <timerExpectedSecond>
    139a:	81 11       	cpse	r24, r1
    139c:	0c c0       	rjmp	.+24     	; 0x13b6 <timer_trigger+0x30>
    139e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <timerExpectedMinute>
    13a2:	81 11       	cpse	r24, r1
    13a4:	26 c0       	rjmp	.+76     	; 0x13f2 <timer_trigger+0x6c>
    13a6:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <timerExpectedHour>
    13aa:	81 11       	cpse	r24, r1
    13ac:	22 c0       	rjmp	.+68     	; 0x13f2 <timer_trigger+0x6c>
		{
			timerIsReady = 1;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <timerIsReady>
    13b4:	08 95       	ret
		}
		else
		{
			timerExpectedSecond--;
    13b6:	81 50       	subi	r24, 0x01	; 1
    13b8:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <timerExpectedSecond>
			
			if(timerExpectedSecond < 0 && timerExpectedMinute >= 0)
    13bc:	88 23       	and	r24, r24
    13be:	54 f4       	brge	.+20     	; 0x13d4 <timer_trigger+0x4e>
    13c0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <timerExpectedMinute>
    13c4:	88 23       	and	r24, r24
    13c6:	54 f0       	brlt	.+20     	; 0x13dc <timer_trigger+0x56>
			{
				timerExpectedSecond = SECONDS_IN_MINUTE - 1;
    13c8:	9b e3       	ldi	r25, 0x3B	; 59
    13ca:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <timerExpectedSecond>
				timerExpectedMinute--;
    13ce:	81 50       	subi	r24, 0x01	; 1
    13d0:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <timerExpectedMinute>
			}
			
			if(timerExpectedMinute < 0 && timerExpectedHour > 0)
    13d4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <timerExpectedMinute>
    13d8:	88 23       	and	r24, r24
    13da:	7c f4       	brge	.+30     	; 0x13fa <timer_trigger+0x74>
    13dc:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <timerExpectedHour>
    13e0:	18 16       	cp	r1, r24
    13e2:	5c f4       	brge	.+22     	; 0x13fa <timer_trigger+0x74>
			{
				timerExpectedMinute = MINUTES_IN_HOUR - 1;
    13e4:	9b e3       	ldi	r25, 0x3B	; 59
    13e6:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <timerExpectedMinute>
				timerExpectedHour--;
    13ea:	81 50       	subi	r24, 0x01	; 1
    13ec:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <timerExpectedHour>
			}
		}
	}
}
    13f0:	08 95       	ret
		{
			timerIsReady = 1;
		}
		else
		{
			timerExpectedSecond--;
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <timerExpectedSecond>
    13f8:	e3 cf       	rjmp	.-58     	; 0x13c0 <timer_trigger+0x3a>
    13fa:	08 95       	ret

000013fc <display_timer>:
	draw_string(0, 0, "TIMER SET M");
	display_timer(0,1,0);
}

void display_timer(bool displayHour, bool displayMinute, bool displaySecond)
{
    13fc:	af 92       	push	r10
    13fe:	cf 92       	push	r12
    1400:	ef 92       	push	r14
    1402:	0f 93       	push	r16
	if(timerIsRunning == 0)
    1404:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <timerIsRunning>
    1408:	91 11       	cpse	r25, r1
    140a:	0c c0       	rjmp	.+24     	; 0x1424 <display_timer+0x28>
	{
		draw_clock(0,2, selectedHour, selectedMinute,0, displayHour, displayMinute, displaySecond);
    140c:	a4 2e       	mov	r10, r20
    140e:	c6 2e       	mov	r12, r22
    1410:	e8 2e       	mov	r14, r24
    1412:	00 e0       	ldi	r16, 0x00	; 0
    1414:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <selectedMinute>
    1418:	40 91 75 01 	lds	r20, 0x0175	; 0x800175 <selectedHour>
    141c:	62 e0       	ldi	r22, 0x02	; 2
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	ad db       	rcall	.-2214   	; 0xb7c <draw_clock>
    1422:	12 c0       	rjmp	.+36     	; 0x1448 <display_timer+0x4c>
	}
	else if(timerIsRunning == 1 && timerIsReady == 0)
    1424:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <timerIsReady>
    1428:	91 11       	cpse	r25, r1
    142a:	0d c0       	rjmp	.+26     	; 0x1446 <display_timer+0x4a>
	{
		draw_clock(0,2, timerExpectedHour, timerExpectedMinute, timerExpectedSecond, displayHour, displayMinute, displaySecond);
    142c:	a4 2e       	mov	r10, r20
    142e:	c6 2e       	mov	r12, r22
    1430:	e8 2e       	mov	r14, r24
    1432:	00 91 67 01 	lds	r16, 0x0167	; 0x800167 <timerExpectedSecond>
    1436:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <timerExpectedMinute>
    143a:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <timerExpectedHour>
    143e:	62 e0       	ldi	r22, 0x02	; 2
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	9c db       	rcall	.-2248   	; 0xb7c <draw_clock>
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <display_timer+0x4c>
	}
	else
	{
		draw_its_time();
    1446:	c8 db       	rcall	.-2160   	; 0xbd8 <draw_its_time>
	}
}
    1448:	0f 91       	pop	r16
    144a:	ef 90       	pop	r14
    144c:	cf 90       	pop	r12
    144e:	af 90       	pop	r10
    1450:	08 95       	ret

00001452 <display_timer_view>:
	}
}

void display_timer_view()
{
	draw_string(0, 0, "TIMER");
    1452:	4b e5       	ldi	r20, 0x5B	; 91
    1454:	51 e0       	ldi	r21, 0x01	; 1
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	a3 da       	rcall	.-2746   	; 0x9a2 <draw_string>
	display_timer(1,1,1);
    145c:	41 e0       	ldi	r20, 0x01	; 1
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	61 e0       	ldi	r22, 0x01	; 1
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	c9 df       	rcall	.-110    	; 0x13fc <display_timer>
    146a:	08 95       	ret

0000146c <display_timer_hour_set_view>:
}

void display_timer_hour_set_view()
{
	draw_string(0, 0, "TIMER SET H");
    146c:	44 e1       	ldi	r20, 0x14	; 20
    146e:	51 e0       	ldi	r21, 0x01	; 1
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	96 da       	rcall	.-2772   	; 0x9a2 <draw_string>
	display_timer(1,0,0);
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	bc df       	rcall	.-136    	; 0x13fc <display_timer>
    1484:	08 95       	ret

00001486 <display_timer_minute_set_view>:
}

void display_timer_minute_set_view()
{
	draw_string(0, 0, "TIMER SET M");
    1486:	40 e2       	ldi	r20, 0x20	; 32
    1488:	51 e0       	ldi	r21, 0x01	; 1
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	89 da       	rcall	.-2798   	; 0x9a2 <draw_string>
	display_timer(0,1,0);
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	61 e0       	ldi	r22, 0x01	; 1
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	af df       	rcall	.-162    	; 0x13fc <display_timer>
    149e:	08 95       	ret

000014a0 <__subsf3>:
    14a0:	50 58       	subi	r21, 0x80	; 128

000014a2 <__addsf3>:
    14a2:	bb 27       	eor	r27, r27
    14a4:	aa 27       	eor	r26, r26
    14a6:	0e d0       	rcall	.+28     	; 0x14c4 <__addsf3x>
    14a8:	75 c1       	rjmp	.+746    	; 0x1794 <__fp_round>
    14aa:	66 d1       	rcall	.+716    	; 0x1778 <__fp_pscA>
    14ac:	30 f0       	brcs	.+12     	; 0x14ba <__addsf3+0x18>
    14ae:	6b d1       	rcall	.+726    	; 0x1786 <__fp_pscB>
    14b0:	20 f0       	brcs	.+8      	; 0x14ba <__addsf3+0x18>
    14b2:	31 f4       	brne	.+12     	; 0x14c0 <__addsf3+0x1e>
    14b4:	9f 3f       	cpi	r25, 0xFF	; 255
    14b6:	11 f4       	brne	.+4      	; 0x14bc <__addsf3+0x1a>
    14b8:	1e f4       	brtc	.+6      	; 0x14c0 <__addsf3+0x1e>
    14ba:	5b c1       	rjmp	.+694    	; 0x1772 <__fp_nan>
    14bc:	0e f4       	brtc	.+2      	; 0x14c0 <__addsf3+0x1e>
    14be:	e0 95       	com	r30
    14c0:	e7 fb       	bst	r30, 7
    14c2:	51 c1       	rjmp	.+674    	; 0x1766 <__fp_inf>

000014c4 <__addsf3x>:
    14c4:	e9 2f       	mov	r30, r25
    14c6:	77 d1       	rcall	.+750    	; 0x17b6 <__fp_split3>
    14c8:	80 f3       	brcs	.-32     	; 0x14aa <__addsf3+0x8>
    14ca:	ba 17       	cp	r27, r26
    14cc:	62 07       	cpc	r22, r18
    14ce:	73 07       	cpc	r23, r19
    14d0:	84 07       	cpc	r24, r20
    14d2:	95 07       	cpc	r25, r21
    14d4:	18 f0       	brcs	.+6      	; 0x14dc <__addsf3x+0x18>
    14d6:	71 f4       	brne	.+28     	; 0x14f4 <__addsf3x+0x30>
    14d8:	9e f5       	brtc	.+102    	; 0x1540 <__addsf3x+0x7c>
    14da:	8f c1       	rjmp	.+798    	; 0x17fa <__fp_zero>
    14dc:	0e f4       	brtc	.+2      	; 0x14e0 <__addsf3x+0x1c>
    14de:	e0 95       	com	r30
    14e0:	0b 2e       	mov	r0, r27
    14e2:	ba 2f       	mov	r27, r26
    14e4:	a0 2d       	mov	r26, r0
    14e6:	0b 01       	movw	r0, r22
    14e8:	b9 01       	movw	r22, r18
    14ea:	90 01       	movw	r18, r0
    14ec:	0c 01       	movw	r0, r24
    14ee:	ca 01       	movw	r24, r20
    14f0:	a0 01       	movw	r20, r0
    14f2:	11 24       	eor	r1, r1
    14f4:	ff 27       	eor	r31, r31
    14f6:	59 1b       	sub	r21, r25
    14f8:	99 f0       	breq	.+38     	; 0x1520 <__addsf3x+0x5c>
    14fa:	59 3f       	cpi	r21, 0xF9	; 249
    14fc:	50 f4       	brcc	.+20     	; 0x1512 <__addsf3x+0x4e>
    14fe:	50 3e       	cpi	r21, 0xE0	; 224
    1500:	68 f1       	brcs	.+90     	; 0x155c <__addsf3x+0x98>
    1502:	1a 16       	cp	r1, r26
    1504:	f0 40       	sbci	r31, 0x00	; 0
    1506:	a2 2f       	mov	r26, r18
    1508:	23 2f       	mov	r18, r19
    150a:	34 2f       	mov	r19, r20
    150c:	44 27       	eor	r20, r20
    150e:	58 5f       	subi	r21, 0xF8	; 248
    1510:	f3 cf       	rjmp	.-26     	; 0x14f8 <__addsf3x+0x34>
    1512:	46 95       	lsr	r20
    1514:	37 95       	ror	r19
    1516:	27 95       	ror	r18
    1518:	a7 95       	ror	r26
    151a:	f0 40       	sbci	r31, 0x00	; 0
    151c:	53 95       	inc	r21
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__addsf3x+0x4e>
    1520:	7e f4       	brtc	.+30     	; 0x1540 <__addsf3x+0x7c>
    1522:	1f 16       	cp	r1, r31
    1524:	ba 0b       	sbc	r27, r26
    1526:	62 0b       	sbc	r22, r18
    1528:	73 0b       	sbc	r23, r19
    152a:	84 0b       	sbc	r24, r20
    152c:	ba f0       	brmi	.+46     	; 0x155c <__addsf3x+0x98>
    152e:	91 50       	subi	r25, 0x01	; 1
    1530:	a1 f0       	breq	.+40     	; 0x155a <__addsf3x+0x96>
    1532:	ff 0f       	add	r31, r31
    1534:	bb 1f       	adc	r27, r27
    1536:	66 1f       	adc	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	88 1f       	adc	r24, r24
    153c:	c2 f7       	brpl	.-16     	; 0x152e <__addsf3x+0x6a>
    153e:	0e c0       	rjmp	.+28     	; 0x155c <__addsf3x+0x98>
    1540:	ba 0f       	add	r27, r26
    1542:	62 1f       	adc	r22, r18
    1544:	73 1f       	adc	r23, r19
    1546:	84 1f       	adc	r24, r20
    1548:	48 f4       	brcc	.+18     	; 0x155c <__addsf3x+0x98>
    154a:	87 95       	ror	r24
    154c:	77 95       	ror	r23
    154e:	67 95       	ror	r22
    1550:	b7 95       	ror	r27
    1552:	f7 95       	ror	r31
    1554:	9e 3f       	cpi	r25, 0xFE	; 254
    1556:	08 f0       	brcs	.+2      	; 0x155a <__addsf3x+0x96>
    1558:	b3 cf       	rjmp	.-154    	; 0x14c0 <__addsf3+0x1e>
    155a:	93 95       	inc	r25
    155c:	88 0f       	add	r24, r24
    155e:	08 f0       	brcs	.+2      	; 0x1562 <__addsf3x+0x9e>
    1560:	99 27       	eor	r25, r25
    1562:	ee 0f       	add	r30, r30
    1564:	97 95       	ror	r25
    1566:	87 95       	ror	r24
    1568:	08 95       	ret

0000156a <__cmpsf2>:
    156a:	d9 d0       	rcall	.+434    	; 0x171e <__fp_cmp>
    156c:	08 f4       	brcc	.+2      	; 0x1570 <__cmpsf2+0x6>
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	08 95       	ret

00001572 <__divsf3>:
    1572:	0c d0       	rcall	.+24     	; 0x158c <__divsf3x>
    1574:	0f c1       	rjmp	.+542    	; 0x1794 <__fp_round>
    1576:	07 d1       	rcall	.+526    	; 0x1786 <__fp_pscB>
    1578:	40 f0       	brcs	.+16     	; 0x158a <__divsf3+0x18>
    157a:	fe d0       	rcall	.+508    	; 0x1778 <__fp_pscA>
    157c:	30 f0       	brcs	.+12     	; 0x158a <__divsf3+0x18>
    157e:	21 f4       	brne	.+8      	; 0x1588 <__divsf3+0x16>
    1580:	5f 3f       	cpi	r21, 0xFF	; 255
    1582:	19 f0       	breq	.+6      	; 0x158a <__divsf3+0x18>
    1584:	f0 c0       	rjmp	.+480    	; 0x1766 <__fp_inf>
    1586:	51 11       	cpse	r21, r1
    1588:	39 c1       	rjmp	.+626    	; 0x17fc <__fp_szero>
    158a:	f3 c0       	rjmp	.+486    	; 0x1772 <__fp_nan>

0000158c <__divsf3x>:
    158c:	14 d1       	rcall	.+552    	; 0x17b6 <__fp_split3>
    158e:	98 f3       	brcs	.-26     	; 0x1576 <__divsf3+0x4>

00001590 <__divsf3_pse>:
    1590:	99 23       	and	r25, r25
    1592:	c9 f3       	breq	.-14     	; 0x1586 <__divsf3+0x14>
    1594:	55 23       	and	r21, r21
    1596:	b1 f3       	breq	.-20     	; 0x1584 <__divsf3+0x12>
    1598:	95 1b       	sub	r25, r21
    159a:	55 0b       	sbc	r21, r21
    159c:	bb 27       	eor	r27, r27
    159e:	aa 27       	eor	r26, r26
    15a0:	62 17       	cp	r22, r18
    15a2:	73 07       	cpc	r23, r19
    15a4:	84 07       	cpc	r24, r20
    15a6:	38 f0       	brcs	.+14     	; 0x15b6 <__divsf3_pse+0x26>
    15a8:	9f 5f       	subi	r25, 0xFF	; 255
    15aa:	5f 4f       	sbci	r21, 0xFF	; 255
    15ac:	22 0f       	add	r18, r18
    15ae:	33 1f       	adc	r19, r19
    15b0:	44 1f       	adc	r20, r20
    15b2:	aa 1f       	adc	r26, r26
    15b4:	a9 f3       	breq	.-22     	; 0x15a0 <__divsf3_pse+0x10>
    15b6:	33 d0       	rcall	.+102    	; 0x161e <__divsf3_pse+0x8e>
    15b8:	0e 2e       	mov	r0, r30
    15ba:	3a f0       	brmi	.+14     	; 0x15ca <__divsf3_pse+0x3a>
    15bc:	e0 e8       	ldi	r30, 0x80	; 128
    15be:	30 d0       	rcall	.+96     	; 0x1620 <__divsf3_pse+0x90>
    15c0:	91 50       	subi	r25, 0x01	; 1
    15c2:	50 40       	sbci	r21, 0x00	; 0
    15c4:	e6 95       	lsr	r30
    15c6:	00 1c       	adc	r0, r0
    15c8:	ca f7       	brpl	.-14     	; 0x15bc <__divsf3_pse+0x2c>
    15ca:	29 d0       	rcall	.+82     	; 0x161e <__divsf3_pse+0x8e>
    15cc:	fe 2f       	mov	r31, r30
    15ce:	27 d0       	rcall	.+78     	; 0x161e <__divsf3_pse+0x8e>
    15d0:	66 0f       	add	r22, r22
    15d2:	77 1f       	adc	r23, r23
    15d4:	88 1f       	adc	r24, r24
    15d6:	bb 1f       	adc	r27, r27
    15d8:	26 17       	cp	r18, r22
    15da:	37 07       	cpc	r19, r23
    15dc:	48 07       	cpc	r20, r24
    15de:	ab 07       	cpc	r26, r27
    15e0:	b0 e8       	ldi	r27, 0x80	; 128
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <__divsf3_pse+0x56>
    15e4:	bb 0b       	sbc	r27, r27
    15e6:	80 2d       	mov	r24, r0
    15e8:	bf 01       	movw	r22, r30
    15ea:	ff 27       	eor	r31, r31
    15ec:	93 58       	subi	r25, 0x83	; 131
    15ee:	5f 4f       	sbci	r21, 0xFF	; 255
    15f0:	2a f0       	brmi	.+10     	; 0x15fc <__divsf3_pse+0x6c>
    15f2:	9e 3f       	cpi	r25, 0xFE	; 254
    15f4:	51 05       	cpc	r21, r1
    15f6:	68 f0       	brcs	.+26     	; 0x1612 <__divsf3_pse+0x82>
    15f8:	b6 c0       	rjmp	.+364    	; 0x1766 <__fp_inf>
    15fa:	00 c1       	rjmp	.+512    	; 0x17fc <__fp_szero>
    15fc:	5f 3f       	cpi	r21, 0xFF	; 255
    15fe:	ec f3       	brlt	.-6      	; 0x15fa <__divsf3_pse+0x6a>
    1600:	98 3e       	cpi	r25, 0xE8	; 232
    1602:	dc f3       	brlt	.-10     	; 0x15fa <__divsf3_pse+0x6a>
    1604:	86 95       	lsr	r24
    1606:	77 95       	ror	r23
    1608:	67 95       	ror	r22
    160a:	b7 95       	ror	r27
    160c:	f7 95       	ror	r31
    160e:	9f 5f       	subi	r25, 0xFF	; 255
    1610:	c9 f7       	brne	.-14     	; 0x1604 <__divsf3_pse+0x74>
    1612:	88 0f       	add	r24, r24
    1614:	91 1d       	adc	r25, r1
    1616:	96 95       	lsr	r25
    1618:	87 95       	ror	r24
    161a:	97 f9       	bld	r25, 7
    161c:	08 95       	ret
    161e:	e1 e0       	ldi	r30, 0x01	; 1
    1620:	66 0f       	add	r22, r22
    1622:	77 1f       	adc	r23, r23
    1624:	88 1f       	adc	r24, r24
    1626:	bb 1f       	adc	r27, r27
    1628:	62 17       	cp	r22, r18
    162a:	73 07       	cpc	r23, r19
    162c:	84 07       	cpc	r24, r20
    162e:	ba 07       	cpc	r27, r26
    1630:	20 f0       	brcs	.+8      	; 0x163a <__divsf3_pse+0xaa>
    1632:	62 1b       	sub	r22, r18
    1634:	73 0b       	sbc	r23, r19
    1636:	84 0b       	sbc	r24, r20
    1638:	ba 0b       	sbc	r27, r26
    163a:	ee 1f       	adc	r30, r30
    163c:	88 f7       	brcc	.-30     	; 0x1620 <__divsf3_pse+0x90>
    163e:	e0 95       	com	r30
    1640:	08 95       	ret

00001642 <__fixsfsi>:
    1642:	04 d0       	rcall	.+8      	; 0x164c <__fixunssfsi>
    1644:	68 94       	set
    1646:	b1 11       	cpse	r27, r1
    1648:	d9 c0       	rjmp	.+434    	; 0x17fc <__fp_szero>
    164a:	08 95       	ret

0000164c <__fixunssfsi>:
    164c:	bc d0       	rcall	.+376    	; 0x17c6 <__fp_splitA>
    164e:	88 f0       	brcs	.+34     	; 0x1672 <__fixunssfsi+0x26>
    1650:	9f 57       	subi	r25, 0x7F	; 127
    1652:	90 f0       	brcs	.+36     	; 0x1678 <__fixunssfsi+0x2c>
    1654:	b9 2f       	mov	r27, r25
    1656:	99 27       	eor	r25, r25
    1658:	b7 51       	subi	r27, 0x17	; 23
    165a:	a0 f0       	brcs	.+40     	; 0x1684 <__fixunssfsi+0x38>
    165c:	d1 f0       	breq	.+52     	; 0x1692 <__fixunssfsi+0x46>
    165e:	66 0f       	add	r22, r22
    1660:	77 1f       	adc	r23, r23
    1662:	88 1f       	adc	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	1a f0       	brmi	.+6      	; 0x166e <__fixunssfsi+0x22>
    1668:	ba 95       	dec	r27
    166a:	c9 f7       	brne	.-14     	; 0x165e <__fixunssfsi+0x12>
    166c:	12 c0       	rjmp	.+36     	; 0x1692 <__fixunssfsi+0x46>
    166e:	b1 30       	cpi	r27, 0x01	; 1
    1670:	81 f0       	breq	.+32     	; 0x1692 <__fixunssfsi+0x46>
    1672:	c3 d0       	rcall	.+390    	; 0x17fa <__fp_zero>
    1674:	b1 e0       	ldi	r27, 0x01	; 1
    1676:	08 95       	ret
    1678:	c0 c0       	rjmp	.+384    	; 0x17fa <__fp_zero>
    167a:	67 2f       	mov	r22, r23
    167c:	78 2f       	mov	r23, r24
    167e:	88 27       	eor	r24, r24
    1680:	b8 5f       	subi	r27, 0xF8	; 248
    1682:	39 f0       	breq	.+14     	; 0x1692 <__fixunssfsi+0x46>
    1684:	b9 3f       	cpi	r27, 0xF9	; 249
    1686:	cc f3       	brlt	.-14     	; 0x167a <__fixunssfsi+0x2e>
    1688:	86 95       	lsr	r24
    168a:	77 95       	ror	r23
    168c:	67 95       	ror	r22
    168e:	b3 95       	inc	r27
    1690:	d9 f7       	brne	.-10     	; 0x1688 <__fixunssfsi+0x3c>
    1692:	3e f4       	brtc	.+14     	; 0x16a2 <__fixunssfsi+0x56>
    1694:	90 95       	com	r25
    1696:	80 95       	com	r24
    1698:	70 95       	com	r23
    169a:	61 95       	neg	r22
    169c:	7f 4f       	sbci	r23, 0xFF	; 255
    169e:	8f 4f       	sbci	r24, 0xFF	; 255
    16a0:	9f 4f       	sbci	r25, 0xFF	; 255
    16a2:	08 95       	ret

000016a4 <__floatunsisf>:
    16a4:	e8 94       	clt
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <__floatsisf+0x12>

000016a8 <__floatsisf>:
    16a8:	97 fb       	bst	r25, 7
    16aa:	3e f4       	brtc	.+14     	; 0x16ba <__floatsisf+0x12>
    16ac:	90 95       	com	r25
    16ae:	80 95       	com	r24
    16b0:	70 95       	com	r23
    16b2:	61 95       	neg	r22
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	8f 4f       	sbci	r24, 0xFF	; 255
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	99 23       	and	r25, r25
    16bc:	a9 f0       	breq	.+42     	; 0x16e8 <__floatsisf+0x40>
    16be:	f9 2f       	mov	r31, r25
    16c0:	96 e9       	ldi	r25, 0x96	; 150
    16c2:	bb 27       	eor	r27, r27
    16c4:	93 95       	inc	r25
    16c6:	f6 95       	lsr	r31
    16c8:	87 95       	ror	r24
    16ca:	77 95       	ror	r23
    16cc:	67 95       	ror	r22
    16ce:	b7 95       	ror	r27
    16d0:	f1 11       	cpse	r31, r1
    16d2:	f8 cf       	rjmp	.-16     	; 0x16c4 <__floatsisf+0x1c>
    16d4:	fa f4       	brpl	.+62     	; 0x1714 <__floatsisf+0x6c>
    16d6:	bb 0f       	add	r27, r27
    16d8:	11 f4       	brne	.+4      	; 0x16de <__floatsisf+0x36>
    16da:	60 ff       	sbrs	r22, 0
    16dc:	1b c0       	rjmp	.+54     	; 0x1714 <__floatsisf+0x6c>
    16de:	6f 5f       	subi	r22, 0xFF	; 255
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255
    16e2:	8f 4f       	sbci	r24, 0xFF	; 255
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	16 c0       	rjmp	.+44     	; 0x1714 <__floatsisf+0x6c>
    16e8:	88 23       	and	r24, r24
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <__floatsisf+0x48>
    16ec:	96 e9       	ldi	r25, 0x96	; 150
    16ee:	11 c0       	rjmp	.+34     	; 0x1712 <__floatsisf+0x6a>
    16f0:	77 23       	and	r23, r23
    16f2:	21 f0       	breq	.+8      	; 0x16fc <__floatsisf+0x54>
    16f4:	9e e8       	ldi	r25, 0x8E	; 142
    16f6:	87 2f       	mov	r24, r23
    16f8:	76 2f       	mov	r23, r22
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <__floatsisf+0x5e>
    16fc:	66 23       	and	r22, r22
    16fe:	71 f0       	breq	.+28     	; 0x171c <__floatsisf+0x74>
    1700:	96 e8       	ldi	r25, 0x86	; 134
    1702:	86 2f       	mov	r24, r22
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	2a f0       	brmi	.+10     	; 0x1714 <__floatsisf+0x6c>
    170a:	9a 95       	dec	r25
    170c:	66 0f       	add	r22, r22
    170e:	77 1f       	adc	r23, r23
    1710:	88 1f       	adc	r24, r24
    1712:	da f7       	brpl	.-10     	; 0x170a <__floatsisf+0x62>
    1714:	88 0f       	add	r24, r24
    1716:	96 95       	lsr	r25
    1718:	87 95       	ror	r24
    171a:	97 f9       	bld	r25, 7
    171c:	08 95       	ret

0000171e <__fp_cmp>:
    171e:	99 0f       	add	r25, r25
    1720:	00 08       	sbc	r0, r0
    1722:	55 0f       	add	r21, r21
    1724:	aa 0b       	sbc	r26, r26
    1726:	e0 e8       	ldi	r30, 0x80	; 128
    1728:	fe ef       	ldi	r31, 0xFE	; 254
    172a:	16 16       	cp	r1, r22
    172c:	17 06       	cpc	r1, r23
    172e:	e8 07       	cpc	r30, r24
    1730:	f9 07       	cpc	r31, r25
    1732:	c0 f0       	brcs	.+48     	; 0x1764 <__fp_cmp+0x46>
    1734:	12 16       	cp	r1, r18
    1736:	13 06       	cpc	r1, r19
    1738:	e4 07       	cpc	r30, r20
    173a:	f5 07       	cpc	r31, r21
    173c:	98 f0       	brcs	.+38     	; 0x1764 <__fp_cmp+0x46>
    173e:	62 1b       	sub	r22, r18
    1740:	73 0b       	sbc	r23, r19
    1742:	84 0b       	sbc	r24, r20
    1744:	95 0b       	sbc	r25, r21
    1746:	39 f4       	brne	.+14     	; 0x1756 <__fp_cmp+0x38>
    1748:	0a 26       	eor	r0, r26
    174a:	61 f0       	breq	.+24     	; 0x1764 <__fp_cmp+0x46>
    174c:	23 2b       	or	r18, r19
    174e:	24 2b       	or	r18, r20
    1750:	25 2b       	or	r18, r21
    1752:	21 f4       	brne	.+8      	; 0x175c <__fp_cmp+0x3e>
    1754:	08 95       	ret
    1756:	0a 26       	eor	r0, r26
    1758:	09 f4       	brne	.+2      	; 0x175c <__fp_cmp+0x3e>
    175a:	a1 40       	sbci	r26, 0x01	; 1
    175c:	a6 95       	lsr	r26
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	81 1d       	adc	r24, r1
    1762:	81 1d       	adc	r24, r1
    1764:	08 95       	ret

00001766 <__fp_inf>:
    1766:	97 f9       	bld	r25, 7
    1768:	9f 67       	ori	r25, 0x7F	; 127
    176a:	80 e8       	ldi	r24, 0x80	; 128
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	08 95       	ret

00001772 <__fp_nan>:
    1772:	9f ef       	ldi	r25, 0xFF	; 255
    1774:	80 ec       	ldi	r24, 0xC0	; 192
    1776:	08 95       	ret

00001778 <__fp_pscA>:
    1778:	00 24       	eor	r0, r0
    177a:	0a 94       	dec	r0
    177c:	16 16       	cp	r1, r22
    177e:	17 06       	cpc	r1, r23
    1780:	18 06       	cpc	r1, r24
    1782:	09 06       	cpc	r0, r25
    1784:	08 95       	ret

00001786 <__fp_pscB>:
    1786:	00 24       	eor	r0, r0
    1788:	0a 94       	dec	r0
    178a:	12 16       	cp	r1, r18
    178c:	13 06       	cpc	r1, r19
    178e:	14 06       	cpc	r1, r20
    1790:	05 06       	cpc	r0, r21
    1792:	08 95       	ret

00001794 <__fp_round>:
    1794:	09 2e       	mov	r0, r25
    1796:	03 94       	inc	r0
    1798:	00 0c       	add	r0, r0
    179a:	11 f4       	brne	.+4      	; 0x17a0 <__fp_round+0xc>
    179c:	88 23       	and	r24, r24
    179e:	52 f0       	brmi	.+20     	; 0x17b4 <__fp_round+0x20>
    17a0:	bb 0f       	add	r27, r27
    17a2:	40 f4       	brcc	.+16     	; 0x17b4 <__fp_round+0x20>
    17a4:	bf 2b       	or	r27, r31
    17a6:	11 f4       	brne	.+4      	; 0x17ac <__fp_round+0x18>
    17a8:	60 ff       	sbrs	r22, 0
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <__fp_round+0x20>
    17ac:	6f 5f       	subi	r22, 0xFF	; 255
    17ae:	7f 4f       	sbci	r23, 0xFF	; 255
    17b0:	8f 4f       	sbci	r24, 0xFF	; 255
    17b2:	9f 4f       	sbci	r25, 0xFF	; 255
    17b4:	08 95       	ret

000017b6 <__fp_split3>:
    17b6:	57 fd       	sbrc	r21, 7
    17b8:	90 58       	subi	r25, 0x80	; 128
    17ba:	44 0f       	add	r20, r20
    17bc:	55 1f       	adc	r21, r21
    17be:	59 f0       	breq	.+22     	; 0x17d6 <__fp_splitA+0x10>
    17c0:	5f 3f       	cpi	r21, 0xFF	; 255
    17c2:	71 f0       	breq	.+28     	; 0x17e0 <__fp_splitA+0x1a>
    17c4:	47 95       	ror	r20

000017c6 <__fp_splitA>:
    17c6:	88 0f       	add	r24, r24
    17c8:	97 fb       	bst	r25, 7
    17ca:	99 1f       	adc	r25, r25
    17cc:	61 f0       	breq	.+24     	; 0x17e6 <__fp_splitA+0x20>
    17ce:	9f 3f       	cpi	r25, 0xFF	; 255
    17d0:	79 f0       	breq	.+30     	; 0x17f0 <__fp_splitA+0x2a>
    17d2:	87 95       	ror	r24
    17d4:	08 95       	ret
    17d6:	12 16       	cp	r1, r18
    17d8:	13 06       	cpc	r1, r19
    17da:	14 06       	cpc	r1, r20
    17dc:	55 1f       	adc	r21, r21
    17de:	f2 cf       	rjmp	.-28     	; 0x17c4 <__fp_split3+0xe>
    17e0:	46 95       	lsr	r20
    17e2:	f1 df       	rcall	.-30     	; 0x17c6 <__fp_splitA>
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <__fp_splitA+0x30>
    17e6:	16 16       	cp	r1, r22
    17e8:	17 06       	cpc	r1, r23
    17ea:	18 06       	cpc	r1, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	f1 cf       	rjmp	.-30     	; 0x17d2 <__fp_splitA+0xc>
    17f0:	86 95       	lsr	r24
    17f2:	71 05       	cpc	r23, r1
    17f4:	61 05       	cpc	r22, r1
    17f6:	08 94       	sec
    17f8:	08 95       	ret

000017fa <__fp_zero>:
    17fa:	e8 94       	clt

000017fc <__fp_szero>:
    17fc:	bb 27       	eor	r27, r27
    17fe:	66 27       	eor	r22, r22
    1800:	77 27       	eor	r23, r23
    1802:	cb 01       	movw	r24, r22
    1804:	97 f9       	bld	r25, 7
    1806:	08 95       	ret

00001808 <__gesf2>:
    1808:	8a df       	rcall	.-236    	; 0x171e <__fp_cmp>
    180a:	08 f4       	brcc	.+2      	; 0x180e <__gesf2+0x6>
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	08 95       	ret

00001810 <__mulsf3>:
    1810:	0b d0       	rcall	.+22     	; 0x1828 <__mulsf3x>
    1812:	c0 cf       	rjmp	.-128    	; 0x1794 <__fp_round>
    1814:	b1 df       	rcall	.-158    	; 0x1778 <__fp_pscA>
    1816:	28 f0       	brcs	.+10     	; 0x1822 <__mulsf3+0x12>
    1818:	b6 df       	rcall	.-148    	; 0x1786 <__fp_pscB>
    181a:	18 f0       	brcs	.+6      	; 0x1822 <__mulsf3+0x12>
    181c:	95 23       	and	r25, r21
    181e:	09 f0       	breq	.+2      	; 0x1822 <__mulsf3+0x12>
    1820:	a2 cf       	rjmp	.-188    	; 0x1766 <__fp_inf>
    1822:	a7 cf       	rjmp	.-178    	; 0x1772 <__fp_nan>
    1824:	11 24       	eor	r1, r1
    1826:	ea cf       	rjmp	.-44     	; 0x17fc <__fp_szero>

00001828 <__mulsf3x>:
    1828:	c6 df       	rcall	.-116    	; 0x17b6 <__fp_split3>
    182a:	a0 f3       	brcs	.-24     	; 0x1814 <__mulsf3+0x4>

0000182c <__mulsf3_pse>:
    182c:	95 9f       	mul	r25, r21
    182e:	d1 f3       	breq	.-12     	; 0x1824 <__mulsf3+0x14>
    1830:	95 0f       	add	r25, r21
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	55 1f       	adc	r21, r21
    1836:	62 9f       	mul	r22, r18
    1838:	f0 01       	movw	r30, r0
    183a:	72 9f       	mul	r23, r18
    183c:	bb 27       	eor	r27, r27
    183e:	f0 0d       	add	r31, r0
    1840:	b1 1d       	adc	r27, r1
    1842:	63 9f       	mul	r22, r19
    1844:	aa 27       	eor	r26, r26
    1846:	f0 0d       	add	r31, r0
    1848:	b1 1d       	adc	r27, r1
    184a:	aa 1f       	adc	r26, r26
    184c:	64 9f       	mul	r22, r20
    184e:	66 27       	eor	r22, r22
    1850:	b0 0d       	add	r27, r0
    1852:	a1 1d       	adc	r26, r1
    1854:	66 1f       	adc	r22, r22
    1856:	82 9f       	mul	r24, r18
    1858:	22 27       	eor	r18, r18
    185a:	b0 0d       	add	r27, r0
    185c:	a1 1d       	adc	r26, r1
    185e:	62 1f       	adc	r22, r18
    1860:	73 9f       	mul	r23, r19
    1862:	b0 0d       	add	r27, r0
    1864:	a1 1d       	adc	r26, r1
    1866:	62 1f       	adc	r22, r18
    1868:	83 9f       	mul	r24, r19
    186a:	a0 0d       	add	r26, r0
    186c:	61 1d       	adc	r22, r1
    186e:	22 1f       	adc	r18, r18
    1870:	74 9f       	mul	r23, r20
    1872:	33 27       	eor	r19, r19
    1874:	a0 0d       	add	r26, r0
    1876:	61 1d       	adc	r22, r1
    1878:	23 1f       	adc	r18, r19
    187a:	84 9f       	mul	r24, r20
    187c:	60 0d       	add	r22, r0
    187e:	21 1d       	adc	r18, r1
    1880:	82 2f       	mov	r24, r18
    1882:	76 2f       	mov	r23, r22
    1884:	6a 2f       	mov	r22, r26
    1886:	11 24       	eor	r1, r1
    1888:	9f 57       	subi	r25, 0x7F	; 127
    188a:	50 40       	sbci	r21, 0x00	; 0
    188c:	8a f0       	brmi	.+34     	; 0x18b0 <__mulsf3_pse+0x84>
    188e:	e1 f0       	breq	.+56     	; 0x18c8 <__mulsf3_pse+0x9c>
    1890:	88 23       	and	r24, r24
    1892:	4a f0       	brmi	.+18     	; 0x18a6 <__mulsf3_pse+0x7a>
    1894:	ee 0f       	add	r30, r30
    1896:	ff 1f       	adc	r31, r31
    1898:	bb 1f       	adc	r27, r27
    189a:	66 1f       	adc	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	88 1f       	adc	r24, r24
    18a0:	91 50       	subi	r25, 0x01	; 1
    18a2:	50 40       	sbci	r21, 0x00	; 0
    18a4:	a9 f7       	brne	.-22     	; 0x1890 <__mulsf3_pse+0x64>
    18a6:	9e 3f       	cpi	r25, 0xFE	; 254
    18a8:	51 05       	cpc	r21, r1
    18aa:	70 f0       	brcs	.+28     	; 0x18c8 <__mulsf3_pse+0x9c>
    18ac:	5c cf       	rjmp	.-328    	; 0x1766 <__fp_inf>
    18ae:	a6 cf       	rjmp	.-180    	; 0x17fc <__fp_szero>
    18b0:	5f 3f       	cpi	r21, 0xFF	; 255
    18b2:	ec f3       	brlt	.-6      	; 0x18ae <__mulsf3_pse+0x82>
    18b4:	98 3e       	cpi	r25, 0xE8	; 232
    18b6:	dc f3       	brlt	.-10     	; 0x18ae <__mulsf3_pse+0x82>
    18b8:	86 95       	lsr	r24
    18ba:	77 95       	ror	r23
    18bc:	67 95       	ror	r22
    18be:	b7 95       	ror	r27
    18c0:	f7 95       	ror	r31
    18c2:	e7 95       	ror	r30
    18c4:	9f 5f       	subi	r25, 0xFF	; 255
    18c6:	c1 f7       	brne	.-16     	; 0x18b8 <__mulsf3_pse+0x8c>
    18c8:	fe 2b       	or	r31, r30
    18ca:	88 0f       	add	r24, r24
    18cc:	91 1d       	adc	r25, r1
    18ce:	96 95       	lsr	r25
    18d0:	87 95       	ror	r24
    18d2:	97 f9       	bld	r25, 7
    18d4:	08 95       	ret

000018d6 <pow>:
    18d6:	fa 01       	movw	r30, r20
    18d8:	ee 0f       	add	r30, r30
    18da:	ff 1f       	adc	r31, r31
    18dc:	30 96       	adiw	r30, 0x00	; 0
    18de:	21 05       	cpc	r18, r1
    18e0:	31 05       	cpc	r19, r1
    18e2:	99 f1       	breq	.+102    	; 0x194a <pow+0x74>
    18e4:	61 15       	cp	r22, r1
    18e6:	71 05       	cpc	r23, r1
    18e8:	61 f4       	brne	.+24     	; 0x1902 <pow+0x2c>
    18ea:	80 38       	cpi	r24, 0x80	; 128
    18ec:	bf e3       	ldi	r27, 0x3F	; 63
    18ee:	9b 07       	cpc	r25, r27
    18f0:	49 f1       	breq	.+82     	; 0x1944 <pow+0x6e>
    18f2:	68 94       	set
    18f4:	90 38       	cpi	r25, 0x80	; 128
    18f6:	81 05       	cpc	r24, r1
    18f8:	61 f0       	breq	.+24     	; 0x1912 <pow+0x3c>
    18fa:	80 38       	cpi	r24, 0x80	; 128
    18fc:	bf ef       	ldi	r27, 0xFF	; 255
    18fe:	9b 07       	cpc	r25, r27
    1900:	41 f0       	breq	.+16     	; 0x1912 <pow+0x3c>
    1902:	99 23       	and	r25, r25
    1904:	42 f5       	brpl	.+80     	; 0x1956 <pow+0x80>
    1906:	ff 3f       	cpi	r31, 0xFF	; 255
    1908:	e1 05       	cpc	r30, r1
    190a:	31 05       	cpc	r19, r1
    190c:	21 05       	cpc	r18, r1
    190e:	11 f1       	breq	.+68     	; 0x1954 <pow+0x7e>
    1910:	e8 94       	clt
    1912:	08 94       	sec
    1914:	e7 95       	ror	r30
    1916:	d9 01       	movw	r26, r18
    1918:	aa 23       	and	r26, r26
    191a:	29 f4       	brne	.+10     	; 0x1926 <pow+0x50>
    191c:	ab 2f       	mov	r26, r27
    191e:	be 2f       	mov	r27, r30
    1920:	f8 5f       	subi	r31, 0xF8	; 248
    1922:	d0 f3       	brcs	.-12     	; 0x1918 <pow+0x42>
    1924:	10 c0       	rjmp	.+32     	; 0x1946 <pow+0x70>
    1926:	ff 5f       	subi	r31, 0xFF	; 255
    1928:	70 f4       	brcc	.+28     	; 0x1946 <pow+0x70>
    192a:	a6 95       	lsr	r26
    192c:	e0 f7       	brcc	.-8      	; 0x1926 <pow+0x50>
    192e:	f7 39       	cpi	r31, 0x97	; 151
    1930:	50 f0       	brcs	.+20     	; 0x1946 <pow+0x70>
    1932:	19 f0       	breq	.+6      	; 0x193a <pow+0x64>
    1934:	ff 3a       	cpi	r31, 0xAF	; 175
    1936:	38 f4       	brcc	.+14     	; 0x1946 <pow+0x70>
    1938:	9f 77       	andi	r25, 0x7F	; 127
    193a:	9f 93       	push	r25
    193c:	0c d0       	rcall	.+24     	; 0x1956 <pow+0x80>
    193e:	0f 90       	pop	r0
    1940:	07 fc       	sbrc	r0, 7
    1942:	90 58       	subi	r25, 0x80	; 128
    1944:	08 95       	ret
    1946:	3e f0       	brts	.+14     	; 0x1956 <pow+0x80>
    1948:	14 cf       	rjmp	.-472    	; 0x1772 <__fp_nan>
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	80 e8       	ldi	r24, 0x80	; 128
    1950:	9f e3       	ldi	r25, 0x3F	; 63
    1952:	08 95       	ret
    1954:	4f e7       	ldi	r20, 0x7F	; 127
    1956:	9f 77       	andi	r25, 0x7F	; 127
    1958:	5f 93       	push	r21
    195a:	4f 93       	push	r20
    195c:	3f 93       	push	r19
    195e:	2f 93       	push	r18
    1960:	9e d0       	rcall	.+316    	; 0x1a9e <log>
    1962:	2f 91       	pop	r18
    1964:	3f 91       	pop	r19
    1966:	4f 91       	pop	r20
    1968:	5f 91       	pop	r21
    196a:	52 df       	rcall	.-348    	; 0x1810 <__mulsf3>
    196c:	05 c0       	rjmp	.+10     	; 0x1978 <exp>
    196e:	19 f4       	brne	.+6      	; 0x1976 <pow+0xa0>
    1970:	0e f0       	brts	.+2      	; 0x1974 <pow+0x9e>
    1972:	f9 ce       	rjmp	.-526    	; 0x1766 <__fp_inf>
    1974:	42 cf       	rjmp	.-380    	; 0x17fa <__fp_zero>
    1976:	fd ce       	rjmp	.-518    	; 0x1772 <__fp_nan>

00001978 <exp>:
    1978:	26 df       	rcall	.-436    	; 0x17c6 <__fp_splitA>
    197a:	c8 f3       	brcs	.-14     	; 0x196e <pow+0x98>
    197c:	96 38       	cpi	r25, 0x86	; 134
    197e:	c0 f7       	brcc	.-16     	; 0x1970 <pow+0x9a>
    1980:	07 f8       	bld	r0, 7
    1982:	0f 92       	push	r0
    1984:	e8 94       	clt
    1986:	2b e3       	ldi	r18, 0x3B	; 59
    1988:	3a ea       	ldi	r19, 0xAA	; 170
    198a:	48 eb       	ldi	r20, 0xB8	; 184
    198c:	5f e7       	ldi	r21, 0x7F	; 127
    198e:	4e df       	rcall	.-356    	; 0x182c <__mulsf3_pse>
    1990:	0f 92       	push	r0
    1992:	0f 92       	push	r0
    1994:	0f 92       	push	r0
    1996:	4d b7       	in	r20, 0x3d	; 61
    1998:	5e b7       	in	r21, 0x3e	; 62
    199a:	0f 92       	push	r0
    199c:	c0 d0       	rcall	.+384    	; 0x1b1e <modf>
    199e:	e4 e3       	ldi	r30, 0x34	; 52
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	16 d0       	rcall	.+44     	; 0x19d0 <__fp_powser>
    19a4:	4f 91       	pop	r20
    19a6:	5f 91       	pop	r21
    19a8:	ef 91       	pop	r30
    19aa:	ff 91       	pop	r31
    19ac:	e5 95       	asr	r30
    19ae:	ee 1f       	adc	r30, r30
    19b0:	ff 1f       	adc	r31, r31
    19b2:	49 f0       	breq	.+18     	; 0x19c6 <exp+0x4e>
    19b4:	fe 57       	subi	r31, 0x7E	; 126
    19b6:	e0 68       	ori	r30, 0x80	; 128
    19b8:	44 27       	eor	r20, r20
    19ba:	ee 0f       	add	r30, r30
    19bc:	44 1f       	adc	r20, r20
    19be:	fa 95       	dec	r31
    19c0:	e1 f7       	brne	.-8      	; 0x19ba <exp+0x42>
    19c2:	41 95       	neg	r20
    19c4:	55 0b       	sbc	r21, r21
    19c6:	32 d0       	rcall	.+100    	; 0x1a2c <ldexp>
    19c8:	0f 90       	pop	r0
    19ca:	07 fe       	sbrs	r0, 7
    19cc:	26 c0       	rjmp	.+76     	; 0x1a1a <inverse>
    19ce:	08 95       	ret

000019d0 <__fp_powser>:
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	1f 93       	push	r17
    19d6:	0f 93       	push	r16
    19d8:	ff 92       	push	r15
    19da:	ef 92       	push	r14
    19dc:	df 92       	push	r13
    19de:	7b 01       	movw	r14, r22
    19e0:	8c 01       	movw	r16, r24
    19e2:	68 94       	set
    19e4:	05 c0       	rjmp	.+10     	; 0x19f0 <__fp_powser+0x20>
    19e6:	da 2e       	mov	r13, r26
    19e8:	ef 01       	movw	r28, r30
    19ea:	1e df       	rcall	.-452    	; 0x1828 <__mulsf3x>
    19ec:	fe 01       	movw	r30, r28
    19ee:	e8 94       	clt
    19f0:	a5 91       	lpm	r26, Z+
    19f2:	25 91       	lpm	r18, Z+
    19f4:	35 91       	lpm	r19, Z+
    19f6:	45 91       	lpm	r20, Z+
    19f8:	55 91       	lpm	r21, Z+
    19fa:	ae f3       	brts	.-22     	; 0x19e6 <__fp_powser+0x16>
    19fc:	ef 01       	movw	r28, r30
    19fe:	62 dd       	rcall	.-1340   	; 0x14c4 <__addsf3x>
    1a00:	fe 01       	movw	r30, r28
    1a02:	97 01       	movw	r18, r14
    1a04:	a8 01       	movw	r20, r16
    1a06:	da 94       	dec	r13
    1a08:	79 f7       	brne	.-34     	; 0x19e8 <__fp_powser+0x18>
    1a0a:	df 90       	pop	r13
    1a0c:	ef 90       	pop	r14
    1a0e:	ff 90       	pop	r15
    1a10:	0f 91       	pop	r16
    1a12:	1f 91       	pop	r17
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <inverse>:
    1a1a:	9b 01       	movw	r18, r22
    1a1c:	ac 01       	movw	r20, r24
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	80 e8       	ldi	r24, 0x80	; 128
    1a24:	9f e3       	ldi	r25, 0x3F	; 63
    1a26:	a5 cd       	rjmp	.-1206   	; 0x1572 <__divsf3>
    1a28:	9e ce       	rjmp	.-708    	; 0x1766 <__fp_inf>
    1a2a:	ac c0       	rjmp	.+344    	; 0x1b84 <__fp_mpack>

00001a2c <ldexp>:
    1a2c:	cc de       	rcall	.-616    	; 0x17c6 <__fp_splitA>
    1a2e:	e8 f3       	brcs	.-6      	; 0x1a2a <inverse+0x10>
    1a30:	99 23       	and	r25, r25
    1a32:	d9 f3       	breq	.-10     	; 0x1a2a <inverse+0x10>
    1a34:	94 0f       	add	r25, r20
    1a36:	51 1d       	adc	r21, r1
    1a38:	bb f3       	brvs	.-18     	; 0x1a28 <inverse+0xe>
    1a3a:	91 50       	subi	r25, 0x01	; 1
    1a3c:	50 40       	sbci	r21, 0x00	; 0
    1a3e:	94 f0       	brlt	.+36     	; 0x1a64 <ldexp+0x38>
    1a40:	59 f0       	breq	.+22     	; 0x1a58 <ldexp+0x2c>
    1a42:	88 23       	and	r24, r24
    1a44:	32 f0       	brmi	.+12     	; 0x1a52 <ldexp+0x26>
    1a46:	66 0f       	add	r22, r22
    1a48:	77 1f       	adc	r23, r23
    1a4a:	88 1f       	adc	r24, r24
    1a4c:	91 50       	subi	r25, 0x01	; 1
    1a4e:	50 40       	sbci	r21, 0x00	; 0
    1a50:	c1 f7       	brne	.-16     	; 0x1a42 <ldexp+0x16>
    1a52:	9e 3f       	cpi	r25, 0xFE	; 254
    1a54:	51 05       	cpc	r21, r1
    1a56:	44 f7       	brge	.-48     	; 0x1a28 <inverse+0xe>
    1a58:	88 0f       	add	r24, r24
    1a5a:	91 1d       	adc	r25, r1
    1a5c:	96 95       	lsr	r25
    1a5e:	87 95       	ror	r24
    1a60:	97 f9       	bld	r25, 7
    1a62:	08 95       	ret
    1a64:	5f 3f       	cpi	r21, 0xFF	; 255
    1a66:	ac f0       	brlt	.+42     	; 0x1a92 <ldexp+0x66>
    1a68:	98 3e       	cpi	r25, 0xE8	; 232
    1a6a:	9c f0       	brlt	.+38     	; 0x1a92 <ldexp+0x66>
    1a6c:	bb 27       	eor	r27, r27
    1a6e:	86 95       	lsr	r24
    1a70:	77 95       	ror	r23
    1a72:	67 95       	ror	r22
    1a74:	b7 95       	ror	r27
    1a76:	08 f4       	brcc	.+2      	; 0x1a7a <ldexp+0x4e>
    1a78:	b1 60       	ori	r27, 0x01	; 1
    1a7a:	93 95       	inc	r25
    1a7c:	c1 f7       	brne	.-16     	; 0x1a6e <ldexp+0x42>
    1a7e:	bb 0f       	add	r27, r27
    1a80:	58 f7       	brcc	.-42     	; 0x1a58 <ldexp+0x2c>
    1a82:	11 f4       	brne	.+4      	; 0x1a88 <ldexp+0x5c>
    1a84:	60 ff       	sbrs	r22, 0
    1a86:	e8 cf       	rjmp	.-48     	; 0x1a58 <ldexp+0x2c>
    1a88:	6f 5f       	subi	r22, 0xFF	; 255
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a90:	e3 cf       	rjmp	.-58     	; 0x1a58 <ldexp+0x2c>
    1a92:	b4 ce       	rjmp	.-664    	; 0x17fc <__fp_szero>
    1a94:	0e f0       	brts	.+2      	; 0x1a98 <ldexp+0x6c>
    1a96:	76 c0       	rjmp	.+236    	; 0x1b84 <__fp_mpack>
    1a98:	6c ce       	rjmp	.-808    	; 0x1772 <__fp_nan>
    1a9a:	68 94       	set
    1a9c:	64 ce       	rjmp	.-824    	; 0x1766 <__fp_inf>

00001a9e <log>:
    1a9e:	93 de       	rcall	.-730    	; 0x17c6 <__fp_splitA>
    1aa0:	c8 f3       	brcs	.-14     	; 0x1a94 <ldexp+0x68>
    1aa2:	99 23       	and	r25, r25
    1aa4:	d1 f3       	breq	.-12     	; 0x1a9a <ldexp+0x6e>
    1aa6:	c6 f3       	brts	.-16     	; 0x1a98 <ldexp+0x6c>
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	1f 93       	push	r17
    1aae:	0f 93       	push	r16
    1ab0:	ff 92       	push	r15
    1ab2:	c9 2f       	mov	r28, r25
    1ab4:	dd 27       	eor	r29, r29
    1ab6:	88 23       	and	r24, r24
    1ab8:	2a f0       	brmi	.+10     	; 0x1ac4 <log+0x26>
    1aba:	21 97       	sbiw	r28, 0x01	; 1
    1abc:	66 0f       	add	r22, r22
    1abe:	77 1f       	adc	r23, r23
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	da f7       	brpl	.-10     	; 0x1aba <log+0x1c>
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	5f eb       	ldi	r21, 0xBF	; 191
    1acc:	9f e3       	ldi	r25, 0x3F	; 63
    1ace:	88 39       	cpi	r24, 0x98	; 152
    1ad0:	20 f0       	brcs	.+8      	; 0x1ada <log+0x3c>
    1ad2:	80 3e       	cpi	r24, 0xE0	; 224
    1ad4:	30 f0       	brcs	.+12     	; 0x1ae2 <log+0x44>
    1ad6:	21 96       	adiw	r28, 0x01	; 1
    1ad8:	8f 77       	andi	r24, 0x7F	; 127
    1ada:	e3 dc       	rcall	.-1594   	; 0x14a2 <__addsf3>
    1adc:	ec e5       	ldi	r30, 0x5C	; 92
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	03 c0       	rjmp	.+6      	; 0x1ae8 <log+0x4a>
    1ae2:	df dc       	rcall	.-1602   	; 0x14a2 <__addsf3>
    1ae4:	e9 e8       	ldi	r30, 0x89	; 137
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	73 df       	rcall	.-282    	; 0x19d0 <__fp_powser>
    1aea:	8b 01       	movw	r16, r22
    1aec:	be 01       	movw	r22, r28
    1aee:	ec 01       	movw	r28, r24
    1af0:	fb 2e       	mov	r15, r27
    1af2:	6f 57       	subi	r22, 0x7F	; 127
    1af4:	71 09       	sbc	r23, r1
    1af6:	75 95       	asr	r23
    1af8:	77 1f       	adc	r23, r23
    1afa:	88 0b       	sbc	r24, r24
    1afc:	99 0b       	sbc	r25, r25
    1afe:	d4 dd       	rcall	.-1112   	; 0x16a8 <__floatsisf>
    1b00:	28 e1       	ldi	r18, 0x18	; 24
    1b02:	32 e7       	ldi	r19, 0x72	; 114
    1b04:	41 e3       	ldi	r20, 0x31	; 49
    1b06:	5f e3       	ldi	r21, 0x3F	; 63
    1b08:	8f de       	rcall	.-738    	; 0x1828 <__mulsf3x>
    1b0a:	af 2d       	mov	r26, r15
    1b0c:	98 01       	movw	r18, r16
    1b0e:	ae 01       	movw	r20, r28
    1b10:	ff 90       	pop	r15
    1b12:	0f 91       	pop	r16
    1b14:	1f 91       	pop	r17
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	d4 dc       	rcall	.-1624   	; 0x14c4 <__addsf3x>
    1b1c:	3b ce       	rjmp	.-906    	; 0x1794 <__fp_round>

00001b1e <modf>:
    1b1e:	fa 01       	movw	r30, r20
    1b20:	dc 01       	movw	r26, r24
    1b22:	aa 0f       	add	r26, r26
    1b24:	bb 1f       	adc	r27, r27
    1b26:	9b 01       	movw	r18, r22
    1b28:	ac 01       	movw	r20, r24
    1b2a:	bf 57       	subi	r27, 0x7F	; 127
    1b2c:	28 f4       	brcc	.+10     	; 0x1b38 <modf+0x1a>
    1b2e:	22 27       	eor	r18, r18
    1b30:	33 27       	eor	r19, r19
    1b32:	44 27       	eor	r20, r20
    1b34:	50 78       	andi	r21, 0x80	; 128
    1b36:	1f c0       	rjmp	.+62     	; 0x1b76 <modf+0x58>
    1b38:	b7 51       	subi	r27, 0x17	; 23
    1b3a:	88 f4       	brcc	.+34     	; 0x1b5e <modf+0x40>
    1b3c:	ab 2f       	mov	r26, r27
    1b3e:	00 24       	eor	r0, r0
    1b40:	46 95       	lsr	r20
    1b42:	37 95       	ror	r19
    1b44:	27 95       	ror	r18
    1b46:	01 1c       	adc	r0, r1
    1b48:	a3 95       	inc	r26
    1b4a:	d2 f3       	brmi	.-12     	; 0x1b40 <modf+0x22>
    1b4c:	00 20       	and	r0, r0
    1b4e:	69 f0       	breq	.+26     	; 0x1b6a <modf+0x4c>
    1b50:	22 0f       	add	r18, r18
    1b52:	33 1f       	adc	r19, r19
    1b54:	44 1f       	adc	r20, r20
    1b56:	b3 95       	inc	r27
    1b58:	da f3       	brmi	.-10     	; 0x1b50 <modf+0x32>
    1b5a:	0d d0       	rcall	.+26     	; 0x1b76 <modf+0x58>
    1b5c:	a1 cc       	rjmp	.-1726   	; 0x14a0 <__subsf3>
    1b5e:	61 30       	cpi	r22, 0x01	; 1
    1b60:	71 05       	cpc	r23, r1
    1b62:	a0 e8       	ldi	r26, 0x80	; 128
    1b64:	8a 07       	cpc	r24, r26
    1b66:	b9 46       	sbci	r27, 0x69	; 105
    1b68:	30 f4       	brcc	.+12     	; 0x1b76 <modf+0x58>
    1b6a:	9b 01       	movw	r18, r22
    1b6c:	ac 01       	movw	r20, r24
    1b6e:	66 27       	eor	r22, r22
    1b70:	77 27       	eor	r23, r23
    1b72:	88 27       	eor	r24, r24
    1b74:	90 78       	andi	r25, 0x80	; 128
    1b76:	30 96       	adiw	r30, 0x00	; 0
    1b78:	21 f0       	breq	.+8      	; 0x1b82 <modf+0x64>
    1b7a:	20 83       	st	Z, r18
    1b7c:	31 83       	std	Z+1, r19	; 0x01
    1b7e:	42 83       	std	Z+2, r20	; 0x02
    1b80:	53 83       	std	Z+3, r21	; 0x03
    1b82:	08 95       	ret

00001b84 <__fp_mpack>:
    1b84:	9f 3f       	cpi	r25, 0xFF	; 255
    1b86:	31 f0       	breq	.+12     	; 0x1b94 <__fp_mpack_finite+0xc>

00001b88 <__fp_mpack_finite>:
    1b88:	91 50       	subi	r25, 0x01	; 1
    1b8a:	20 f4       	brcc	.+8      	; 0x1b94 <__fp_mpack_finite+0xc>
    1b8c:	87 95       	ror	r24
    1b8e:	77 95       	ror	r23
    1b90:	67 95       	ror	r22
    1b92:	b7 95       	ror	r27
    1b94:	88 0f       	add	r24, r24
    1b96:	91 1d       	adc	r25, r1
    1b98:	96 95       	lsr	r25
    1b9a:	87 95       	ror	r24
    1b9c:	97 f9       	bld	r25, 7
    1b9e:	08 95       	ret

00001ba0 <__divmodhi4>:
    1ba0:	97 fb       	bst	r25, 7
    1ba2:	07 2e       	mov	r0, r23
    1ba4:	16 f4       	brtc	.+4      	; 0x1baa <__divmodhi4+0xa>
    1ba6:	00 94       	com	r0
    1ba8:	06 d0       	rcall	.+12     	; 0x1bb6 <__divmodhi4_neg1>
    1baa:	77 fd       	sbrc	r23, 7
    1bac:	08 d0       	rcall	.+16     	; 0x1bbe <__divmodhi4_neg2>
    1bae:	27 d0       	rcall	.+78     	; 0x1bfe <__udivmodhi4>
    1bb0:	07 fc       	sbrc	r0, 7
    1bb2:	05 d0       	rcall	.+10     	; 0x1bbe <__divmodhi4_neg2>
    1bb4:	3e f4       	brtc	.+14     	; 0x1bc4 <__divmodhi4_exit>

00001bb6 <__divmodhi4_neg1>:
    1bb6:	90 95       	com	r25
    1bb8:	81 95       	neg	r24
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	08 95       	ret

00001bbe <__divmodhi4_neg2>:
    1bbe:	70 95       	com	r23
    1bc0:	61 95       	neg	r22
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255

00001bc4 <__divmodhi4_exit>:
    1bc4:	08 95       	ret

00001bc6 <__divmodsi4>:
    1bc6:	05 2e       	mov	r0, r21
    1bc8:	97 fb       	bst	r25, 7
    1bca:	16 f4       	brtc	.+4      	; 0x1bd0 <__divmodsi4+0xa>
    1bcc:	00 94       	com	r0
    1bce:	0f d0       	rcall	.+30     	; 0x1bee <__negsi2>
    1bd0:	57 fd       	sbrc	r21, 7
    1bd2:	05 d0       	rcall	.+10     	; 0x1bde <__divmodsi4_neg2>
    1bd4:	28 d0       	rcall	.+80     	; 0x1c26 <__udivmodsi4>
    1bd6:	07 fc       	sbrc	r0, 7
    1bd8:	02 d0       	rcall	.+4      	; 0x1bde <__divmodsi4_neg2>
    1bda:	46 f4       	brtc	.+16     	; 0x1bec <__divmodsi4_exit>
    1bdc:	08 c0       	rjmp	.+16     	; 0x1bee <__negsi2>

00001bde <__divmodsi4_neg2>:
    1bde:	50 95       	com	r21
    1be0:	40 95       	com	r20
    1be2:	30 95       	com	r19
    1be4:	21 95       	neg	r18
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	4f 4f       	sbci	r20, 0xFF	; 255
    1bea:	5f 4f       	sbci	r21, 0xFF	; 255

00001bec <__divmodsi4_exit>:
    1bec:	08 95       	ret

00001bee <__negsi2>:
    1bee:	90 95       	com	r25
    1bf0:	80 95       	com	r24
    1bf2:	70 95       	com	r23
    1bf4:	61 95       	neg	r22
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	08 95       	ret

00001bfe <__udivmodhi4>:
    1bfe:	aa 1b       	sub	r26, r26
    1c00:	bb 1b       	sub	r27, r27
    1c02:	51 e1       	ldi	r21, 0x11	; 17
    1c04:	07 c0       	rjmp	.+14     	; 0x1c14 <__udivmodhi4_ep>

00001c06 <__udivmodhi4_loop>:
    1c06:	aa 1f       	adc	r26, r26
    1c08:	bb 1f       	adc	r27, r27
    1c0a:	a6 17       	cp	r26, r22
    1c0c:	b7 07       	cpc	r27, r23
    1c0e:	10 f0       	brcs	.+4      	; 0x1c14 <__udivmodhi4_ep>
    1c10:	a6 1b       	sub	r26, r22
    1c12:	b7 0b       	sbc	r27, r23

00001c14 <__udivmodhi4_ep>:
    1c14:	88 1f       	adc	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	5a 95       	dec	r21
    1c1a:	a9 f7       	brne	.-22     	; 0x1c06 <__udivmodhi4_loop>
    1c1c:	80 95       	com	r24
    1c1e:	90 95       	com	r25
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	08 95       	ret

00001c26 <__udivmodsi4>:
    1c26:	a1 e2       	ldi	r26, 0x21	; 33
    1c28:	1a 2e       	mov	r1, r26
    1c2a:	aa 1b       	sub	r26, r26
    1c2c:	bb 1b       	sub	r27, r27
    1c2e:	fd 01       	movw	r30, r26
    1c30:	0d c0       	rjmp	.+26     	; 0x1c4c <__udivmodsi4_ep>

00001c32 <__udivmodsi4_loop>:
    1c32:	aa 1f       	adc	r26, r26
    1c34:	bb 1f       	adc	r27, r27
    1c36:	ee 1f       	adc	r30, r30
    1c38:	ff 1f       	adc	r31, r31
    1c3a:	a2 17       	cp	r26, r18
    1c3c:	b3 07       	cpc	r27, r19
    1c3e:	e4 07       	cpc	r30, r20
    1c40:	f5 07       	cpc	r31, r21
    1c42:	20 f0       	brcs	.+8      	; 0x1c4c <__udivmodsi4_ep>
    1c44:	a2 1b       	sub	r26, r18
    1c46:	b3 0b       	sbc	r27, r19
    1c48:	e4 0b       	sbc	r30, r20
    1c4a:	f5 0b       	sbc	r31, r21

00001c4c <__udivmodsi4_ep>:
    1c4c:	66 1f       	adc	r22, r22
    1c4e:	77 1f       	adc	r23, r23
    1c50:	88 1f       	adc	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	1a 94       	dec	r1
    1c56:	69 f7       	brne	.-38     	; 0x1c32 <__udivmodsi4_loop>
    1c58:	60 95       	com	r22
    1c5a:	70 95       	com	r23
    1c5c:	80 95       	com	r24
    1c5e:	90 95       	com	r25
    1c60:	9b 01       	movw	r18, r22
    1c62:	ac 01       	movw	r20, r24
    1c64:	bd 01       	movw	r22, r26
    1c66:	cf 01       	movw	r24, r30
    1c68:	08 95       	ret

00001c6a <_exit>:
    1c6a:	f8 94       	cli

00001c6c <__stop_program>:
    1c6c:	ff cf       	rjmp	.-2      	; 0x1c6c <__stop_program>
