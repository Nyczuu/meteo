
meteoMN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00001da8  00001e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001da8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080016c  0080016c  00001ea8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000341a  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001006  00000000  00000000  000056d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000175d  00000000  00000000  000066d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d4  00000000  00000000  00007e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bec  00000000  00000000  0000870c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bcd  00000000  00000000  000092f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000aec5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	01 c5       	rjmp	.+2562   	; 0xa04 <__ctors_end>
       2:	1b c5       	rjmp	.+2614   	; 0xa3a <__bad_interrupt>
       4:	1a c5       	rjmp	.+2612   	; 0xa3a <__bad_interrupt>
       6:	19 c5       	rjmp	.+2610   	; 0xa3a <__bad_interrupt>
       8:	18 c5       	rjmp	.+2608   	; 0xa3a <__bad_interrupt>
       a:	17 c5       	rjmp	.+2606   	; 0xa3a <__bad_interrupt>
       c:	16 c5       	rjmp	.+2604   	; 0xa3a <__bad_interrupt>
       e:	15 c5       	rjmp	.+2602   	; 0xa3a <__bad_interrupt>
      10:	14 c5       	rjmp	.+2600   	; 0xa3a <__bad_interrupt>
      12:	13 c5       	rjmp	.+2598   	; 0xa3a <__bad_interrupt>
      14:	12 c5       	rjmp	.+2596   	; 0xa3a <__bad_interrupt>
      16:	f9 c8       	rjmp	.-3598   	; 0xfffff20a <__eeprom_end+0xff7ef20a>
      18:	10 c5       	rjmp	.+2592   	; 0xa3a <__bad_interrupt>
      1a:	0f c5       	rjmp	.+2590   	; 0xa3a <__bad_interrupt>
      1c:	0e c5       	rjmp	.+2588   	; 0xa3a <__bad_interrupt>
      1e:	0d c5       	rjmp	.+2586   	; 0xa3a <__bad_interrupt>
      20:	0c c5       	rjmp	.+2584   	; 0xa3a <__bad_interrupt>
      22:	0b c5       	rjmp	.+2582   	; 0xa3a <__bad_interrupt>
      24:	0a c5       	rjmp	.+2580   	; 0xa3a <__bad_interrupt>
      26:	09 c5       	rjmp	.+2578   	; 0xa3a <__bad_interrupt>
      28:	08 c5       	rjmp	.+2576   	; 0xa3a <__bad_interrupt>
      2a:	07 c5       	rjmp	.+2574   	; 0xa3a <__bad_interrupt>
      2c:	06 c5       	rjmp	.+2572   	; 0xa3a <__bad_interrupt>
      2e:	05 c5       	rjmp	.+2570   	; 0xa3a <__bad_interrupt>
      30:	04 c5       	rjmp	.+2568   	; 0xa3a <__bad_interrupt>
      32:	03 c5       	rjmp	.+2566   	; 0xa3a <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	ae d5       	rcall	.+2908   	; 0xb92 <ssd1306tx_stringxy+0x14>
      36:	f0 a8       	ldd	r15, Z+48	; 0x30
      38:	3f d3       	rcall	.+1662   	; 0x6b8 <__stack+0x1b9>
      3a:	00 40       	sbci	r16, 0x00	; 0
      3c:	8d 14       	cp	r8, r13
      3e:	20 00       	.word	0x0020	; ????
      40:	a1 c8       	rjmp	.-3774   	; 0xfffff184 <__eeprom_end+0xff7ef184>
      42:	da 12       	cpse	r13, r26
      44:	81 3f       	cpi	r24, 0xF1	; 241
      46:	d9 22       	and	r13, r25
      48:	db 20       	and	r13, r11
      4a:	a4 a6       	std	Z+44, r10	; 0x2c
      4c:	2e af       	std	Y+62, r18	; 0x3e
      4e:	22 00       	.word	0x0022	; ????
      50:	3f 21       	and	r19, r15
      52:	00 7f       	andi	r16, 0xF0	; 240

00000054 <number9>:
      54:	00 00 00 00 c0 f0 78 18 1c 0c 0e 06 0e 1c 18 38     ......x........8
      64:	f0 e0 00 00 00 00 00 00 00 00 00 00 3f 7f 60 60     ............?.``
      74:	e0 c0 c0 c0 c0 c0 e0 f0 ff ff 00 00 00 00 00 00     ................
	...
      90:	00 00 01 ff ff 03 00 00 00 00 00 00 00 00 00 0f     ................
      a0:	3f 78 60 60 60 60 60 60 70 38 3e 0f 03 00 00 00     ?x``````p8>.....
      b0:	00 00 00 00                                         ....

000000b4 <number8>:
      b4:	00 00 00 00 c0 e0 70 38 1c 0e 07 07 06 0e 1c 78     ......p8.......x
      c4:	f0 c0 00 00 00 00 00 00 00 00 00 00 1f 3f 30 70     .............?0p
      d4:	60 e0 c0 c0 c0 e0 70 3e 3f 03 00 00 00 00 00 00     `.....p>?.......
      e4:	00 00 00 00 c0 f0 7c 1e 07 03 03 01 01 03 03 07     ......|.........
      f4:	3e fc e0 00 00 00 00 00 00 00 00 00 03 0f 1e 18     >...............
     104:	18 18 18 18 18 18 1c 0e 07 03 01 00 00 00 00 00     ................

00000114 <number7>:
     114:	00 10 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
     124:	18 18 f8 f8 30 00 00 00 00 00 00 00 00 00 00 00     ....0...........
     134:	00 00 00 00 00 00 00 c0 fc 7f 07 01 00 00 00 00     ................
     144:	00 00 00 00 00 00 00 04 06 06 06 86 e6 fe 3e 0f     ..............>.
     154:	07 06 06 06 04 00 00 00 00 00 00 00 00 00 00 00     ................
     164:	40 70 7c 1f 07 00 00 00 00 00 00 00 00 00 00 00     @p|.............

00000174 <number6>:
     174:	00 00 00 00 00 00 80 c0 e0 70 30 30 30 30 70 60     .........p0000p`
     184:	e0 c0 80 00 00 00 00 00 00 00 00 00 f8 fe 0f 03     ................
     194:	80 80 c0 c0 c0 c0 c0 80 00 01 07 07 00 00 00 00     ................
     1a4:	00 00 00 00 ff ff 0e 07 03 01 01 00 00 00 01 03     ................
     1b4:	1f fe f0 00 00 00 00 00 00 00 00 00 01 07 0f 0c     ................
     1c4:	1c 18 38 30 30 30 38 1c 0e 0f 03 00 00 00 00 00     ..80008.........

000001d4 <number5>:
     1d4:	00 00 00 f0 f8 18 18 18 18 18 18 18 18 18 18 18     ................
     1e4:	18 18 18 10 00 00 00 00 00 00 00 1f ff f0 80 80     ................
     1f4:	c0 c0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00     ................
     204:	00 00 00 00 03 03 03 01 01 00 00 00 01 01 03 07     ................
     214:	1e fc f0 00 00 00 00 00 00 00 00 00 1c 3c 30 30     .............<00
     224:	30 30 30 30 30 38 18 1c 0f 07 01 00 00 00 00 00     000008..........

00000234 <number4>:
     234:	00 00 00 00 00 00 fc fc 00 00 00 00 00 00 00 00     ................
	...
     250:	80 f0 ff 1f 00 00 00 00 00 00 00 00 f0 f0 00 00     ................
	...
     268:	03 03 03 03 03 03 03 03 03 03 03 03 ff ff 03 02     ................
	...
     28c:	3f 3f 00 00 00 00 00 00                             ??......

00000294 <number3>:
     294:	00 00 00 00 c0 e0 70 30 30 38 18 18 18 18 18 38     ......p008.....8
     2a4:	f0 e0 00 00 00 00 00 00 00 00 00 03 03 01 00 00     ................
     2b4:	00 00 80 80 80 80 c0 c0 f1 7f 1f 00 00 00 00 00     ................
	...
     2cc:	00 01 03 03 03 03 07 0e fc f8 00 00 00 00 00 00     ................
     2dc:	00 00 03 07 06 0e 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     2ec:	0f 07 00 00 00 00 00 00                             ........

000002f4 <number2>:
     2f4:	00 00 00 00 c0 e0 70 38 18 18 18 18 38 70 e0 c0     ......p8....8p..
	...
     310:	03 03 00 00 00 00 00 00 80 e0 ff 3f 00 00 00 00     ...........?....
	...
     328:	00 00 80 c0 f0 78 1c 0e 07 03 00 00 00 00 00 00     .....x..........
     338:	00 00 00 00 00 00 00 18 1e 1f 1b 19 18 18 18 18     ................
     348:	18 18 18 18 18 18 18 10 00 00 00 00                 ............

00000354 <number1>:
	...
     360:	c0 e0 f0 f0 e0 00 00 00 00 00 00 00 00 00 00 00     ................
     370:	00 00 80 e0 f0 38 1c 1f 07 03 ff ff 03 00 00 00     .....8..........
	...
     388:	00 00 03 01 00 00 00 00 c0 fe 7f 03 00 00 00 00     ................
	...
     3a0:	00 20 30 30 30 30 30 38 3f 3f 30 30 30 30 30 30     . 000008??000000
     3b0:	20 00 00 00                                          ...

000003b4 <number0>:
     3b4:	00 00 00 00 00 00 c0 e0 70 38 1c 08 0c 18 38 70     ........p8....8p
     3c4:	e0 c0 80 00 00 00 00 00 00 00 00 00 fc ff 07 01     ................
	...
     3dc:	00 01 0f ff f8 00 00 00 00 00 00 00 7f ff c0 00     ................
	...
     3f4:	00 00 e0 ff 3f 00 00 00 00 00 00 00 00 01 03 07     ....?...........
     404:	0e 0c 1c 18 18 18 18 18 1c 0c 0f 07 00 00 00 00     ................

00000414 <ssd1306xled_font8x16data>:
	...
     424:	00 00 00 f8 00 00 00 00 00 00 00 33 30 00 00 00     ...........30...
     434:	00 10 0c 06 10 0c 06 00 00 00 00 00 00 00 00 00     ................
     444:	40 c0 78 40 c0 78 40 00 04 3f 04 04 3f 04 04 00     @.x@.x@..?..?...
     454:	00 70 88 fc 08 30 00 00 00 18 20 ff 21 1e 00 00     .p...0.... .!...
     464:	f0 08 f0 00 e0 18 00 00 00 21 1c 03 1e 21 1e 00     .........!...!..
     474:	00 f0 08 88 70 00 00 00 1e 21 23 24 19 27 21 10     ....p....!#$.'!.
     484:	10 16 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     494:	00 00 00 e0 18 04 02 00 00 00 00 07 18 20 40 00     ............. @.
     4a4:	00 02 04 18 e0 00 00 00 00 40 20 18 07 00 00 00     .........@ .....
     4b4:	40 40 80 f0 80 40 40 00 02 02 01 0f 01 02 02 00     @@...@@.........
     4c4:	00 00 00 f0 00 00 00 00 01 01 01 1f 01 01 01 00     ................
	...
     4dc:	80 b0 70 00 00 00 00 00 00 00 00 00 00 00 00 00     ..p.............
     4ec:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
     4fc:	00 30 30 00 00 00 00 00 00 00 00 00 80 60 18 04     .00..........`..
     50c:	00 60 18 06 01 00 00 00 00 e0 10 08 08 10 e0 00     .`..............
     51c:	00 0f 10 20 20 10 0f 00 00 10 10 f8 00 00 00 00     ...  ...........
     52c:	00 20 20 3f 20 20 00 00 00 70 08 08 08 88 70 00     .  ?  ...p....p.
     53c:	00 30 28 24 22 21 30 00 00 30 08 88 88 48 30 00     .0($"!0..0...H0.
     54c:	00 18 20 20 20 11 0e 00 00 00 c0 20 10 f8 00 00     ..   ...... ....
     55c:	00 07 04 24 24 3f 24 00 00 f8 08 88 88 08 08 00     ...$$?$.........
     56c:	00 19 21 20 20 11 0e 00 00 e0 10 88 88 18 00 00     ..!  ...........
     57c:	00 0f 11 20 20 11 0e 00 00 38 08 08 c8 38 08 00     ...  ....8...8..
     58c:	00 00 00 3f 00 00 00 00 00 70 88 08 08 88 70 00     ...?.....p....p.
     59c:	00 1c 22 21 21 22 1c 00 00 e0 10 08 08 10 e0 00     .."!!"..........
     5ac:	00 00 31 22 22 11 0f 00 00 00 00 c0 c0 00 00 00     ..1""...........
     5bc:	00 00 00 30 30 00 00 00 00 00 00 80 00 00 00 00     ...00...........
     5cc:	00 00 80 60 00 00 00 00 00 00 80 40 20 10 08 00     ...`.......@ ...
     5dc:	00 01 02 04 08 10 20 00 40 40 40 40 40 40 40 00     ...... .@@@@@@@.
     5ec:	04 04 04 04 04 04 04 00 00 08 10 20 40 80 00 00     ........... @...
     5fc:	00 20 10 08 04 02 01 00 00 70 48 08 08 08 f0 00     . .......pH.....
     60c:	00 00 00 30 36 01 00 00 c0 30 c8 28 e8 10 e0 00     ...06....0.(....
     61c:	07 18 27 24 23 14 0b 00 00 00 c0 38 e0 00 00 00     ..'$#......8....
     62c:	20 3c 23 02 02 27 38 20 08 f8 88 88 88 70 00 00      <#..'8 .....p..
     63c:	20 3f 20 20 20 11 0e 00 c0 30 08 08 08 08 38 00      ?   ....0....8.
     64c:	07 18 20 20 20 10 08 00 08 f8 08 08 08 10 e0 00     ..   ...........
     65c:	20 3f 20 20 20 10 0f 00 08 f8 88 88 e8 08 10 00      ?   ...........
     66c:	20 3f 20 20 23 20 18 00 08 f8 88 88 e8 08 10 00      ?  # ..........
     67c:	20 3f 20 00 03 00 00 00 c0 30 08 08 08 38 00 00      ? ......0...8..
     68c:	07 18 20 20 22 1e 02 00 08 f8 08 00 00 08 f8 08     ..  "...........
     69c:	20 3f 21 01 01 21 3f 20 00 08 08 f8 08 08 00 00      ?!..!? ........
     6ac:	00 20 20 3f 20 20 00 00 00 00 08 08 f8 08 08 00     .  ?  ..........
     6bc:	c0 80 80 80 7f 00 00 00 08 f8 88 c0 28 18 08 00     ............(...
     6cc:	20 3f 20 01 26 38 20 00 08 f8 08 00 00 00 00 00      ? .&8 .........
     6dc:	20 3f 20 20 20 20 30 00 08 f8 f8 00 f8 f8 08 00      ?    0.........
     6ec:	20 3f 00 3f 00 3f 20 00 08 f8 30 c0 00 08 f8 08      ?.?.? ...0.....
     6fc:	20 3f 20 00 07 18 3f 00 e0 10 08 08 08 10 e0 00      ? ...?.........
     70c:	0f 10 20 20 20 10 0f 00 08 f8 08 08 08 08 f0 00     ..   ...........
     71c:	20 3f 21 01 01 01 00 00 e0 10 08 08 08 10 e0 00      ?!.............
     72c:	0f 18 24 24 38 50 4f 00 08 f8 88 88 88 88 70 00     ..$$8PO.......p.
     73c:	20 3f 20 00 03 0c 30 20 00 70 88 08 08 08 38 00      ? ...0 .p....8.
     74c:	00 38 20 21 21 22 1c 00 18 08 08 f8 08 08 18 00     .8 !!"..........
     75c:	00 00 20 3f 20 00 00 00 08 f8 08 00 00 08 f8 08     .. ? ...........
     76c:	00 1f 20 20 20 20 1f 00 08 78 88 00 00 c8 38 08     ..    ...x....8.
     77c:	00 00 07 38 0e 01 00 00 f8 08 00 f8 00 08 f8 00     ...8............
     78c:	03 3c 07 00 07 3c 03 00 08 18 68 80 80 68 18 08     .<...<....h..h..
     79c:	20 30 2c 03 03 2c 30 20 08 38 c8 00 c8 38 08 00      0,..,0 .8...8..
     7ac:	00 00 20 3f 20 00 00 00 10 08 08 08 c8 38 08 00     .. ? ........8..
     7bc:	20 38 26 21 20 20 18 00 00 00 00 fe 02 02 02 00      8&!  ..........
     7cc:	00 00 00 7f 40 40 40 00 00 0c 30 c0 00 00 00 00     ....@@@...0.....
     7dc:	00 00 00 01 06 38 c0 00 00 02 02 02 fe 00 00 00     .....8..........
     7ec:	00 40 40 40 7f 00 00 00 00 00 04 02 02 02 04 00     .@@@............
	...
     80c:	80 80 80 80 80 80 80 80 00 02 02 04 00 00 00 00     ................
	...
     824:	00 00 80 80 80 80 00 00 00 19 24 22 22 22 3f 20     ..........$"""? 
     834:	08 f8 00 80 80 00 00 00 00 3f 11 20 20 11 0e 00     .........?.  ...
     844:	00 00 00 80 80 80 00 00 00 0e 11 20 20 20 11 00     ...........   ..
     854:	00 00 00 80 80 88 f8 00 00 0e 11 20 20 10 3f 20     ...........  .? 
     864:	00 00 80 80 80 80 00 00 00 1f 22 22 22 22 13 00     ..........""""..
     874:	00 80 80 f0 88 88 88 18 00 20 20 3f 20 20 00 00     .........  ?  ..
     884:	00 00 80 80 80 80 80 00 00 6b 94 94 94 93 60 00     .........k....`.
     894:	08 f8 00 80 80 80 00 00 20 3f 21 00 00 20 3f 20     ........ ?!.. ? 
     8a4:	00 80 98 98 00 00 00 00 00 20 20 3f 20 20 00 00     .........  ?  ..
     8b4:	00 00 00 80 98 98 00 00 00 c0 80 80 80 7f 00 00     ................
     8c4:	08 f8 00 00 80 80 80 00 20 3f 24 02 2d 30 20 00     ........ ?$.-0 .
     8d4:	00 08 08 f8 00 00 00 00 00 20 20 3f 20 20 00 00     .........  ?  ..
     8e4:	80 80 80 80 80 80 80 00 20 3f 20 00 3f 20 00 3f     ........ ? .? .?
     8f4:	80 80 00 80 80 80 00 00 20 3f 21 00 00 20 3f 20     ........ ?!.. ? 
     904:	00 00 80 80 80 80 00 00 00 1f 20 20 20 20 1f 00     ..........    ..
     914:	80 80 00 80 80 00 00 00 80 ff a1 20 20 11 0e 00     ...........  ...
     924:	00 00 00 80 80 80 80 00 00 0e 11 20 20 a0 ff 80     ...........  ...
     934:	80 80 80 00 80 80 80 00 20 20 3f 21 20 00 01 00     ........  ?! ...
     944:	00 00 80 80 80 80 80 00 00 33 24 24 24 24 19 00     .........3$$$$..
     954:	00 80 80 e0 80 80 00 00 00 00 00 1f 20 20 00 00     ............  ..
     964:	80 80 00 00 00 80 80 00 00 1f 20 20 20 10 3f 20     ..........   .? 
     974:	80 80 80 00 00 80 80 80 00 01 0e 30 08 06 01 00     ...........0....
     984:	80 80 00 80 00 80 80 80 0f 30 0c 03 0c 30 0f 00     .........0...0..
     994:	00 80 80 00 80 80 80 00 00 20 31 2e 0e 31 20 00     ......... 1..1 .
     9a4:	80 80 80 00 00 80 80 80 80 81 8e 70 18 06 01 00     ...........p....
     9b4:	00 80 80 80 80 80 80 00 00 21 30 2c 22 21 30 00     .........!0,"!0.
     9c4:	00 00 00 00 80 7c 02 02 00 00 00 00 00 3f 40 40     .....|.......?@@
     9d4:	00 00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00     ................
     9e4:	00 02 02 7c 80 00 00 00 00 40 40 3f 00 00 00 00     ...|.....@@?....
     9f4:	00 06 01 01 02 02 04 04 00 00 00 00 00 00 00 00     ................

00000a04 <__ctors_end>:
     a04:	11 24       	eor	r1, r1
     a06:	1f be       	out	0x3f, r1	; 63
     a08:	cf ef       	ldi	r28, 0xFF	; 255
     a0a:	d4 e0       	ldi	r29, 0x04	; 4
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	cd bf       	out	0x3d, r28	; 61

00000a10 <__do_copy_data>:
     a10:	11 e0       	ldi	r17, 0x01	; 1
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b1 e0       	ldi	r27, 0x01	; 1
     a16:	e8 ea       	ldi	r30, 0xA8	; 168
     a18:	fd e1       	ldi	r31, 0x1D	; 29
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <__do_copy_data+0x10>
     a1c:	05 90       	lpm	r0, Z+
     a1e:	0d 92       	st	X+, r0
     a20:	ac 36       	cpi	r26, 0x6C	; 108
     a22:	b1 07       	cpc	r27, r17
     a24:	d9 f7       	brne	.-10     	; 0xa1c <__do_copy_data+0xc>

00000a26 <__do_clear_bss>:
     a26:	21 e0       	ldi	r18, 0x01	; 1
     a28:	ac e6       	ldi	r26, 0x6C	; 108
     a2a:	b1 e0       	ldi	r27, 0x01	; 1
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <.do_clear_bss_start>

00000a2e <.do_clear_bss_loop>:
     a2e:	1d 92       	st	X+, r1

00000a30 <.do_clear_bss_start>:
     a30:	a3 38       	cpi	r26, 0x83	; 131
     a32:	b2 07       	cpc	r27, r18
     a34:	e1 f7       	brne	.-8      	; 0xa2e <.do_clear_bss_loop>
     a36:	d6 d3       	rcall	.+1964   	; 0x11e4 <main>
     a38:	b5 c9       	rjmp	.-3222   	; 0xfffffda4 <__eeprom_end+0xff7efda4>

00000a3a <__bad_interrupt>:
     a3a:	e2 ca       	rjmp	.-2620   	; 0x0 <__vectors>

00000a3c <ssd1306_start_command>:

void ssd1306tx_string(char *s) {
	while (*s) {
		ssd1306tx_char(*s++);
	}
}
     a3c:	1c d1       	rcall	.+568    	; 0xc76 <I2C_start>
     a3e:	88 e7       	ldi	r24, 0x78	; 120
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	2b d1       	rcall	.+598    	; 0xc9a <I2C_write>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	28 d1       	rcall	.+592    	; 0xc9a <I2C_write>
     a4a:	08 95       	ret

00000a4c <ssd1306_start_data>:
     a4c:	14 d1       	rcall	.+552    	; 0xc76 <I2C_start>
     a4e:	88 e7       	ldi	r24, 0x78	; 120
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	23 d1       	rcall	.+582    	; 0xc9a <I2C_write>
     a54:	80 e4       	ldi	r24, 0x40	; 64
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	20 d1       	rcall	.+576    	; 0xc9a <I2C_write>
     a5a:	08 95       	ret

00000a5c <ssd1306_init>:
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	eb df       	rcall	.-42     	; 0xa3c <ssd1306_start_command>
     a66:	c4 e3       	ldi	r28, 0x34	; 52
     a68:	d0 e0       	ldi	r29, 0x00	; 0
     a6a:	04 e5       	ldi	r16, 0x54	; 84
     a6c:	10 e0       	ldi	r17, 0x00	; 0
     a6e:	fe 01       	movw	r30, r28
     a70:	84 91       	lpm	r24, Z
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	12 d1       	rcall	.+548    	; 0xc9a <I2C_write>
     a76:	21 96       	adiw	r28, 0x01	; 1
     a78:	c0 17       	cp	r28, r16
     a7a:	d1 07       	cpc	r29, r17
     a7c:	c1 f7       	brne	.-16     	; 0xa6e <ssd1306_init+0x12>
     a7e:	04 d1       	rcall	.+520    	; 0xc88 <I2C_stop>
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <ssd1306_setpos>:
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	c8 2f       	mov	r28, r24
     a90:	d6 2f       	mov	r29, r22
     a92:	d4 df       	rcall	.-88     	; 0xa3c <ssd1306_start_command>
     a94:	d7 70       	andi	r29, 0x07	; 7
     a96:	8d 2f       	mov	r24, r29
     a98:	80 6b       	ori	r24, 0xB0	; 176
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	fe d0       	rcall	.+508    	; 0xc9a <I2C_write>
     a9e:	8c 2f       	mov	r24, r28
     aa0:	8f 70       	andi	r24, 0x0F	; 15
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	fa d0       	rcall	.+500    	; 0xc9a <I2C_write>
     aa6:	c2 95       	swap	r28
     aa8:	cf 70       	andi	r28, 0x0F	; 15
     aaa:	8c 2f       	mov	r24, r28
     aac:	80 61       	ori	r24, 0x10	; 16
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	f4 d0       	rcall	.+488    	; 0xc9a <I2C_write>
     ab2:	ea d0       	rcall	.+468    	; 0xc88 <I2C_stop>
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <ssd1306_stop>:
     aba:	e6 d0       	rcall	.+460    	; 0xc88 <I2C_stop>
     abc:	08 95       	ret

00000abe <ssd1306_draw_bmp>:
     abe:	6f 92       	push	r6
     ac0:	7f 92       	push	r7
     ac2:	8f 92       	push	r8
     ac4:	9f 92       	push	r9
     ac6:	af 92       	push	r10
     ac8:	bf 92       	push	r11
     aca:	cf 92       	push	r12
     acc:	df 92       	push	r13
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	88 2e       	mov	r8, r24
     adc:	96 2e       	mov	r9, r22
     ade:	74 2e       	mov	r7, r20
     ae0:	62 2e       	mov	r6, r18
     ae2:	62 17       	cp	r22, r18
     ae4:	18 f5       	brcc	.+70     	; 0xb2c <ssd1306_draw_bmp+0x6e>
     ae6:	c1 2c       	mov	r12, r1
     ae8:	d1 2c       	mov	r13, r1
     aea:	aa 24       	eor	r10, r10
     aec:	aa 94       	dec	r10
     aee:	a4 0e       	add	r10, r20
     af0:	a8 1a       	sub	r10, r24
     af2:	b1 2c       	mov	r11, r1
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	a8 1a       	sub	r10, r24
     af8:	b8 0a       	sbc	r11, r24
     afa:	69 2d       	mov	r22, r9
     afc:	88 2d       	mov	r24, r8
     afe:	c5 df       	rcall	.-118    	; 0xa8a <ssd1306_setpos>
     b00:	a5 df       	rcall	.-182    	; 0xa4c <ssd1306_start_data>
     b02:	87 14       	cp	r8, r7
     b04:	80 f4       	brcc	.+32     	; 0xb26 <ssd1306_draw_bmp+0x68>
     b06:	e8 01       	movw	r28, r16
     b08:	cc 0d       	add	r28, r12
     b0a:	dd 1d       	adc	r29, r13
     b0c:	ca 0c       	add	r12, r10
     b0e:	db 1c       	adc	r13, r11
     b10:	78 01       	movw	r14, r16
     b12:	ec 0c       	add	r14, r12
     b14:	fd 1c       	adc	r15, r13
     b16:	fe 01       	movw	r30, r28
     b18:	84 91       	lpm	r24, Z
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	be d0       	rcall	.+380    	; 0xc9a <I2C_write>
     b1e:	21 96       	adiw	r28, 0x01	; 1
     b20:	ce 15       	cp	r28, r14
     b22:	df 05       	cpc	r29, r15
     b24:	c1 f7       	brne	.-16     	; 0xb16 <ssd1306_draw_bmp+0x58>
     b26:	93 94       	inc	r9
     b28:	96 14       	cp	r9, r6
     b2a:	38 f3       	brcs	.-50     	; 0xafa <ssd1306_draw_bmp+0x3c>
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	df 90       	pop	r13
     b3a:	cf 90       	pop	r12
     b3c:	bf 90       	pop	r11
     b3e:	af 90       	pop	r10
     b40:	9f 90       	pop	r9
     b42:	8f 90       	pop	r8
     b44:	7f 90       	pop	r7
     b46:	6f 90       	pop	r6
     b48:	08 95       	ret

00000b4a <ssd1306_clear_display>:
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	d0 e0       	ldi	r29, 0x00	; 0
     b50:	6d 2f       	mov	r22, r29
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	9a df       	rcall	.-204    	; 0xa8a <ssd1306_setpos>
     b56:	7a df       	rcall	.-268    	; 0xa4c <ssd1306_start_data>
     b58:	c0 e8       	ldi	r28, 0x80	; 128
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	9d d0       	rcall	.+314    	; 0xc9a <I2C_write>
     b60:	c1 50       	subi	r28, 0x01	; 1
     b62:	d9 f7       	brne	.-10     	; 0xb5a <ssd1306_clear_display+0x10>
     b64:	df 5f       	subi	r29, 0xFF	; 255
     b66:	d8 30       	cpi	r29, 0x08	; 8
     b68:	99 f7       	brne	.-26     	; 0xb50 <ssd1306_clear_display+0x6>
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <ssd1306tx_init>:
     b70:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <ssd1306tx_font_src+0x1>
     b74:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <ssd1306tx_font_src>
     b78:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <ssd1306tx_font_char_base>
     b7c:	08 95       	ret

00000b7e <ssd1306tx_stringxy>:

void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
     b7e:	8f 92       	push	r8
     b80:	9f 92       	push	r9
     b82:	af 92       	push	r10
     b84:	bf 92       	push	r11
     b86:	cf 92       	push	r12
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	6c 01       	movw	r12, r24
     b98:	96 2e       	mov	r9, r22
     b9a:	84 2e       	mov	r8, r20
	uint16_t j, k = 0;
	while (s[k] != '\0') {
     b9c:	f9 01       	movw	r30, r18
     b9e:	a0 80       	ld	r10, Z
     ba0:	aa 20       	and	r10, r10
     ba2:	09 f4       	brne	.+2      	; 0xba6 <ssd1306tx_stringxy+0x28>
     ba4:	44 c0       	rjmp	.+136    	; 0xc2e <ssd1306tx_stringxy+0xb0>
     ba6:	79 01       	movw	r14, r18
     ba8:	ff ef       	ldi	r31, 0xFF	; 255
     baa:	ef 1a       	sub	r14, r31
     bac:	ff 0a       	sbc	r15, r31
		j = s[k] * 16 - (32 * 16); // Convert ASCII code to font data index. NOTE: (x*16) already optimized to (x<<4).
     bae:	b1 2c       	mov	r11, r1
     bb0:	80 e2       	ldi	r24, 0x20	; 32
     bb2:	a8 1a       	sub	r10, r24
     bb4:	b1 08       	sbc	r11, r1
     bb6:	aa 0c       	add	r10, r10
     bb8:	bb 1c       	adc	r11, r11
     bba:	aa 0c       	add	r10, r10
     bbc:	bb 1c       	adc	r11, r11
     bbe:	aa 0c       	add	r10, r10
     bc0:	bb 1c       	adc	r11, r11
     bc2:	aa 0c       	add	r10, r10
     bc4:	bb 1c       	adc	r11, r11
		if (x > 120) {
     bc6:	e8 e7       	ldi	r30, 0x78	; 120
     bc8:	e9 15       	cp	r30, r9
     bca:	10 f4       	brcc	.+4      	; 0xbd0 <ssd1306tx_stringxy+0x52>
			x = 0;    // Go to the next line.
			y++;
     bcc:	83 94       	inc	r8
void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
	uint16_t j, k = 0;
	while (s[k] != '\0') {
		j = s[k] * 16 - (32 * 16); // Convert ASCII code to font data index. NOTE: (x*16) already optimized to (x<<4).
		if (x > 120) {
			x = 0;    // Go to the next line.
     bce:	91 2c       	mov	r9, r1
			y++;
		}
		ssd1306_setpos(x, y);
     bd0:	68 2d       	mov	r22, r8
     bd2:	89 2d       	mov	r24, r9
     bd4:	5a df       	rcall	.-332    	; 0xa8a <ssd1306_setpos>
		ssd1306_start_data();
     bd6:	3a df       	rcall	.-396    	; 0xa4c <ssd1306_start_data>
     bd8:	86 01       	movw	r16, r12
     bda:	0a 0d       	add	r16, r10
     bdc:	1b 1d       	adc	r17, r11
     bde:	e5 01       	movw	r28, r10
     be0:	28 96       	adiw	r28, 0x08	; 8
     be2:	cc 0d       	add	r28, r12
     be4:	dd 1d       	adc	r29, r13
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
     be6:	f8 01       	movw	r30, r16
     be8:	84 91       	lpm	r24, Z
	}
	I2C_stop();	// Finish transmission
}

void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	56 d0       	rcall	.+172    	; 0xc9a <I2C_write>
     bee:	0f 5f       	subi	r16, 0xFF	; 255
     bf0:	1f 4f       	sbci	r17, 0xFF	; 255
			x = 0;    // Go to the next line.
			y++;
		}
		ssd1306_setpos(x, y);
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
     bf2:	0c 17       	cp	r16, r28
     bf4:	1d 07       	cpc	r17, r29
     bf6:	b9 f7       	brne	.-18     	; 0xbe6 <ssd1306tx_stringxy+0x68>
void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
}

void ssd1306_stop(void) {
	I2C_stop();
     bf8:	47 d0       	rcall	.+142    	; 0xc88 <I2C_stop>
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
		}
		ssd1306_stop();
		ssd1306_setpos(x, y + 1);
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	68 0d       	add	r22, r8
     bfe:	89 2d       	mov	r24, r9
     c00:	44 df       	rcall	.-376    	; 0xa8a <ssd1306_setpos>
		ssd1306_start_data();
     c02:	24 df       	rcall	.-440    	; 0xa4c <ssd1306_start_data>
     c04:	85 01       	movw	r16, r10
     c06:	00 5f       	subi	r16, 0xF0	; 240
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
     c0a:	0c 0d       	add	r16, r12
     c0c:	1d 1d       	adc	r17, r13
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i + 8]));
     c0e:	fe 01       	movw	r30, r28
     c10:	84 91       	lpm	r24, Z
	}
	I2C_stop();	// Finish transmission
}

void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	42 d0       	rcall	.+132    	; 0xc9a <I2C_write>
     c16:	21 96       	adiw	r28, 0x01	; 1
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
		}
		ssd1306_stop();
		ssd1306_setpos(x, y + 1);
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
     c18:	c0 17       	cp	r28, r16
     c1a:	d1 07       	cpc	r29, r17
     c1c:	c1 f7       	brne	.-16     	; 0xc0e <ssd1306tx_stringxy+0x90>
void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
}

void ssd1306_stop(void) {
	I2C_stop();
     c1e:	34 d0       	rcall	.+104    	; 0xc88 <I2C_stop>
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i + 8]));
		}
		ssd1306_stop();
		x += 8;
     c20:	f8 e0       	ldi	r31, 0x08	; 8
     c22:	9f 0e       	add	r9, r31
	}
}

void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
	uint16_t j, k = 0;
	while (s[k] != '\0') {
     c24:	f7 01       	movw	r30, r14
     c26:	a1 90       	ld	r10, Z+
     c28:	7f 01       	movw	r14, r30
     c2a:	a1 10       	cpse	r10, r1
     c2c:	c0 cf       	rjmp	.-128    	; 0xbae <ssd1306tx_stringxy+0x30>
		}
		ssd1306_stop();
		x += 8;
		k++;
	}
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	bf 90       	pop	r11
     c40:	af 90       	pop	r10
     c42:	9f 90       	pop	r9
     c44:	8f 90       	pop	r8
     c46:	08 95       	ret

00000c48 <I2C_Initialize>:
{
	//TWSR |= 0x00; // Set prescaler to 1

	uint8_t bitrate_div;

	bitrate_div = ((F_CPU/1000l)/bitRate_kHz);
     c48:	9c 01       	movw	r18, r24
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	60 e4       	ldi	r22, 0x40	; 64
     c50:	7f e1       	ldi	r23, 0x1F	; 31
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	7c d5       	rcall	.+2808   	; 0x1750 <__divmodsi4>
     c58:	82 2f       	mov	r24, r18
	
	if(bitrate_div >= 16)
     c5a:	20 31       	cpi	r18, 0x10	; 16
     c5c:	48 f0       	brcs	.+18     	; 0xc70 <I2C_Initialize+0x28>
	bitrate_div = (bitrate_div-16)/2;
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	20 51       	subi	r18, 0x10	; 16
     c62:	31 09       	sbc	r19, r1
     c64:	c9 01       	movw	r24, r18
     c66:	99 23       	and	r25, r25
     c68:	0c f4       	brge	.+2      	; 0xc6c <I2C_Initialize+0x24>
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	95 95       	asr	r25
     c6e:	87 95       	ror	r24
	
	TWBR = bitrate_div;
     c70:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     c74:	08 95       	ret

00000c76 <I2C_start>:
}

void I2C_start(void){
	TWCR = (1<<TWINT) | (1<<TWEN) |( 1<<TWSTA);
     c76:	84 ea       	ldi	r24, 0xA4	; 164
     c78:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWINT)));
     c7c:	ec eb       	ldi	r30, 0xBC	; 188
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	88 23       	and	r24, r24
     c84:	ec f7       	brge	.-6      	; 0xc80 <I2C_start+0xa>
}
     c86:	08 95       	ret

00000c88 <I2C_stop>:

void I2C_stop(void){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     c88:	84 e9       	ldi	r24, 0x94	; 148
     c8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWSTO)));
     c8e:	ec eb       	ldi	r30, 0xBC	; 188
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	84 ff       	sbrs	r24, 4
     c96:	fd cf       	rjmp	.-6      	; 0xc92 <I2C_stop+0xa>
}
     c98:	08 95       	ret

00000c9a <I2C_write>:

void I2C_write(uint8_t dane){
	TWDR = dane;
     c9a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     c9e:	84 e8       	ldi	r24, 0x84	; 132
     ca0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWINT)));
     ca4:	ec eb       	ldi	r30, 0xBC	; 188
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	88 23       	and	r24, r24
     cac:	ec f7       	brge	.-6      	; 0xca8 <I2C_write+0xe>
}
     cae:	08 95       	ret

00000cb0 <display_init>:

void draw_new_string(int xstart, int ystart, char* str)
{
	ssd1306_clear_display();
	draw_string(xstart,ystart,str);
}
     cb0:	84 e6       	ldi	r24, 0x64	; 100
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	c9 df       	rcall	.-110    	; 0xc48 <I2C_Initialize>
     cb6:	d2 de       	rcall	.-604    	; 0xa5c <ssd1306_init>
     cb8:	60 e2       	ldi	r22, 0x20	; 32
     cba:	84 e1       	ldi	r24, 0x14	; 20
     cbc:	94 e0       	ldi	r25, 0x04	; 4
     cbe:	58 df       	rcall	.-336    	; 0xb70 <ssd1306tx_init>
     cc0:	bd de       	rcall	.-646    	; 0xa3c <ssd1306_start_command>
     cc2:	86 ea       	ldi	r24, 0xA6	; 166
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	e9 df       	rcall	.-46     	; 0xc9a <I2C_write>
     cc8:	f8 de       	rcall	.-528    	; 0xaba <ssd1306_stop>
     cca:	3f df       	rcall	.-386    	; 0xb4a <ssd1306_clear_display>
     ccc:	08 95       	ret

00000cce <numberToCharArray>:
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	d9 f0       	breq	.+54     	; 0xd08 <numberToCharArray+0x3a>
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	91 05       	cpc	r25, r1
     cd6:	d9 f0       	breq	.+54     	; 0xd0e <numberToCharArray+0x40>
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	91 05       	cpc	r25, r1
     cdc:	d9 f0       	breq	.+54     	; 0xd14 <numberToCharArray+0x46>
     cde:	83 30       	cpi	r24, 0x03	; 3
     ce0:	91 05       	cpc	r25, r1
     ce2:	d9 f0       	breq	.+54     	; 0xd1a <numberToCharArray+0x4c>
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	91 05       	cpc	r25, r1
     ce8:	d9 f0       	breq	.+54     	; 0xd20 <numberToCharArray+0x52>
     cea:	85 30       	cpi	r24, 0x05	; 5
     cec:	91 05       	cpc	r25, r1
     cee:	d9 f0       	breq	.+54     	; 0xd26 <numberToCharArray+0x58>
     cf0:	86 30       	cpi	r24, 0x06	; 6
     cf2:	91 05       	cpc	r25, r1
     cf4:	d9 f0       	breq	.+54     	; 0xd2c <numberToCharArray+0x5e>
     cf6:	87 30       	cpi	r24, 0x07	; 7
     cf8:	91 05       	cpc	r25, r1
     cfa:	d9 f0       	breq	.+54     	; 0xd32 <numberToCharArray+0x64>
     cfc:	88 30       	cpi	r24, 0x08	; 8
     cfe:	91 05       	cpc	r25, r1
     d00:	d9 f0       	breq	.+54     	; 0xd38 <numberToCharArray+0x6a>
     d02:	09 97       	sbiw	r24, 0x09	; 9
     d04:	e1 f0       	breq	.+56     	; 0xd3e <numberToCharArray+0x70>
     d06:	08 95       	ret
     d08:	24 eb       	ldi	r18, 0xB4	; 180
     d0a:	33 e0       	ldi	r19, 0x03	; 3
     d0c:	1a c0       	rjmp	.+52     	; 0xd42 <numberToCharArray+0x74>
     d0e:	24 e5       	ldi	r18, 0x54	; 84
     d10:	33 e0       	ldi	r19, 0x03	; 3
     d12:	17 c0       	rjmp	.+46     	; 0xd42 <numberToCharArray+0x74>
     d14:	24 ef       	ldi	r18, 0xF4	; 244
     d16:	32 e0       	ldi	r19, 0x02	; 2
     d18:	14 c0       	rjmp	.+40     	; 0xd42 <numberToCharArray+0x74>
     d1a:	24 e9       	ldi	r18, 0x94	; 148
     d1c:	32 e0       	ldi	r19, 0x02	; 2
     d1e:	11 c0       	rjmp	.+34     	; 0xd42 <numberToCharArray+0x74>
     d20:	24 e3       	ldi	r18, 0x34	; 52
     d22:	32 e0       	ldi	r19, 0x02	; 2
     d24:	0e c0       	rjmp	.+28     	; 0xd42 <numberToCharArray+0x74>
     d26:	24 ed       	ldi	r18, 0xD4	; 212
     d28:	31 e0       	ldi	r19, 0x01	; 1
     d2a:	0b c0       	rjmp	.+22     	; 0xd42 <numberToCharArray+0x74>
     d2c:	24 e7       	ldi	r18, 0x74	; 116
     d2e:	31 e0       	ldi	r19, 0x01	; 1
     d30:	08 c0       	rjmp	.+16     	; 0xd42 <numberToCharArray+0x74>
     d32:	24 e1       	ldi	r18, 0x14	; 20
     d34:	31 e0       	ldi	r19, 0x01	; 1
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <numberToCharArray+0x74>
     d38:	24 eb       	ldi	r18, 0xB4	; 180
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <numberToCharArray+0x74>
     d3e:	24 e5       	ldi	r18, 0x54	; 84
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	82 2f       	mov	r24, r18
     d44:	93 2f       	mov	r25, r19
     d46:	08 95       	ret

00000d48 <draw_digit>:
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	c8 2f       	mov	r28, r24
     d52:	d6 2f       	mov	r29, r22
     d54:	ca 01       	movw	r24, r20
     d56:	bb df       	rcall	.-138    	; 0xcce <numberToCharArray>
     d58:	24 e0       	ldi	r18, 0x04	; 4
     d5a:	2d 0f       	add	r18, r29
     d5c:	48 e1       	ldi	r20, 0x18	; 24
     d5e:	4c 0f       	add	r20, r28
     d60:	8c 01       	movw	r16, r24
     d62:	6d 2f       	mov	r22, r29
     d64:	8c 2f       	mov	r24, r28
     d66:	ab de       	rcall	.-682    	; 0xabe <ssd1306_draw_bmp>
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	08 95       	ret

00000d72 <draw_number>:
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	8c 01       	movw	r16, r24
     d80:	7b 01       	movw	r14, r22
     d82:	ea 01       	movw	r28, r20
     d84:	44 36       	cpi	r20, 0x64	; 100
     d86:	51 05       	cpc	r21, r1
     d88:	a4 f4       	brge	.+40     	; 0xdb2 <draw_number+0x40>
     d8a:	4a 30       	cpi	r20, 0x0A	; 10
     d8c:	51 05       	cpc	r21, r1
     d8e:	3c f0       	brlt	.+14     	; 0xd9e <draw_number+0x2c>
     d90:	ca 01       	movw	r24, r20
     d92:	6a e0       	ldi	r22, 0x0A	; 10
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	c9 d4       	rcall	.+2450   	; 0x172a <__divmodhi4>
     d98:	ab 01       	movw	r20, r22
     d9a:	ec 01       	movw	r28, r24
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <draw_number+0x30>
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	b7 01       	movw	r22, r14
     da4:	c8 01       	movw	r24, r16
     da6:	d0 df       	rcall	.-96     	; 0xd48 <draw_digit>
     da8:	ae 01       	movw	r20, r28
     daa:	b7 01       	movw	r22, r14
     dac:	c8 01       	movw	r24, r16
     dae:	48 96       	adiw	r24, 0x18	; 24
     db0:	cb df       	rcall	.-106    	; 0xd48 <draw_digit>
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	08 95       	ret

00000dc0 <draw_string>:
     dc0:	9a 01       	movw	r18, r20
     dc2:	46 2f       	mov	r20, r22
     dc4:	68 2f       	mov	r22, r24
     dc6:	84 e1       	ldi	r24, 0x14	; 20
     dc8:	94 e0       	ldi	r25, 0x04	; 4
     dca:	d9 de       	rcall	.-590    	; 0xb7e <ssd1306tx_stringxy>
     dcc:	08 95       	ret

00000dce <draw_clock>:

void draw_clock(int xstart, int ystart, int hours, int minutes, int seconds, bool displayHour, bool displayMinute, bool displaySecond)
{
     dce:	4f 92       	push	r4
     dd0:	5f 92       	push	r5
     dd2:	6f 92       	push	r6
     dd4:	7f 92       	push	r7
     dd6:	8f 92       	push	r8
     dd8:	9f 92       	push	r9
     dda:	af 92       	push	r10
     ddc:	cf 92       	push	r12
     dde:	ef 92       	push	r14
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	00 d0       	rcall	.+0      	; 0xdea <draw_clock+0x1c>
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	3c 01       	movw	r6, r24
     df0:	4b 01       	movw	r8, r22
     df2:	29 01       	movw	r4, r18
	if(displayHour == 1)
     df4:	e1 10       	cpse	r14, r1
	{
		draw_number(xstart,ystart, hours);
     df6:	bd df       	rcall	.-134    	; 0xd72 <draw_number>
	}
	
	draw_string(xstart +48, ystart +1, ":");
     df8:	46 e0       	ldi	r20, 0x06	; 6
     dfa:	51 e0       	ldi	r21, 0x01	; 1
     dfc:	b4 01       	movw	r22, r8
     dfe:	6f 5f       	subi	r22, 0xFF	; 255
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	c3 01       	movw	r24, r6
     e04:	c0 96       	adiw	r24, 0x30	; 48
     e06:	dc df       	rcall	.-72     	; 0xdc0 <draw_string>
	
	if(displayMinute == 1)
     e08:	cc 20       	and	r12, r12
     e0a:	29 f0       	breq	.+10     	; 0xe16 <draw_clock+0x48>
	{	
		draw_number(xstart + 60, ystart, minutes);
     e0c:	a2 01       	movw	r20, r4
     e0e:	b4 01       	movw	r22, r8
     e10:	c3 01       	movw	r24, r6
     e12:	cc 96       	adiw	r24, 0x3c	; 60
     e14:	ae df       	rcall	.-164    	; 0xd72 <draw_number>
	}
	
	if(displaySecond == 1)
     e16:	aa 20       	and	r10, r10
     e18:	81 f1       	breq	.+96     	; 0xe7a <draw_clock+0xac>
	{
		char seconds_as_char[2];
		
		if(seconds < 10)
     e1a:	0a 30       	cpi	r16, 0x0A	; 10
     e1c:	11 05       	cpc	r17, r1
     e1e:	94 f4       	brge	.+36     	; 0xe44 <draw_clock+0x76>
		sprintf(seconds_as_char, "0%d", seconds);
     e20:	1f 93       	push	r17
     e22:	0f 93       	push	r16
     e24:	88 e0       	ldi	r24, 0x08	; 8
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	9f 93       	push	r25
     e2a:	8f 93       	push	r24
     e2c:	ce 01       	movw	r24, r28
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	9f 93       	push	r25
     e32:	8f 93       	push	r24
     e34:	df d4       	rcall	.+2494   	; 0x17f4 <sprintf>
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	11 c0       	rjmp	.+34     	; 0xe66 <draw_clock+0x98>
		else
		sprintf(seconds_as_char, "%d", seconds);
     e44:	1f 93       	push	r17
     e46:	0f 93       	push	r16
     e48:	89 e0       	ldi	r24, 0x09	; 9
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	9f 93       	push	r25
     e4e:	8f 93       	push	r24
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	9f 93       	push	r25
     e56:	8f 93       	push	r24
     e58:	cd d4       	rcall	.+2458   	; 0x17f4 <sprintf>
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
		
		if(displaySecond == 1)
		draw_string(xstart + 110, ystart + 8,seconds_as_char);
     e66:	b4 01       	movw	r22, r8
     e68:	68 5f       	subi	r22, 0xF8	; 248
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	ae 01       	movw	r20, r28
     e6e:	4f 5f       	subi	r20, 0xFF	; 255
     e70:	5f 4f       	sbci	r21, 0xFF	; 255
     e72:	c3 01       	movw	r24, r6
     e74:	82 59       	subi	r24, 0x92	; 146
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	a3 df       	rcall	.-186    	; 0xdc0 <draw_string>
	}
}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ef 90       	pop	r14
     e88:	cf 90       	pop	r12
     e8a:	af 90       	pop	r10
     e8c:	9f 90       	pop	r9
     e8e:	8f 90       	pop	r8
     e90:	7f 90       	pop	r7
     e92:	6f 90       	pop	r6
     e94:	5f 90       	pop	r5
     e96:	4f 90       	pop	r4
     e98:	08 95       	ret

00000e9a <clock_set_minute_confirm>:
	timer_add_minute();
}

void timer_set_minute_subtract()
{
	timer_subtract_minute();
     e9a:	30 d2       	rcall	.+1120   	; 0x12fc <clock_save>
     e9c:	8a e0       	ldi	r24, 0x0A	; 10
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     ea4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     ea8:	08 95       	ret

00000eaa <timer_view>:
     eaa:	e6 d2       	rcall	.+1484   	; 0x1478 <timer_is_running>
     eac:	81 11       	cpse	r24, r1
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <timer_view+0x8>
     eb0:	e6 d2       	rcall	.+1484   	; 0x147e <timer_reset>
     eb2:	8e e1       	ldi	r24, 0x1E	; 30
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     eba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     ebe:	08 95       	ret

00000ec0 <timer_set_minute_confirm>:
}

void timer_set_minute_confirm()
{
	timer_run();
     ec0:	23 d3       	rcall	.+1606   	; 0x1508 <timer_run>
	timer_view();
     ec2:	f3 df       	rcall	.-26     	; 0xeaa <timer_view>
     ec4:	08 95       	ret

00000ec6 <temperature_view>:
}

void temperature_view()
{
	selectedMenu = MENU_TEMPEREATURE;
     ec6:	82 e3       	ldi	r24, 0x32	; 50
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     ece:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	draw_string(0, 0, "TEMPERATURE");
     ed2:	4c e0       	ldi	r20, 0x0C	; 12
     ed4:	51 e0       	ldi	r21, 0x01	; 1
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	70 df       	rcall	.-288    	; 0xdc0 <draw_string>
     ee0:	08 95       	ret

00000ee2 <dashboard_view>:
}

void dashboard_view()
{
	selectedMenu = MENU_DASHBOARD;
     ee2:	8c e3       	ldi	r24, 0x3C	; 60
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     eea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	draw_string(0, 0, "DASHBOARD");
     eee:	48 e1       	ldi	r20, 0x18	; 24
     ef0:	51 e0       	ldi	r21, 0x01	; 1
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	62 df       	rcall	.-316    	; 0xdc0 <draw_string>
     efc:	08 95       	ret

00000efe <refresh_screen>:
	_delay_ms(200);
}

void refresh_screen()
{
	if(selectedMenu == MENU_CLOCK)
     efe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f02:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f06:	8a 30       	cpi	r24, 0x0A	; 10
     f08:	91 05       	cpc	r25, r1
     f0a:	11 f4       	brne	.+4      	; 0xf10 <refresh_screen+0x12>
		display_clock_view();
     f0c:	31 d2       	rcall	.+1122   	; 0x1370 <display_clock_view>
     f0e:	08 95       	ret
	else if (selectedMenu == MENU_CLOCK_SET_HOUR)
     f10:	84 31       	cpi	r24, 0x14	; 20
     f12:	91 05       	cpc	r25, r1
     f14:	11 f4       	brne	.+4      	; 0xf1a <refresh_screen+0x1c>
		display_clock_hour_set_view();
     f16:	50 d2       	rcall	.+1184   	; 0x13b8 <display_clock_hour_set_view>
     f18:	08 95       	ret
	else if (selectedMenu == MENU_CLOCK_SET_MINUTE)
     f1a:	85 31       	cpi	r24, 0x15	; 21
     f1c:	91 05       	cpc	r25, r1
     f1e:	11 f4       	brne	.+4      	; 0xf24 <refresh_screen+0x26>
		display_clock_minute_set_view();
     f20:	6c d2       	rcall	.+1240   	; 0x13fa <display_clock_minute_set_view>
     f22:	08 95       	ret
	else if (selectedMenu == MENU_TIMER)
     f24:	8e 31       	cpi	r24, 0x1E	; 30
     f26:	91 05       	cpc	r25, r1
     f28:	11 f4       	brne	.+4      	; 0xf2e <refresh_screen+0x30>
		display_timer_view();
     f2a:	d2 d3       	rcall	.+1956   	; 0x16d0 <display_timer_view>
     f2c:	08 95       	ret
	else if (selectedMenu == MENU_TIMER_SET_HOUR)
     f2e:	88 32       	cpi	r24, 0x28	; 40
     f30:	91 05       	cpc	r25, r1
     f32:	11 f4       	brne	.+4      	; 0xf38 <refresh_screen+0x3a>
		display_timer_hour_set_view();
     f34:	dc d3       	rcall	.+1976   	; 0x16ee <display_timer_hour_set_view>
     f36:	08 95       	ret
	else if (selectedMenu == MENU_TIMER_SET_MINUTE)
     f38:	89 32       	cpi	r24, 0x29	; 41
     f3a:	91 05       	cpc	r25, r1
     f3c:	11 f4       	brne	.+4      	; 0xf42 <refresh_screen+0x44>
		display_timer_minute_set_view();
     f3e:	e6 d3       	rcall	.+1996   	; 0x170c <display_timer_minute_set_view>
     f40:	08 95       	ret
	else if (selectedMenu == MENU_TEMPEREATURE)
     f42:	82 33       	cpi	r24, 0x32	; 50
     f44:	91 05       	cpc	r25, r1
     f46:	11 f4       	brne	.+4      	; 0xf4c <refresh_screen+0x4e>
		temperature_view();
     f48:	be df       	rcall	.-132    	; 0xec6 <temperature_view>
     f4a:	08 95       	ret
	else if (selectedMenu == MENU_DASHBOARD)
     f4c:	cc 97       	sbiw	r24, 0x3c	; 60
     f4e:	09 f4       	brne	.+2      	; 0xf52 <refresh_screen+0x54>
		dashboard_view();
     f50:	c8 df       	rcall	.-112    	; 0xee2 <dashboard_view>
     f52:	08 95       	ret

00000f54 <switch_menu>:
}

void switch_menu()
{
	//Clock
	if(BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK)
     f54:	33 99       	sbic	0x06, 3	; 6
     f56:	0d c0       	rjmp	.+26     	; 0xf72 <switch_menu+0x1e>
     f58:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f5c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f60:	0a 97       	sbiw	r24, 0x0a	; 10
     f62:	39 f4       	brne	.+14     	; 0xf72 <switch_menu+0x1e>
	selectedMenu = MENU_CLOCK;
}

void clock_set_hour()
{
	selectedMenu = MENU_CLOCK_SET_HOUR;
     f64:	84 e1       	ldi	r24, 0x14	; 20
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     f6c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     f70:	08 95       	ret
	//Clock
	if(BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK)
	clock_set_hour();

	//Clock set hour
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     f72:	33 99       	sbic	0x06, 3	; 6
     f74:	08 c0       	rjmp	.+16     	; 0xf86 <switch_menu+0x32>
     f76:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f7a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f7e:	44 97       	sbiw	r24, 0x14	; 20
     f80:	11 f4       	brne	.+4      	; 0xf86 <switch_menu+0x32>
	selectedMenu = MENU_CLOCK_SET_HOUR;
}

void clock_set_hour_add()
{
	clock_add_hour();
     f82:	94 d1       	rcall	.+808    	; 0x12ac <clock_add_hour>
     f84:	08 95       	ret

	//Clock set hour
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
	clock_set_hour_add();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     f86:	32 99       	sbic	0x06, 2	; 6
     f88:	09 c0       	rjmp	.+18     	; 0xf9c <switch_menu+0x48>
     f8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f8e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f92:	44 97       	sbiw	r24, 0x14	; 20
     f94:	09 f0       	breq	.+2      	; 0xf98 <switch_menu+0x44>
     f96:	d9 c0       	rjmp	.+434    	; 0x114a <switch_menu+0x1f6>
	clock_add_hour();
}

void clock_set_hour_subtract()
{
	clock_subtract_hour();
     f98:	9d d1       	rcall	.+826    	; 0x12d4 <clock_subtract_hour>
     f9a:	08 95       	ret
	clock_set_hour_add();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
	clock_set_hour_subtract();
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     f9c:	1a 99       	sbic	0x03, 2	; 3
     f9e:	0e c0       	rjmp	.+28     	; 0xfbc <switch_menu+0x68>
     fa0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fa4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     fa8:	44 97       	sbiw	r24, 0x14	; 20
     faa:	09 f0       	breq	.+2      	; 0xfae <switch_menu+0x5a>
     fac:	c6 c0       	rjmp	.+396    	; 0x113a <switch_menu+0x1e6>
	clock_subtract_hour();
}

void clock_set_hour_confirm()
{
	selectedMenu = MENU_CLOCK_SET_MINUTE;
     fae:	85 e1       	ldi	r24, 0x15	; 21
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     fb6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     fba:	08 95       	ret
	clock_set_hour_subtract();
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
	clock_set_hour_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     fbc:	19 99       	sbic	0x03, 1	; 3
     fbe:	0d c0       	rjmp	.+26     	; 0xfda <switch_menu+0x86>
     fc0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fc4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     fc8:	44 97       	sbiw	r24, 0x14	; 20
     fca:	39 f4       	brne	.+14     	; 0xfda <switch_menu+0x86>
	dashboard_view();
}

void clock_view()
{
	selectedMenu = MENU_CLOCK;
     fcc:	8a e0       	ldi	r24, 0x0A	; 10
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     fd4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     fd8:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
	clock_view();

	//Clock set minute
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     fda:	33 99       	sbic	0x06, 3	; 6
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <switch_menu+0x9a>
     fde:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fe2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     fe6:	45 97       	sbiw	r24, 0x15	; 21
     fe8:	11 f4       	brne	.+4      	; 0xfee <switch_menu+0x9a>
	selectedMenu = MENU_CLOCK_SET_MINUTE;
}

void clock_set_minute_add()
{
	clock_add_minute();
     fea:	6a d1       	rcall	.+724    	; 0x12c0 <clock_add_minute>
     fec:	08 95       	ret

	//Clock set minute
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
	clock_set_minute_add();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     fee:	32 99       	sbic	0x06, 2	; 6
     ff0:	09 c0       	rjmp	.+18     	; 0x1004 <switch_menu+0xb0>
     ff2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ff6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ffa:	45 97       	sbiw	r24, 0x15	; 21
     ffc:	09 f0       	breq	.+2      	; 0x1000 <switch_menu+0xac>
     ffe:	a8 c0       	rjmp	.+336    	; 0x1150 <switch_menu+0x1fc>
	clock_add_minute();
}

void clock_set_minute_subtract()
{
	clock_subtract_minute();
    1000:	73 d1       	rcall	.+742    	; 0x12e8 <clock_subtract_minute>
    1002:	08 95       	ret
	clock_set_minute_add();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
	clock_set_minute_subtract();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
    1004:	1a 99       	sbic	0x03, 2	; 3
    1006:	09 c0       	rjmp	.+18     	; 0x101a <switch_menu+0xc6>
    1008:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    100c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1010:	45 97       	sbiw	r24, 0x15	; 21
    1012:	09 f0       	breq	.+2      	; 0x1016 <switch_menu+0xc2>
    1014:	94 c0       	rjmp	.+296    	; 0x113e <switch_menu+0x1ea>
	clock_set_minute_confirm();
    1016:	41 df       	rcall	.-382    	; 0xe9a <clock_set_minute_confirm>
    1018:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
    101a:	19 99       	sbic	0x03, 1	; 3
    101c:	0d c0       	rjmp	.+26     	; 0x1038 <switch_menu+0xe4>
    101e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1022:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1026:	45 97       	sbiw	r24, 0x15	; 21
    1028:	39 f4       	brne	.+14     	; 0x1038 <switch_menu+0xe4>
	selectedMenu = MENU_CLOCK;
}

void clock_set_hour()
{
	selectedMenu = MENU_CLOCK_SET_HOUR;
    102a:	84 e1       	ldi	r24, 0x14	; 20
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1032:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1036:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
	clock_set_hour();
	
	//Timer
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER)
    1038:	32 99       	sbic	0x06, 2	; 6
    103a:	0d c0       	rjmp	.+26     	; 0x1056 <switch_menu+0x102>
    103c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1040:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1044:	4e 97       	sbiw	r24, 0x1e	; 30
    1046:	39 f4       	brne	.+14     	; 0x1056 <switch_menu+0x102>
	selectedMenu = MENU_TIMER;
}

void timer_set_hour()
{
	selectedMenu = MENU_TIMER_SET_HOUR;
    1048:	88 e2       	ldi	r24, 0x28	; 40
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1050:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1054:	08 95       	ret
	//Timer
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER)
	timer_set_hour();
	
	//Timer set hour
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
    1056:	33 99       	sbic	0x06, 3	; 6
    1058:	08 c0       	rjmp	.+16     	; 0x106a <switch_menu+0x116>
    105a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    105e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1062:	88 97       	sbiw	r24, 0x28	; 40
    1064:	11 f4       	brne	.+4      	; 0x106a <switch_menu+0x116>
	selectedMenu = MENU_TIMER_SET_HOUR;
}

void timer_set_hour_add()
{
	timer_add_hour();
    1066:	28 d2       	rcall	.+1104   	; 0x14b8 <timer_add_hour>
    1068:	08 95       	ret
	
	//Timer set hour
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
	timer_set_hour_add();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
    106a:	32 99       	sbic	0x06, 2	; 6
    106c:	09 c0       	rjmp	.+18     	; 0x1080 <switch_menu+0x12c>
    106e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1072:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1076:	88 97       	sbiw	r24, 0x28	; 40
    1078:	09 f0       	breq	.+2      	; 0x107c <switch_menu+0x128>
    107a:	6d c0       	rjmp	.+218    	; 0x1156 <switch_menu+0x202>
	timer_add_hour();
}

void timer_set_hour_subtract()
{
	timer_subtract_hour();
    107c:	31 d2       	rcall	.+1122   	; 0x14e0 <timer_subtract_hour>
    107e:	08 95       	ret
	timer_set_hour_add();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
	timer_set_hour_subtract();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
    1080:	1a 99       	sbic	0x03, 2	; 3
    1082:	0e c0       	rjmp	.+28     	; 0x10a0 <switch_menu+0x14c>
    1084:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1088:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    108c:	88 97       	sbiw	r24, 0x28	; 40
    108e:	09 f0       	breq	.+2      	; 0x1092 <switch_menu+0x13e>
    1090:	58 c0       	rjmp	.+176    	; 0x1142 <switch_menu+0x1ee>
	timer_subtract_hour();
}

void timer_set_hour_confirm()
{
	selectedMenu = MENU_TIMER_SET_MINUTE;
    1092:	89 e2       	ldi	r24, 0x29	; 41
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    109a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    109e:	08 95       	ret
	timer_set_hour_subtract();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
	timer_set_hour_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
    10a0:	19 99       	sbic	0x03, 1	; 3
    10a2:	08 c0       	rjmp	.+16     	; 0x10b4 <switch_menu+0x160>
    10a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    10a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    10ac:	88 97       	sbiw	r24, 0x28	; 40
    10ae:	11 f4       	brne	.+4      	; 0x10b4 <switch_menu+0x160>
	timer_view();
    10b0:	fc de       	rcall	.-520    	; 0xeaa <timer_view>
    10b2:	08 95       	ret

	//Timer set minute
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
    10b4:	33 99       	sbic	0x06, 3	; 6
    10b6:	08 c0       	rjmp	.+16     	; 0x10c8 <switch_menu+0x174>
    10b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    10bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    10c0:	89 97       	sbiw	r24, 0x29	; 41
    10c2:	11 f4       	brne	.+4      	; 0x10c8 <switch_menu+0x174>
	selectedMenu = MENU_TIMER_SET_MINUTE;
}

void timer_set_minute_add()
{
	timer_add_minute();
    10c4:	03 d2       	rcall	.+1030   	; 0x14cc <timer_add_minute>
    10c6:	08 95       	ret

	//Timer set minute
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
	timer_set_minute_add();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
    10c8:	32 99       	sbic	0x06, 2	; 6
    10ca:	09 c0       	rjmp	.+18     	; 0x10de <switch_menu+0x18a>
    10cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    10d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    10d4:	89 97       	sbiw	r24, 0x29	; 41
    10d6:	09 f0       	breq	.+2      	; 0x10da <switch_menu+0x186>
    10d8:	41 c0       	rjmp	.+130    	; 0x115c <switch_menu+0x208>
	timer_add_minute();
}

void timer_set_minute_subtract()
{
	timer_subtract_minute();
    10da:	0c d2       	rcall	.+1048   	; 0x14f4 <timer_subtract_minute>
    10dc:	08 95       	ret
	timer_set_minute_add();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
	timer_set_minute_subtract();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
    10de:	1a 99       	sbic	0x03, 2	; 3
    10e0:	08 c0       	rjmp	.+16     	; 0x10f2 <switch_menu+0x19e>
    10e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    10e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    10ea:	89 97       	sbiw	r24, 0x29	; 41
    10ec:	61 f5       	brne	.+88     	; 0x1146 <switch_menu+0x1f2>
	timer_set_minute_confirm();
    10ee:	e8 de       	rcall	.-560    	; 0xec0 <timer_set_minute_confirm>
    10f0:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
    10f2:	19 99       	sbic	0x03, 1	; 3
    10f4:	0d c0       	rjmp	.+26     	; 0x1110 <switch_menu+0x1bc>
    10f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    10fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    10fe:	89 97       	sbiw	r24, 0x29	; 41
    1100:	39 f4       	brne	.+14     	; 0x1110 <switch_menu+0x1bc>
	selectedMenu = MENU_TIMER;
}

void timer_set_hour()
{
	selectedMenu = MENU_TIMER_SET_HOUR;
    1102:	88 e2       	ldi	r24, 0x28	; 40
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    110a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    110e:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
	timer_set_hour();
	
	//Basic menu
	else if(BUTTON_1_PRESSED)
    1110:	33 99       	sbic	0x06, 3	; 6
    1112:	07 c0       	rjmp	.+14     	; 0x1122 <switch_menu+0x1ce>
	dashboard_view();
}

void clock_view()
{
	selectedMenu = MENU_CLOCK;
    1114:	8a e0       	ldi	r24, 0x0A	; 10
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    111c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1120:	08 95       	ret
	
	//Basic menu
	else if(BUTTON_1_PRESSED)
	clock_view();
	
	else if (BUTTON_2_PRESSED)
    1122:	32 99       	sbic	0x06, 2	; 6
    1124:	02 c0       	rjmp	.+4      	; 0x112a <switch_menu+0x1d6>
	timer_view();
    1126:	c1 de       	rcall	.-638    	; 0xeaa <timer_view>
    1128:	08 95       	ret
	
	else if (BUTTON_3_PRESSED)
    112a:	1a 99       	sbic	0x03, 2	; 3
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <switch_menu+0x1de>
	temperature_view();
    112e:	cb de       	rcall	.-618    	; 0xec6 <temperature_view>
    1130:	08 95       	ret
	
	else if (BUTTON_4_PRESSED)
    1132:	19 99       	sbic	0x03, 1	; 3
    1134:	16 c0       	rjmp	.+44     	; 0x1162 <switch_menu+0x20e>
	dashboard_view();
    1136:	d5 de       	rcall	.-598    	; 0xee2 <dashboard_view>
}
    1138:	08 95       	ret
	clock_set_hour_subtract();
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
	clock_set_hour_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
    113a:	83 b1       	in	r24, 0x03	; 3
    113c:	4e cf       	rjmp	.-356    	; 0xfda <switch_menu+0x86>
	clock_set_minute_subtract();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
	clock_set_minute_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
    113e:	83 b1       	in	r24, 0x03	; 3
    1140:	7b cf       	rjmp	.-266    	; 0x1038 <switch_menu+0xe4>
	timer_set_hour_subtract();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
	timer_set_hour_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
    1142:	83 b1       	in	r24, 0x03	; 3
    1144:	b7 cf       	rjmp	.-146    	; 0x10b4 <switch_menu+0x160>
	timer_set_minute_subtract();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
	timer_set_minute_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
    1146:	83 b1       	in	r24, 0x03	; 3
    1148:	e3 cf       	rjmp	.-58     	; 0x1110 <switch_menu+0x1bc>
	clock_set_hour_add();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
	clock_set_hour_subtract();
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
    114a:	1a 9b       	sbis	0x03, 2	; 3
    114c:	f6 cf       	rjmp	.-20     	; 0x113a <switch_menu+0x1e6>
    114e:	36 cf       	rjmp	.-404    	; 0xfbc <switch_menu+0x68>
	clock_set_minute_add();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
	clock_set_minute_subtract();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
    1150:	1a 9b       	sbis	0x03, 2	; 3
    1152:	f5 cf       	rjmp	.-22     	; 0x113e <switch_menu+0x1ea>
    1154:	62 cf       	rjmp	.-316    	; 0x101a <switch_menu+0xc6>
	timer_set_hour_add();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
	timer_set_hour_subtract();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
    1156:	1a 9b       	sbis	0x03, 2	; 3
    1158:	f4 cf       	rjmp	.-24     	; 0x1142 <switch_menu+0x1ee>
    115a:	a2 cf       	rjmp	.-188    	; 0x10a0 <switch_menu+0x14c>
	timer_set_minute_add();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
	timer_set_minute_subtract();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
    115c:	1a 9b       	sbis	0x03, 2	; 3
    115e:	f3 cf       	rjmp	.-26     	; 0x1146 <switch_menu+0x1f2>
    1160:	c8 cf       	rjmp	.-112    	; 0x10f2 <switch_menu+0x19e>
    1162:	08 95       	ret

00001164 <on_button_pressed>:
	clock_view();
}

void on_button_pressed()
{
	ssd1306_clear_display();
    1164:	f2 dc       	rcall	.-1564   	; 0xb4a <ssd1306_clear_display>
	switch_menu();
    1166:	f6 de       	rcall	.-532    	; 0xf54 <switch_menu>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1168:	2f ef       	ldi	r18, 0xFF	; 255
    116a:	81 ee       	ldi	r24, 0xE1	; 225
    116c:	94 e0       	ldi	r25, 0x04	; 4
    116e:	21 50       	subi	r18, 0x01	; 1
    1170:	80 40       	sbci	r24, 0x00	; 0
    1172:	90 40       	sbci	r25, 0x00	; 0
    1174:	e1 f7       	brne	.-8      	; 0x116e <on_button_pressed+0xa>
    1176:	00 c0       	rjmp	.+0      	; 0x1178 <on_button_pressed+0x14>
    1178:	00 00       	nop
    117a:	08 95       	ret

0000117c <add_hour>:
	return subtract_number(number, MINUTES_IN_HOUR - 1);
}

int add_number(int number, int max)
{
	number++;
    117c:	01 96       	adiw	r24, 0x01	; 1
	
	if(number > max)
    117e:	88 31       	cpi	r24, 0x18	; 24
    1180:	91 05       	cpc	r25, r1
    1182:	14 f0       	brlt	.+4      	; 0x1188 <add_hour+0xc>
	{
		number = 0;
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
int subtract_number(int number, int max);

int add_hour(int number)
{
	return add_number(number, HOURS_IN_DAY - 1);
}
    1188:	08 95       	ret

0000118a <add_minute>:
	return subtract_number(number, MINUTES_IN_HOUR - 1);
}

int add_number(int number, int max)
{
	number++;
    118a:	01 96       	adiw	r24, 0x01	; 1
	
	if(number > max)
    118c:	8c 33       	cpi	r24, 0x3C	; 60
    118e:	91 05       	cpc	r25, r1
    1190:	14 f0       	brlt	.+4      	; 0x1196 <add_minute+0xc>
	{
		number = 0;
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
}

int add_minute(int number)
{
	return add_number(number, MINUTES_IN_HOUR - 1);
}
    1196:	08 95       	ret

00001198 <add_second>:
	return subtract_number(number, MINUTES_IN_HOUR - 1);
}

int add_number(int number, int max)
{
	number++;
    1198:	01 96       	adiw	r24, 0x01	; 1
	
	if(number > max)
    119a:	8c 33       	cpi	r24, 0x3C	; 60
    119c:	91 05       	cpc	r25, r1
    119e:	14 f0       	brlt	.+4      	; 0x11a4 <add_second+0xc>
	{
		number = 0;
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
}

int add_second(int number)
{
	return add_number(number, SECONDS_IN_MINUTE -1);
}
    11a4:	08 95       	ret

000011a6 <subtract_hour>:
	return number;
}

int subtract_number(int number, int max)
{
	number--;
    11a6:	01 97       	sbiw	r24, 0x01	; 1
	
	if(number < 0)
    11a8:	12 f4       	brpl	.+4      	; 0x11ae <subtract_hour+0x8>
	{
		number = max;
    11aa:	87 e1       	ldi	r24, 0x17	; 23
    11ac:	90 e0       	ldi	r25, 0x00	; 0
}

int subtract_hour(int number)
{
	return subtract_number(number, HOURS_IN_DAY - 1);
}
    11ae:	08 95       	ret

000011b0 <subtract_minute>:
	return number;
}

int subtract_number(int number, int max)
{
	number--;
    11b0:	01 97       	sbiw	r24, 0x01	; 1
	
	if(number < 0)
    11b2:	12 f4       	brpl	.+4      	; 0x11b8 <subtract_minute+0x8>
	{
		number = max;
    11b4:	8b e3       	ldi	r24, 0x3B	; 59
    11b6:	90 e0       	ldi	r25, 0x00	; 0
}

int subtract_minute(int number)
{
	return subtract_number(number, MINUTES_IN_HOUR - 1);
}
    11b8:	08 95       	ret

000011ba <port_init>:
#define LED2 (1<<PB0)
#define BUZZER (1<<PD5)

void port_init()
{
	DDRC &= ~(BUTTON_2 | BUTTON_1);
    11ba:	87 b1       	in	r24, 0x07	; 7
    11bc:	83 7f       	andi	r24, 0xF3	; 243
    11be:	87 b9       	out	0x07, r24	; 7
	DDRB &= ~(BUTTON_4 | BUTTON_3);
    11c0:	84 b1       	in	r24, 0x04	; 4
    11c2:	89 7f       	andi	r24, 0xF9	; 249
    11c4:	84 b9       	out	0x04, r24	; 4
	
	TCCR1B = (1<<CS12) | (1<<WGM12);
    11c6:	8c e0       	ldi	r24, 0x0C	; 12
    11c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	OCR1AH = 0x7A;
    11cc:	8a e7       	ldi	r24, 0x7A	; 122
    11ce:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
	OCR1AL = 0x12;
    11d2:	82 e1       	ldi	r24, 0x12	; 18
    11d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 |= (1<<ICIE1) | (1<<OCIE1A);
    11d8:	ef e6       	ldi	r30, 0x6F	; 111
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	82 62       	ori	r24, 0x22	; 34
    11e0:	80 83       	st	Z, r24
    11e2:	08 95       	ret

000011e4 <main>:
}

int main(void)
{
	sei();
    11e4:	78 94       	sei
	port_init();
    11e6:	e9 df       	rcall	.-46     	; 0x11ba <port_init>
	display_init();
    11e8:	63 dd       	rcall	.-1338   	; 0xcb0 <display_init>

	while (1)
	{
		if(timer_is_running() == 1 && timer_is_ready() == 1)
    11ea:	46 d1       	rcall	.+652    	; 0x1478 <timer_is_running>
    11ec:	88 23       	and	r24, r24
    11ee:	19 f0       	breq	.+6      	; 0x11f6 <main+0x12>
    11f0:	25 d1       	rcall	.+586    	; 0x143c <timer_is_ready>
    11f2:	81 11       	cpse	r24, r1
		DDRD |= LED1;
    11f4:	57 9a       	sbi	0x0a, 7	; 10
		
		if(BUTTON_PRESSED)
    11f6:	33 9b       	sbis	0x06, 3	; 6
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <main+0x20>
    11fa:	32 9b       	sbis	0x06, 2	; 6
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <main+0x20>
    11fe:	1a 9b       	sbis	0x03, 2	; 3
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <main+0x20>
    1202:	19 9b       	sbis	0x03, 1	; 3
			on_button_pressed();
    1204:	af df       	rcall	.-162    	; 0x1164 <on_button_pressed>
		
		refresh_screen();
    1206:	7b de       	rcall	.-778    	; 0xefe <refresh_screen>
	}
    1208:	f0 cf       	rjmp	.-32     	; 0x11ea <main+0x6>

0000120a <__vector_11>:
}

ISR (TIMER1_COMPA_vect)
{
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
	trigger();
    122c:	11 d0       	rcall	.+34     	; 0x1250 <trigger>
    122e:	ff 91       	pop	r31
    1230:	ef 91       	pop	r30
    1232:	bf 91       	pop	r27
    1234:	af 91       	pop	r26
    1236:	9f 91       	pop	r25
    1238:	8f 91       	pop	r24
    123a:	7f 91       	pop	r23
    123c:	6f 91       	pop	r22
    123e:	5f 91       	pop	r21
    1240:	4f 91       	pop	r20
    1242:	3f 91       	pop	r19
    1244:	2f 91       	pop	r18
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	0f 90       	pop	r0
    124c:	1f 90       	pop	r1
    124e:	18 95       	reti

00001250 <trigger>:
 int minute = 0;
 int clockSelectedMinute= 0;
 int second = 0;

void trigger()
{
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
	int previous = second;
    1254:	c0 91 6c 01 	lds	r28, 0x016C	; 0x80016c <__data_end>
    1258:	d0 91 6d 01 	lds	r29, 0x016D	; 0x80016d <__data_end+0x1>
	second = add_second(second);
    125c:	ce 01       	movw	r24, r28
    125e:	9c df       	rcall	.-200    	; 0x1198 <add_second>
    1260:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <__data_end+0x1>
    1264:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__data_end>
	
	if(previous == (SECONDS_IN_MINUTE - 1) && second == 0)
    1268:	eb 97       	sbiw	r28, 0x3b	; 59
    126a:	e9 f4       	brne	.+58     	; 0x12a6 <trigger+0x56>
    126c:	89 2b       	or	r24, r25
    126e:	61 f4       	brne	.+24     	; 0x1288 <trigger+0x38>
	{
		previous = minute;
    1270:	c0 91 70 01 	lds	r28, 0x0170	; 0x800170 <minute>
    1274:	d0 91 71 01 	lds	r29, 0x0171	; 0x800171 <minute+0x1>
		minute = add_minute(minute);
    1278:	ce 01       	movw	r24, r28
    127a:	87 df       	rcall	.-242    	; 0x118a <add_minute>
    127c:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <minute+0x1>
    1280:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <minute>
	}
	
	if(previous == (MINUTES_IN_HOUR - 1) && minute == 0)
    1284:	eb 97       	sbiw	r28, 0x3b	; 59
    1286:	79 f4       	brne	.+30     	; 0x12a6 <trigger+0x56>
    1288:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <minute>
    128c:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <minute+0x1>
    1290:	89 2b       	or	r24, r25
    1292:	49 f4       	brne	.+18     	; 0x12a6 <trigger+0x56>
	hour = add_hour(hour);
    1294:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hour>
    1298:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <hour+0x1>
    129c:	6f df       	rcall	.-290    	; 0x117c <add_hour>
    129e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <hour+0x1>
    12a2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hour>
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <clock_add_hour>:

void clock_add_hour()
{
	clockSelectedHour = add_hour(clockSelectedHour);
    12ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <clockSelectedHour>
    12b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <clockSelectedHour+0x1>
    12b4:	63 df       	rcall	.-314    	; 0x117c <add_hour>
    12b6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <clockSelectedHour+0x1>
    12ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <clockSelectedHour>
    12be:	08 95       	ret

000012c0 <clock_add_minute>:
}

void clock_add_minute()
{
	clockSelectedMinute = add_minute(clockSelectedMinute);
    12c0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <clockSelectedMinute>
    12c4:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <clockSelectedMinute+0x1>
    12c8:	60 df       	rcall	.-320    	; 0x118a <add_minute>
    12ca:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <clockSelectedMinute+0x1>
    12ce:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <clockSelectedMinute>
    12d2:	08 95       	ret

000012d4 <clock_subtract_hour>:
}

void clock_subtract_hour()
{
	clockSelectedHour = subtract_hour(clockSelectedHour);
    12d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <clockSelectedHour>
    12d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <clockSelectedHour+0x1>
    12dc:	64 df       	rcall	.-312    	; 0x11a6 <subtract_hour>
    12de:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <clockSelectedHour+0x1>
    12e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <clockSelectedHour>
    12e6:	08 95       	ret

000012e8 <clock_subtract_minute>:
}

void clock_subtract_minute()
{
	clockSelectedMinute = subtract_minute(clockSelectedMinute);
    12e8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <clockSelectedMinute>
    12ec:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <clockSelectedMinute+0x1>
    12f0:	5f df       	rcall	.-322    	; 0x11b0 <subtract_minute>
    12f2:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <clockSelectedMinute+0x1>
    12f6:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <clockSelectedMinute>
    12fa:	08 95       	ret

000012fc <clock_save>:
}

void clock_save()
{
	second = 0;
    12fc:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <__data_end+0x1>
    1300:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__data_end>
	hour = clockSelectedHour;
    1304:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <clockSelectedHour>
    1308:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <clockSelectedHour+0x1>
    130c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <hour+0x1>
    1310:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hour>
	minute = clockSelectedMinute;
    1314:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <clockSelectedMinute>
    1318:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <clockSelectedMinute+0x1>
    131c:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <minute+0x1>
    1320:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <minute>
    1324:	08 95       	ret

00001326 <get_current_hour>:
}

int get_current_hour()
{
	return hour;
}
    1326:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hour>
    132a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <hour+0x1>
    132e:	08 95       	ret

00001330 <get_current_minute>:

int get_current_minute()
{
	return minute;	
}
    1330:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <minute>
    1334:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <minute+0x1>
    1338:	08 95       	ret

0000133a <get_current_second>:

int get_current_second()
{
	return second;
}
    133a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
    133e:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <__data_end+0x1>
    1342:	08 95       	ret

00001344 <display_clock>:
	draw_string(0, 0, "CLOCK SET M");
	display_clock(clockSelectedHour, clockSelectedMinute, 0, 0, 1, 0);
}

void display_clock(int hour, int minute, int second, bool displayHour, bool displayMinute, bool displaySeconds)
{
    1344:	af 92       	push	r10
    1346:	cf 92       	push	r12
    1348:	ef 92       	push	r14
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
	draw_clock(0,2, hour, minute, second, displayHour, displayMinute, displaySeconds);
    134e:	ae 2c       	mov	r10, r14
    1350:	c0 2e       	mov	r12, r16
    1352:	e2 2e       	mov	r14, r18
    1354:	8a 01       	movw	r16, r20
    1356:	9b 01       	movw	r18, r22
    1358:	ac 01       	movw	r20, r24
    135a:	62 e0       	ldi	r22, 0x02	; 2
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	35 dd       	rcall	.-1430   	; 0xdce <draw_clock>
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	ef 90       	pop	r14
    136a:	cf 90       	pop	r12
    136c:	af 90       	pop	r10
    136e:	08 95       	ret

00001370 <display_clock_view>:
{
	return second;
}

void display_clock_view()
{
    1370:	ef 92       	push	r14
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
	draw_string(0, 0, "CLOCK");
    1378:	42 e2       	ldi	r20, 0x22	; 34
    137a:	51 e0       	ldi	r21, 0x01	; 1
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	1d dd       	rcall	.-1478   	; 0xdc0 <draw_string>
	display_clock(hour, minute,second, 1,1,1);
    1386:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <__data_end>
    138a:	50 91 6d 01 	lds	r21, 0x016D	; 0x80016d <__data_end+0x1>
    138e:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <minute>
    1392:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <minute+0x1>
    1396:	ee 24       	eor	r14, r14
    1398:	e3 94       	inc	r14
    139a:	f1 2c       	mov	r15, r1
    139c:	01 e0       	ldi	r16, 0x01	; 1
    139e:	10 e0       	ldi	r17, 0x00	; 0
    13a0:	21 e0       	ldi	r18, 0x01	; 1
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hour>
    13a8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <hour+0x1>
    13ac:	cb df       	rcall	.-106    	; 0x1344 <display_clock>
}
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	08 95       	ret

000013b8 <display_clock_hour_set_view>:

void display_clock_hour_set_view()
{
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
	draw_string(0, 0, "CLOCK SET H");
    13c0:	48 e2       	ldi	r20, 0x28	; 40
    13c2:	51 e0       	ldi	r21, 0x01	; 1
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	f9 dc       	rcall	.-1550   	; 0xdc0 <draw_string>
	display_clock(clockSelectedHour, clockSelectedMinute, 0,1,0,0);
    13ce:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <clockSelectedMinute>
    13d2:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <clockSelectedMinute+0x1>
    13d6:	e1 2c       	mov	r14, r1
    13d8:	f1 2c       	mov	r15, r1
    13da:	00 e0       	ldi	r16, 0x00	; 0
    13dc:	10 e0       	ldi	r17, 0x00	; 0
    13de:	21 e0       	ldi	r18, 0x01	; 1
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <clockSelectedHour>
    13ea:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <clockSelectedHour+0x1>
    13ee:	aa df       	rcall	.-172    	; 0x1344 <display_clock>
}
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	08 95       	ret

000013fa <display_clock_minute_set_view>:

void display_clock_minute_set_view()
{
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
	draw_string(0, 0, "CLOCK SET M");
    1402:	44 e3       	ldi	r20, 0x34	; 52
    1404:	51 e0       	ldi	r21, 0x01	; 1
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	d8 dc       	rcall	.-1616   	; 0xdc0 <draw_string>
	display_clock(clockSelectedHour, clockSelectedMinute, 0, 0, 1, 0);
    1410:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <clockSelectedMinute>
    1414:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <clockSelectedMinute+0x1>
    1418:	e1 2c       	mov	r14, r1
    141a:	f1 2c       	mov	r15, r1
    141c:	01 e0       	ldi	r16, 0x01	; 1
    141e:	10 e0       	ldi	r17, 0x00	; 0
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <clockSelectedHour>
    142c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <clockSelectedHour+0x1>
    1430:	89 df       	rcall	.-238    	; 0x1344 <display_clock>
}
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	08 95       	ret

0000143c <timer_is_ready>:
bool isRunning = 0;
bool isReady = 0;

bool timer_is_ready()
{
	if(get_current_hour() == timerExpectedHour
    143c:	74 df       	rcall	.-280    	; 0x1326 <get_current_hour>
    143e:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <timerExpectedHour>
    1442:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <timerExpectedHour+0x1>
    1446:	82 17       	cp	r24, r18
    1448:	93 07       	cpc	r25, r19
    144a:	99 f4       	brne	.+38     	; 0x1472 <timer_is_ready+0x36>
	&& get_current_minute() == timerExpectedMinute
    144c:	71 df       	rcall	.-286    	; 0x1330 <get_current_minute>
    144e:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <timerExpectedMinute>
    1452:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <timerExpectedMinute+0x1>
    1456:	82 17       	cp	r24, r18
    1458:	93 07       	cpc	r25, r19
    145a:	59 f4       	brne	.+22     	; 0x1472 <timer_is_ready+0x36>
	&& get_current_second() == timerExpectedSecond)
    145c:	6e df       	rcall	.-292    	; 0x133a <get_current_second>
    145e:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <timerExpectedSecond>
    1462:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <timerExpectedSecond+0x1>
    1466:	82 17       	cp	r24, r18
    1468:	93 07       	cpc	r25, r19
    146a:	19 f4       	brne	.+6      	; 0x1472 <timer_is_ready+0x36>
	{
		isReady = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <isReady>
	}

	return isReady;
}
    1472:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <isReady>
    1476:	08 95       	ret

00001478 <timer_is_running>:

bool timer_is_running()
{
	return isRunning;
}
    1478:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <isRunning>
    147c:	08 95       	ret

0000147e <timer_reset>:

void timer_reset()
{
	isReady = 0;
    147e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <isReady>
	isRunning = 0;
    1482:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <isRunning>
	timerSelectedHour = 0;
    1486:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <timerSelectedHour+0x1>
    148a:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <timerSelectedHour>
	timerSelectedMinute = 0;
    148e:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <timerSelectedMinute+0x1>
    1492:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <timerSelectedMinute>
	timerExpectedHour = 0;
    1496:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <timerExpectedHour+0x1>
    149a:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <timerExpectedHour>
	timerExpectedMinute = 0;
    149e:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <timerExpectedMinute+0x1>
    14a2:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <timerExpectedMinute>
	timerExpectedSecond = 0;
    14a6:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <timerExpectedSecond+0x1>
    14aa:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <timerExpectedSecond>
	timerMinutesElapsed = 0;
    14ae:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <timerMinutesElapsed>
	timerHoursElapsed = 0;
    14b2:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <timerHoursElapsed>
    14b6:	08 95       	ret

000014b8 <timer_add_hour>:
}

void timer_add_hour()
{
	timerSelectedHour = add_hour(timerSelectedHour);
    14b8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <timerSelectedHour>
    14bc:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <timerSelectedHour+0x1>
    14c0:	5d de       	rcall	.-838    	; 0x117c <add_hour>
    14c2:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <timerSelectedHour+0x1>
    14c6:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <timerSelectedHour>
    14ca:	08 95       	ret

000014cc <timer_add_minute>:
}

void timer_add_minute()
{
	timerSelectedMinute = add_minute(timerSelectedMinute);
    14cc:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <timerSelectedMinute>
    14d0:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <timerSelectedMinute+0x1>
    14d4:	5a de       	rcall	.-844    	; 0x118a <add_minute>
    14d6:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <timerSelectedMinute+0x1>
    14da:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <timerSelectedMinute>
    14de:	08 95       	ret

000014e0 <timer_subtract_hour>:
}

void timer_subtract_hour()
{
	timerSelectedHour = subtract_hour(timerSelectedHour);
    14e0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <timerSelectedHour>
    14e4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <timerSelectedHour+0x1>
    14e8:	5e de       	rcall	.-836    	; 0x11a6 <subtract_hour>
    14ea:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <timerSelectedHour+0x1>
    14ee:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <timerSelectedHour>
    14f2:	08 95       	ret

000014f4 <timer_subtract_minute>:
}

void timer_subtract_minute()
{
	timerSelectedMinute = subtract_minute(timerSelectedMinute);
    14f4:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <timerSelectedMinute>
    14f8:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <timerSelectedMinute+0x1>
    14fc:	59 de       	rcall	.-846    	; 0x11b0 <subtract_minute>
    14fe:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <timerSelectedMinute+0x1>
    1502:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <timerSelectedMinute>
    1506:	08 95       	ret

00001508 <timer_run>:
}

void timer_run()
{
	if(isRunning == 0)
    1508:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <isRunning>
    150c:	81 11       	cpse	r24, r1
    150e:	1e c0       	rjmp	.+60     	; 0x154c <timer_run+0x44>
	{
		timerExpectedSecond = get_current_second();
    1510:	14 df       	rcall	.-472    	; 0x133a <get_current_second>
    1512:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <timerExpectedSecond+0x1>
    1516:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <timerExpectedSecond>
		timerExpectedHour = get_current_hour() + timerSelectedHour;
    151a:	05 df       	rcall	.-502    	; 0x1326 <get_current_hour>
    151c:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <timerSelectedHour>
    1520:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <timerSelectedHour+0x1>
    1524:	82 0f       	add	r24, r18
    1526:	93 1f       	adc	r25, r19
    1528:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timerExpectedHour+0x1>
    152c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timerExpectedHour>
		timerExpectedMinute = get_current_minute() + timerSelectedMinute;
    1530:	ff de       	rcall	.-514    	; 0x1330 <get_current_minute>
    1532:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <timerSelectedMinute>
    1536:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <timerSelectedMinute+0x1>
    153a:	82 0f       	add	r24, r18
    153c:	93 1f       	adc	r25, r19
    153e:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timerExpectedMinute+0x1>
    1542:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timerExpectedMinute>
		isRunning = 1;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <isRunning>
    154c:	08 95       	ret

0000154e <get_difference>:
}

int get_difference(int currentValue, int expectedValue, int maxValue, bool elapsedValue)
{
	int result = 0;
	int distinction = currentValue - expectedValue;
    154e:	86 1b       	sub	r24, r22
    1550:	97 0b       	sbc	r25, r23
	
	if(distinction < 0)
    1552:	4a f4       	brpl	.+18     	; 0x1566 <get_difference+0x18>
	result = abs(distinction);
    1554:	bc 01       	movw	r22, r24
    1556:	99 23       	and	r25, r25
    1558:	24 f4       	brge	.+8      	; 0x1562 <get_difference+0x14>
    155a:	66 27       	eor	r22, r22
    155c:	77 27       	eor	r23, r23
    155e:	68 1b       	sub	r22, r24
    1560:	79 0b       	sbc	r23, r25
    1562:	cb 01       	movw	r24, r22
    1564:	04 c0       	rjmp	.+8      	; 0x156e <get_difference+0x20>
	else
	result = maxValue - distinction;
    1566:	ba 01       	movw	r22, r20
    1568:	68 1b       	sub	r22, r24
    156a:	79 0b       	sbc	r23, r25
    156c:	cb 01       	movw	r24, r22
	
	if(elapsedValue == 1)
    156e:	21 11       	cpse	r18, r1
	result = result - 1;
    1570:	01 97       	sbiw	r24, 0x01	; 1
	
	if(result == maxValue)
    1572:	84 17       	cp	r24, r20
    1574:	95 07       	cpc	r25, r21
    1576:	11 f4       	brne	.+4      	; 0x157c <get_difference+0x2e>
	result = 0;
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
	
	return result;
}
    157c:	08 95       	ret

0000157e <timer_get_second>:

int timer_get_second()
{
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
	return get_difference(get_current_second(),timerExpectedSecond, SECONDS_IN_MINUTE, 0);
    1582:	c0 91 76 01 	lds	r28, 0x0176	; 0x800176 <timerExpectedSecond>
    1586:	d0 91 77 01 	lds	r29, 0x0177	; 0x800177 <timerExpectedSecond+0x1>
    158a:	d7 de       	rcall	.-594    	; 0x133a <get_current_second>
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	4c e3       	ldi	r20, 0x3C	; 60
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	be 01       	movw	r22, r28
    1594:	dc df       	rcall	.-72     	; 0x154e <get_difference>
}
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	08 95       	ret

0000159c <timer_get_minute>:

int timer_get_minute()
{
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
	return get_difference(get_current_minute(),timerExpectedMinute, MINUTES_IN_HOUR, timerMinutesElapsed);
    15a2:	10 91 75 01 	lds	r17, 0x0175	; 0x800175 <timerMinutesElapsed>
    15a6:	c0 91 78 01 	lds	r28, 0x0178	; 0x800178 <timerExpectedMinute>
    15aa:	d0 91 79 01 	lds	r29, 0x0179	; 0x800179 <timerExpectedMinute+0x1>
    15ae:	c0 de       	rcall	.-640    	; 0x1330 <get_current_minute>
    15b0:	21 2f       	mov	r18, r17
    15b2:	4c e3       	ldi	r20, 0x3C	; 60
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	be 01       	movw	r22, r28
    15b8:	ca df       	rcall	.-108    	; 0x154e <get_difference>
}
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	08 95       	ret

000015c2 <timer_get_hour>:

int timer_get_hour()
{
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
	return get_difference(get_current_hour(),timerExpectedHour, HOURS_IN_DAY, timerHoursElapsed);
    15c8:	10 91 74 01 	lds	r17, 0x0174	; 0x800174 <timerHoursElapsed>
    15cc:	c0 91 7a 01 	lds	r28, 0x017A	; 0x80017a <timerExpectedHour>
    15d0:	d0 91 7b 01 	lds	r29, 0x017B	; 0x80017b <timerExpectedHour+0x1>
    15d4:	a8 de       	rcall	.-688    	; 0x1326 <get_current_hour>
    15d6:	21 2f       	mov	r18, r17
    15d8:	48 e1       	ldi	r20, 0x18	; 24
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	be 01       	movw	r22, r28
    15de:	b7 df       	rcall	.-146    	; 0x154e <get_difference>
}
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	08 95       	ret

000015e8 <draw_running_timer>:
		draw_string(2,12,"IT IS TIME!!!");
	}
}

void draw_running_timer(bool displayHour, bool displayMinute, bool displaySecond)
{
    15e8:	8f 92       	push	r8
    15ea:	9f 92       	push	r9
    15ec:	af 92       	push	r10
    15ee:	cf 92       	push	r12
    15f0:	ef 92       	push	r14
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	e8 2e       	mov	r14, r24
    15fc:	c6 2e       	mov	r12, r22
    15fe:	a4 2e       	mov	r10, r20
	int hour = timer_get_hour();
    1600:	e0 df       	rcall	.-64     	; 0x15c2 <timer_get_hour>
    1602:	4c 01       	movw	r8, r24
	int minute = timer_get_minute();
    1604:	cb df       	rcall	.-106    	; 0x159c <timer_get_minute>
    1606:	ec 01       	movw	r28, r24
	int second = timer_get_second();
    1608:	ba df       	rcall	.-140    	; 0x157e <timer_get_second>
	
	if(second == (SECONDS_IN_MINUTE - 1))
    160a:	8b 33       	cpi	r24, 0x3B	; 59
    160c:	91 05       	cpc	r25, r1
    160e:	61 f4       	brne	.+24     	; 0x1628 <draw_running_timer+0x40>
	{
		timerMinutesElapsed = 1;
    1610:	21 e0       	ldi	r18, 0x01	; 1
    1612:	20 93 75 01 	sts	0x0175, r18	; 0x800175 <timerMinutesElapsed>
    1616:	2f ef       	ldi	r18, 0xFF	; 255
    1618:	39 e6       	ldi	r19, 0x69	; 105
    161a:	48 e1       	ldi	r20, 0x18	; 24
    161c:	21 50       	subi	r18, 0x01	; 1
    161e:	30 40       	sbci	r19, 0x00	; 0
    1620:	40 40       	sbci	r20, 0x00	; 0
    1622:	e1 f7       	brne	.-8      	; 0x161c <draw_running_timer+0x34>
    1624:	00 c0       	rjmp	.+0      	; 0x1626 <draw_running_timer+0x3e>
    1626:	00 00       	nop
		_delay_ms(1000);
	}
	
	if(minute == (MINUTES_IN_HOUR - 1))
    1628:	cb 33       	cpi	r28, 0x3B	; 59
    162a:	d1 05       	cpc	r29, r1
    162c:	61 f4       	brne	.+24     	; 0x1646 <draw_running_timer+0x5e>
	{
		timerHoursElapsed = 1;
    162e:	21 e0       	ldi	r18, 0x01	; 1
    1630:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <timerHoursElapsed>
    1634:	2f ef       	ldi	r18, 0xFF	; 255
    1636:	39 e6       	ldi	r19, 0x69	; 105
    1638:	48 e1       	ldi	r20, 0x18	; 24
    163a:	21 50       	subi	r18, 0x01	; 1
    163c:	30 40       	sbci	r19, 0x00	; 0
    163e:	40 40       	sbci	r20, 0x00	; 0
    1640:	e1 f7       	brne	.-8      	; 0x163a <draw_running_timer+0x52>
    1642:	00 c0       	rjmp	.+0      	; 0x1644 <draw_running_timer+0x5c>
    1644:	00 00       	nop
		_delay_ms(1000);
	}
	
	draw_clock(0,2, hour, minute, second, displayHour, displayMinute, displaySecond);
    1646:	8c 01       	movw	r16, r24
    1648:	9e 01       	movw	r18, r28
    164a:	a4 01       	movw	r20, r8
    164c:	62 e0       	ldi	r22, 0x02	; 2
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	bc db       	rcall	.-2184   	; 0xdce <draw_clock>
}
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ef 90       	pop	r14
    1660:	cf 90       	pop	r12
    1662:	af 90       	pop	r10
    1664:	9f 90       	pop	r9
    1666:	8f 90       	pop	r8
    1668:	08 95       	ret

0000166a <display_timer>:
	draw_string(0, 0, "TIMER SET M");
	display_timer(0,1,0);
}

void display_timer(bool displayHour, bool displayMinute, bool displaySecond)
{
    166a:	af 92       	push	r10
    166c:	cf 92       	push	r12
    166e:	ef 92       	push	r14
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
	if(isRunning == 0)
    1674:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <isRunning>
    1678:	91 11       	cpse	r25, r1
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <display_timer+0x3a>
	{
		draw_clock(0,2, timerSelectedHour, timerSelectedMinute,0, displayHour, displayMinute, displaySecond);
    167c:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <timerSelectedMinute>
    1680:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <timerSelectedMinute+0x1>
    1684:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <timerSelectedHour>
    1688:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <timerSelectedHour+0x1>
    168c:	a4 2e       	mov	r10, r20
    168e:	c6 2e       	mov	r12, r22
    1690:	e8 2e       	mov	r14, r24
    1692:	00 e0       	ldi	r16, 0x00	; 0
    1694:	10 e0       	ldi	r17, 0x00	; 0
    1696:	af 01       	movw	r20, r30
    1698:	62 e0       	ldi	r22, 0x02	; 2
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	96 db       	rcall	.-2260   	; 0xdce <draw_clock>
    16a2:	10 c0       	rjmp	.+32     	; 0x16c4 <display_timer+0x5a>
	}
	else if(isRunning == 1 && isReady == 0)
    16a4:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <isReady>
    16a8:	91 11       	cpse	r25, r1
    16aa:	05 c0       	rjmp	.+10     	; 0x16b6 <display_timer+0x4c>
	{
		draw_running_timer(displayHour, displayMinute, displaySecond);
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9a df       	rcall	.-204    	; 0x15e8 <draw_running_timer>
	if(isRunning == 0)
	{
		draw_clock(0,2, timerSelectedHour, timerSelectedMinute,0, displayHour, displayMinute, displaySecond);
	}
	else if(isRunning == 1 && isReady == 0)
	{
    16b4:	07 c0       	rjmp	.+14     	; 0x16c4 <display_timer+0x5a>
		draw_running_timer(displayHour, displayMinute, displaySecond);
	}
	else
	{
		draw_string(2,12,"IT IS TIME!!!");
    16b6:	40 e4       	ldi	r20, 0x40	; 64
    16b8:	51 e0       	ldi	r21, 0x01	; 1
    16ba:	6c e0       	ldi	r22, 0x0C	; 12
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	7e db       	rcall	.-2308   	; 0xdc0 <draw_string>
	}
}
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ef 90       	pop	r14
    16ca:	cf 90       	pop	r12
    16cc:	af 90       	pop	r10
    16ce:	08 95       	ret

000016d0 <display_timer_view>:
	}
}

void display_timer_view()
{
	draw_string(0, 0, "TIMER");
    16d0:	4e e4       	ldi	r20, 0x4E	; 78
    16d2:	51 e0       	ldi	r21, 0x01	; 1
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	71 db       	rcall	.-2334   	; 0xdc0 <draw_string>
	display_timer(1,1,1);
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	bf df       	rcall	.-130    	; 0x166a <display_timer>
    16ec:	08 95       	ret

000016ee <display_timer_hour_set_view>:
}

void display_timer_hour_set_view()
{
	draw_string(0, 0, "TIMER SET H");
    16ee:	44 e5       	ldi	r20, 0x54	; 84
    16f0:	51 e0       	ldi	r21, 0x01	; 1
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	62 db       	rcall	.-2364   	; 0xdc0 <draw_string>
	display_timer(1,0,0);
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	b0 df       	rcall	.-160    	; 0x166a <display_timer>
    170a:	08 95       	ret

0000170c <display_timer_minute_set_view>:
}

void display_timer_minute_set_view()
{
	draw_string(0, 0, "TIMER SET M");
    170c:	40 e6       	ldi	r20, 0x60	; 96
    170e:	51 e0       	ldi	r21, 0x01	; 1
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	53 db       	rcall	.-2394   	; 0xdc0 <draw_string>
	display_timer(0,1,0);
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	a1 df       	rcall	.-190    	; 0x166a <display_timer>
    1728:	08 95       	ret

0000172a <__divmodhi4>:
    172a:	97 fb       	bst	r25, 7
    172c:	07 2e       	mov	r0, r23
    172e:	16 f4       	brtc	.+4      	; 0x1734 <__divmodhi4+0xa>
    1730:	00 94       	com	r0
    1732:	06 d0       	rcall	.+12     	; 0x1740 <__divmodhi4_neg1>
    1734:	77 fd       	sbrc	r23, 7
    1736:	08 d0       	rcall	.+16     	; 0x1748 <__divmodhi4_neg2>
    1738:	27 d0       	rcall	.+78     	; 0x1788 <__udivmodhi4>
    173a:	07 fc       	sbrc	r0, 7
    173c:	05 d0       	rcall	.+10     	; 0x1748 <__divmodhi4_neg2>
    173e:	3e f4       	brtc	.+14     	; 0x174e <__divmodhi4_exit>

00001740 <__divmodhi4_neg1>:
    1740:	90 95       	com	r25
    1742:	81 95       	neg	r24
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	08 95       	ret

00001748 <__divmodhi4_neg2>:
    1748:	70 95       	com	r23
    174a:	61 95       	neg	r22
    174c:	7f 4f       	sbci	r23, 0xFF	; 255

0000174e <__divmodhi4_exit>:
    174e:	08 95       	ret

00001750 <__divmodsi4>:
    1750:	05 2e       	mov	r0, r21
    1752:	97 fb       	bst	r25, 7
    1754:	16 f4       	brtc	.+4      	; 0x175a <__divmodsi4+0xa>
    1756:	00 94       	com	r0
    1758:	0f d0       	rcall	.+30     	; 0x1778 <__negsi2>
    175a:	57 fd       	sbrc	r21, 7
    175c:	05 d0       	rcall	.+10     	; 0x1768 <__divmodsi4_neg2>
    175e:	28 d0       	rcall	.+80     	; 0x17b0 <__udivmodsi4>
    1760:	07 fc       	sbrc	r0, 7
    1762:	02 d0       	rcall	.+4      	; 0x1768 <__divmodsi4_neg2>
    1764:	46 f4       	brtc	.+16     	; 0x1776 <__divmodsi4_exit>
    1766:	08 c0       	rjmp	.+16     	; 0x1778 <__negsi2>

00001768 <__divmodsi4_neg2>:
    1768:	50 95       	com	r21
    176a:	40 95       	com	r20
    176c:	30 95       	com	r19
    176e:	21 95       	neg	r18
    1770:	3f 4f       	sbci	r19, 0xFF	; 255
    1772:	4f 4f       	sbci	r20, 0xFF	; 255
    1774:	5f 4f       	sbci	r21, 0xFF	; 255

00001776 <__divmodsi4_exit>:
    1776:	08 95       	ret

00001778 <__negsi2>:
    1778:	90 95       	com	r25
    177a:	80 95       	com	r24
    177c:	70 95       	com	r23
    177e:	61 95       	neg	r22
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	8f 4f       	sbci	r24, 0xFF	; 255
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
    1786:	08 95       	ret

00001788 <__udivmodhi4>:
    1788:	aa 1b       	sub	r26, r26
    178a:	bb 1b       	sub	r27, r27
    178c:	51 e1       	ldi	r21, 0x11	; 17
    178e:	07 c0       	rjmp	.+14     	; 0x179e <__udivmodhi4_ep>

00001790 <__udivmodhi4_loop>:
    1790:	aa 1f       	adc	r26, r26
    1792:	bb 1f       	adc	r27, r27
    1794:	a6 17       	cp	r26, r22
    1796:	b7 07       	cpc	r27, r23
    1798:	10 f0       	brcs	.+4      	; 0x179e <__udivmodhi4_ep>
    179a:	a6 1b       	sub	r26, r22
    179c:	b7 0b       	sbc	r27, r23

0000179e <__udivmodhi4_ep>:
    179e:	88 1f       	adc	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	5a 95       	dec	r21
    17a4:	a9 f7       	brne	.-22     	; 0x1790 <__udivmodhi4_loop>
    17a6:	80 95       	com	r24
    17a8:	90 95       	com	r25
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	08 95       	ret

000017b0 <__udivmodsi4>:
    17b0:	a1 e2       	ldi	r26, 0x21	; 33
    17b2:	1a 2e       	mov	r1, r26
    17b4:	aa 1b       	sub	r26, r26
    17b6:	bb 1b       	sub	r27, r27
    17b8:	fd 01       	movw	r30, r26
    17ba:	0d c0       	rjmp	.+26     	; 0x17d6 <__udivmodsi4_ep>

000017bc <__udivmodsi4_loop>:
    17bc:	aa 1f       	adc	r26, r26
    17be:	bb 1f       	adc	r27, r27
    17c0:	ee 1f       	adc	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	a2 17       	cp	r26, r18
    17c6:	b3 07       	cpc	r27, r19
    17c8:	e4 07       	cpc	r30, r20
    17ca:	f5 07       	cpc	r31, r21
    17cc:	20 f0       	brcs	.+8      	; 0x17d6 <__udivmodsi4_ep>
    17ce:	a2 1b       	sub	r26, r18
    17d0:	b3 0b       	sbc	r27, r19
    17d2:	e4 0b       	sbc	r30, r20
    17d4:	f5 0b       	sbc	r31, r21

000017d6 <__udivmodsi4_ep>:
    17d6:	66 1f       	adc	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	88 1f       	adc	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	1a 94       	dec	r1
    17e0:	69 f7       	brne	.-38     	; 0x17bc <__udivmodsi4_loop>
    17e2:	60 95       	com	r22
    17e4:	70 95       	com	r23
    17e6:	80 95       	com	r24
    17e8:	90 95       	com	r25
    17ea:	9b 01       	movw	r18, r22
    17ec:	ac 01       	movw	r20, r24
    17ee:	bd 01       	movw	r22, r26
    17f0:	cf 01       	movw	r24, r30
    17f2:	08 95       	ret

000017f4 <sprintf>:
    17f4:	ae e0       	ldi	r26, 0x0E	; 14
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	ef ef       	ldi	r30, 0xFF	; 255
    17fa:	fb e0       	ldi	r31, 0x0B	; 11
    17fc:	aa c2       	rjmp	.+1364   	; 0x1d52 <__prologue_saves__+0x1c>
    17fe:	0d 89       	ldd	r16, Y+21	; 0x15
    1800:	1e 89       	ldd	r17, Y+22	; 0x16
    1802:	86 e0       	ldi	r24, 0x06	; 6
    1804:	8c 83       	std	Y+4, r24	; 0x04
    1806:	1a 83       	std	Y+2, r17	; 0x02
    1808:	09 83       	std	Y+1, r16	; 0x01
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	9f e7       	ldi	r25, 0x7F	; 127
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
    1812:	ae 01       	movw	r20, r28
    1814:	47 5e       	subi	r20, 0xE7	; 231
    1816:	5f 4f       	sbci	r21, 0xFF	; 255
    1818:	6f 89       	ldd	r22, Y+23	; 0x17
    181a:	78 8d       	ldd	r23, Y+24	; 0x18
    181c:	ce 01       	movw	r24, r28
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	08 d0       	rcall	.+16     	; 0x1832 <vfprintf>
    1822:	ef 81       	ldd	r30, Y+7	; 0x07
    1824:	f8 85       	ldd	r31, Y+8	; 0x08
    1826:	e0 0f       	add	r30, r16
    1828:	f1 1f       	adc	r31, r17
    182a:	10 82       	st	Z, r1
    182c:	2e 96       	adiw	r28, 0x0e	; 14
    182e:	e4 e0       	ldi	r30, 0x04	; 4
    1830:	ac c2       	rjmp	.+1368   	; 0x1d8a <__epilogue_restores__+0x1c>

00001832 <vfprintf>:
    1832:	ab e0       	ldi	r26, 0x0B	; 11
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ee e1       	ldi	r30, 0x1E	; 30
    1838:	fc e0       	ldi	r31, 0x0C	; 12
    183a:	7d c2       	rjmp	.+1274   	; 0x1d36 <__prologue_saves__>
    183c:	6c 01       	movw	r12, r24
    183e:	7b 01       	movw	r14, r22
    1840:	8a 01       	movw	r16, r20
    1842:	fc 01       	movw	r30, r24
    1844:	17 82       	std	Z+7, r1	; 0x07
    1846:	16 82       	std	Z+6, r1	; 0x06
    1848:	83 81       	ldd	r24, Z+3	; 0x03
    184a:	81 ff       	sbrs	r24, 1
    184c:	bf c1       	rjmp	.+894    	; 0x1bcc <vfprintf+0x39a>
    184e:	ce 01       	movw	r24, r28
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	3c 01       	movw	r6, r24
    1854:	f6 01       	movw	r30, r12
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	f7 01       	movw	r30, r14
    185a:	93 fd       	sbrc	r25, 3
    185c:	85 91       	lpm	r24, Z+
    185e:	93 ff       	sbrs	r25, 3
    1860:	81 91       	ld	r24, Z+
    1862:	7f 01       	movw	r14, r30
    1864:	88 23       	and	r24, r24
    1866:	09 f4       	brne	.+2      	; 0x186a <vfprintf+0x38>
    1868:	ad c1       	rjmp	.+858    	; 0x1bc4 <vfprintf+0x392>
    186a:	85 32       	cpi	r24, 0x25	; 37
    186c:	39 f4       	brne	.+14     	; 0x187c <vfprintf+0x4a>
    186e:	93 fd       	sbrc	r25, 3
    1870:	85 91       	lpm	r24, Z+
    1872:	93 ff       	sbrs	r25, 3
    1874:	81 91       	ld	r24, Z+
    1876:	7f 01       	movw	r14, r30
    1878:	85 32       	cpi	r24, 0x25	; 37
    187a:	21 f4       	brne	.+8      	; 0x1884 <vfprintf+0x52>
    187c:	b6 01       	movw	r22, r12
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	c0 d1       	rcall	.+896    	; 0x1c02 <fputc>
    1882:	e8 cf       	rjmp	.-48     	; 0x1854 <vfprintf+0x22>
    1884:	91 2c       	mov	r9, r1
    1886:	21 2c       	mov	r2, r1
    1888:	31 2c       	mov	r3, r1
    188a:	ff e1       	ldi	r31, 0x1F	; 31
    188c:	f3 15       	cp	r31, r3
    188e:	d8 f0       	brcs	.+54     	; 0x18c6 <vfprintf+0x94>
    1890:	8b 32       	cpi	r24, 0x2B	; 43
    1892:	79 f0       	breq	.+30     	; 0x18b2 <vfprintf+0x80>
    1894:	38 f4       	brcc	.+14     	; 0x18a4 <vfprintf+0x72>
    1896:	80 32       	cpi	r24, 0x20	; 32
    1898:	79 f0       	breq	.+30     	; 0x18b8 <vfprintf+0x86>
    189a:	83 32       	cpi	r24, 0x23	; 35
    189c:	a1 f4       	brne	.+40     	; 0x18c6 <vfprintf+0x94>
    189e:	23 2d       	mov	r18, r3
    18a0:	20 61       	ori	r18, 0x10	; 16
    18a2:	1d c0       	rjmp	.+58     	; 0x18de <vfprintf+0xac>
    18a4:	8d 32       	cpi	r24, 0x2D	; 45
    18a6:	61 f0       	breq	.+24     	; 0x18c0 <vfprintf+0x8e>
    18a8:	80 33       	cpi	r24, 0x30	; 48
    18aa:	69 f4       	brne	.+26     	; 0x18c6 <vfprintf+0x94>
    18ac:	23 2d       	mov	r18, r3
    18ae:	21 60       	ori	r18, 0x01	; 1
    18b0:	16 c0       	rjmp	.+44     	; 0x18de <vfprintf+0xac>
    18b2:	83 2d       	mov	r24, r3
    18b4:	82 60       	ori	r24, 0x02	; 2
    18b6:	38 2e       	mov	r3, r24
    18b8:	e3 2d       	mov	r30, r3
    18ba:	e4 60       	ori	r30, 0x04	; 4
    18bc:	3e 2e       	mov	r3, r30
    18be:	2a c0       	rjmp	.+84     	; 0x1914 <vfprintf+0xe2>
    18c0:	f3 2d       	mov	r31, r3
    18c2:	f8 60       	ori	r31, 0x08	; 8
    18c4:	1d c0       	rjmp	.+58     	; 0x1900 <vfprintf+0xce>
    18c6:	37 fc       	sbrc	r3, 7
    18c8:	2d c0       	rjmp	.+90     	; 0x1924 <vfprintf+0xf2>
    18ca:	20 ed       	ldi	r18, 0xD0	; 208
    18cc:	28 0f       	add	r18, r24
    18ce:	2a 30       	cpi	r18, 0x0A	; 10
    18d0:	40 f0       	brcs	.+16     	; 0x18e2 <vfprintf+0xb0>
    18d2:	8e 32       	cpi	r24, 0x2E	; 46
    18d4:	b9 f4       	brne	.+46     	; 0x1904 <vfprintf+0xd2>
    18d6:	36 fc       	sbrc	r3, 6
    18d8:	75 c1       	rjmp	.+746    	; 0x1bc4 <vfprintf+0x392>
    18da:	23 2d       	mov	r18, r3
    18dc:	20 64       	ori	r18, 0x40	; 64
    18de:	32 2e       	mov	r3, r18
    18e0:	19 c0       	rjmp	.+50     	; 0x1914 <vfprintf+0xe2>
    18e2:	36 fe       	sbrs	r3, 6
    18e4:	06 c0       	rjmp	.+12     	; 0x18f2 <vfprintf+0xc0>
    18e6:	8a e0       	ldi	r24, 0x0A	; 10
    18e8:	98 9e       	mul	r9, r24
    18ea:	20 0d       	add	r18, r0
    18ec:	11 24       	eor	r1, r1
    18ee:	92 2e       	mov	r9, r18
    18f0:	11 c0       	rjmp	.+34     	; 0x1914 <vfprintf+0xe2>
    18f2:	ea e0       	ldi	r30, 0x0A	; 10
    18f4:	2e 9e       	mul	r2, r30
    18f6:	20 0d       	add	r18, r0
    18f8:	11 24       	eor	r1, r1
    18fa:	22 2e       	mov	r2, r18
    18fc:	f3 2d       	mov	r31, r3
    18fe:	f0 62       	ori	r31, 0x20	; 32
    1900:	3f 2e       	mov	r3, r31
    1902:	08 c0       	rjmp	.+16     	; 0x1914 <vfprintf+0xe2>
    1904:	8c 36       	cpi	r24, 0x6C	; 108
    1906:	21 f4       	brne	.+8      	; 0x1910 <vfprintf+0xde>
    1908:	83 2d       	mov	r24, r3
    190a:	80 68       	ori	r24, 0x80	; 128
    190c:	38 2e       	mov	r3, r24
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <vfprintf+0xe2>
    1910:	88 36       	cpi	r24, 0x68	; 104
    1912:	41 f4       	brne	.+16     	; 0x1924 <vfprintf+0xf2>
    1914:	f7 01       	movw	r30, r14
    1916:	93 fd       	sbrc	r25, 3
    1918:	85 91       	lpm	r24, Z+
    191a:	93 ff       	sbrs	r25, 3
    191c:	81 91       	ld	r24, Z+
    191e:	7f 01       	movw	r14, r30
    1920:	81 11       	cpse	r24, r1
    1922:	b3 cf       	rjmp	.-154    	; 0x188a <vfprintf+0x58>
    1924:	98 2f       	mov	r25, r24
    1926:	9f 7d       	andi	r25, 0xDF	; 223
    1928:	95 54       	subi	r25, 0x45	; 69
    192a:	93 30       	cpi	r25, 0x03	; 3
    192c:	28 f4       	brcc	.+10     	; 0x1938 <vfprintf+0x106>
    192e:	0c 5f       	subi	r16, 0xFC	; 252
    1930:	1f 4f       	sbci	r17, 0xFF	; 255
    1932:	9f e3       	ldi	r25, 0x3F	; 63
    1934:	99 83       	std	Y+1, r25	; 0x01
    1936:	0d c0       	rjmp	.+26     	; 0x1952 <vfprintf+0x120>
    1938:	83 36       	cpi	r24, 0x63	; 99
    193a:	31 f0       	breq	.+12     	; 0x1948 <vfprintf+0x116>
    193c:	83 37       	cpi	r24, 0x73	; 115
    193e:	71 f0       	breq	.+28     	; 0x195c <vfprintf+0x12a>
    1940:	83 35       	cpi	r24, 0x53	; 83
    1942:	09 f0       	breq	.+2      	; 0x1946 <vfprintf+0x114>
    1944:	55 c0       	rjmp	.+170    	; 0x19f0 <vfprintf+0x1be>
    1946:	20 c0       	rjmp	.+64     	; 0x1988 <vfprintf+0x156>
    1948:	f8 01       	movw	r30, r16
    194a:	80 81       	ld	r24, Z
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	0e 5f       	subi	r16, 0xFE	; 254
    1950:	1f 4f       	sbci	r17, 0xFF	; 255
    1952:	88 24       	eor	r8, r8
    1954:	83 94       	inc	r8
    1956:	91 2c       	mov	r9, r1
    1958:	53 01       	movw	r10, r6
    195a:	12 c0       	rjmp	.+36     	; 0x1980 <vfprintf+0x14e>
    195c:	28 01       	movw	r4, r16
    195e:	f2 e0       	ldi	r31, 0x02	; 2
    1960:	4f 0e       	add	r4, r31
    1962:	51 1c       	adc	r5, r1
    1964:	f8 01       	movw	r30, r16
    1966:	a0 80       	ld	r10, Z
    1968:	b1 80       	ldd	r11, Z+1	; 0x01
    196a:	36 fe       	sbrs	r3, 6
    196c:	03 c0       	rjmp	.+6      	; 0x1974 <vfprintf+0x142>
    196e:	69 2d       	mov	r22, r9
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <vfprintf+0x146>
    1974:	6f ef       	ldi	r22, 0xFF	; 255
    1976:	7f ef       	ldi	r23, 0xFF	; 255
    1978:	c5 01       	movw	r24, r10
    197a:	38 d1       	rcall	.+624    	; 0x1bec <strnlen>
    197c:	4c 01       	movw	r8, r24
    197e:	82 01       	movw	r16, r4
    1980:	f3 2d       	mov	r31, r3
    1982:	ff 77       	andi	r31, 0x7F	; 127
    1984:	3f 2e       	mov	r3, r31
    1986:	15 c0       	rjmp	.+42     	; 0x19b2 <vfprintf+0x180>
    1988:	28 01       	movw	r4, r16
    198a:	22 e0       	ldi	r18, 0x02	; 2
    198c:	42 0e       	add	r4, r18
    198e:	51 1c       	adc	r5, r1
    1990:	f8 01       	movw	r30, r16
    1992:	a0 80       	ld	r10, Z
    1994:	b1 80       	ldd	r11, Z+1	; 0x01
    1996:	36 fe       	sbrs	r3, 6
    1998:	03 c0       	rjmp	.+6      	; 0x19a0 <vfprintf+0x16e>
    199a:	69 2d       	mov	r22, r9
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <vfprintf+0x172>
    19a0:	6f ef       	ldi	r22, 0xFF	; 255
    19a2:	7f ef       	ldi	r23, 0xFF	; 255
    19a4:	c5 01       	movw	r24, r10
    19a6:	17 d1       	rcall	.+558    	; 0x1bd6 <strnlen_P>
    19a8:	4c 01       	movw	r8, r24
    19aa:	f3 2d       	mov	r31, r3
    19ac:	f0 68       	ori	r31, 0x80	; 128
    19ae:	3f 2e       	mov	r3, r31
    19b0:	82 01       	movw	r16, r4
    19b2:	33 fc       	sbrc	r3, 3
    19b4:	19 c0       	rjmp	.+50     	; 0x19e8 <vfprintf+0x1b6>
    19b6:	82 2d       	mov	r24, r2
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	88 16       	cp	r8, r24
    19bc:	99 06       	cpc	r9, r25
    19be:	a0 f4       	brcc	.+40     	; 0x19e8 <vfprintf+0x1b6>
    19c0:	b6 01       	movw	r22, r12
    19c2:	80 e2       	ldi	r24, 0x20	; 32
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	1d d1       	rcall	.+570    	; 0x1c02 <fputc>
    19c8:	2a 94       	dec	r2
    19ca:	f5 cf       	rjmp	.-22     	; 0x19b6 <vfprintf+0x184>
    19cc:	f5 01       	movw	r30, r10
    19ce:	37 fc       	sbrc	r3, 7
    19d0:	85 91       	lpm	r24, Z+
    19d2:	37 fe       	sbrs	r3, 7
    19d4:	81 91       	ld	r24, Z+
    19d6:	5f 01       	movw	r10, r30
    19d8:	b6 01       	movw	r22, r12
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	12 d1       	rcall	.+548    	; 0x1c02 <fputc>
    19de:	21 10       	cpse	r2, r1
    19e0:	2a 94       	dec	r2
    19e2:	21 e0       	ldi	r18, 0x01	; 1
    19e4:	82 1a       	sub	r8, r18
    19e6:	91 08       	sbc	r9, r1
    19e8:	81 14       	cp	r8, r1
    19ea:	91 04       	cpc	r9, r1
    19ec:	79 f7       	brne	.-34     	; 0x19cc <vfprintf+0x19a>
    19ee:	e1 c0       	rjmp	.+450    	; 0x1bb2 <vfprintf+0x380>
    19f0:	84 36       	cpi	r24, 0x64	; 100
    19f2:	11 f0       	breq	.+4      	; 0x19f8 <vfprintf+0x1c6>
    19f4:	89 36       	cpi	r24, 0x69	; 105
    19f6:	39 f5       	brne	.+78     	; 0x1a46 <vfprintf+0x214>
    19f8:	f8 01       	movw	r30, r16
    19fa:	37 fe       	sbrs	r3, 7
    19fc:	07 c0       	rjmp	.+14     	; 0x1a0c <vfprintf+0x1da>
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	0c 5f       	subi	r16, 0xFC	; 252
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	08 c0       	rjmp	.+16     	; 0x1a1c <vfprintf+0x1ea>
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	07 2e       	mov	r0, r23
    1a12:	00 0c       	add	r0, r0
    1a14:	88 0b       	sbc	r24, r24
    1a16:	99 0b       	sbc	r25, r25
    1a18:	0e 5f       	subi	r16, 0xFE	; 254
    1a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1c:	f3 2d       	mov	r31, r3
    1a1e:	ff 76       	andi	r31, 0x6F	; 111
    1a20:	3f 2e       	mov	r3, r31
    1a22:	97 ff       	sbrs	r25, 7
    1a24:	09 c0       	rjmp	.+18     	; 0x1a38 <vfprintf+0x206>
    1a26:	90 95       	com	r25
    1a28:	80 95       	com	r24
    1a2a:	70 95       	com	r23
    1a2c:	61 95       	neg	r22
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f 4f       	sbci	r24, 0xFF	; 255
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	f0 68       	ori	r31, 0x80	; 128
    1a36:	3f 2e       	mov	r3, r31
    1a38:	2a e0       	ldi	r18, 0x0A	; 10
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	a3 01       	movw	r20, r6
    1a3e:	1d d1       	rcall	.+570    	; 0x1c7a <__ultoa_invert>
    1a40:	88 2e       	mov	r8, r24
    1a42:	86 18       	sub	r8, r6
    1a44:	44 c0       	rjmp	.+136    	; 0x1ace <vfprintf+0x29c>
    1a46:	85 37       	cpi	r24, 0x75	; 117
    1a48:	31 f4       	brne	.+12     	; 0x1a56 <vfprintf+0x224>
    1a4a:	23 2d       	mov	r18, r3
    1a4c:	2f 7e       	andi	r18, 0xEF	; 239
    1a4e:	b2 2e       	mov	r11, r18
    1a50:	2a e0       	ldi	r18, 0x0A	; 10
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	25 c0       	rjmp	.+74     	; 0x1aa0 <vfprintf+0x26e>
    1a56:	93 2d       	mov	r25, r3
    1a58:	99 7f       	andi	r25, 0xF9	; 249
    1a5a:	b9 2e       	mov	r11, r25
    1a5c:	8f 36       	cpi	r24, 0x6F	; 111
    1a5e:	c1 f0       	breq	.+48     	; 0x1a90 <vfprintf+0x25e>
    1a60:	18 f4       	brcc	.+6      	; 0x1a68 <vfprintf+0x236>
    1a62:	88 35       	cpi	r24, 0x58	; 88
    1a64:	79 f0       	breq	.+30     	; 0x1a84 <vfprintf+0x252>
    1a66:	ae c0       	rjmp	.+348    	; 0x1bc4 <vfprintf+0x392>
    1a68:	80 37       	cpi	r24, 0x70	; 112
    1a6a:	19 f0       	breq	.+6      	; 0x1a72 <vfprintf+0x240>
    1a6c:	88 37       	cpi	r24, 0x78	; 120
    1a6e:	21 f0       	breq	.+8      	; 0x1a78 <vfprintf+0x246>
    1a70:	a9 c0       	rjmp	.+338    	; 0x1bc4 <vfprintf+0x392>
    1a72:	e9 2f       	mov	r30, r25
    1a74:	e0 61       	ori	r30, 0x10	; 16
    1a76:	be 2e       	mov	r11, r30
    1a78:	b4 fe       	sbrs	r11, 4
    1a7a:	0d c0       	rjmp	.+26     	; 0x1a96 <vfprintf+0x264>
    1a7c:	fb 2d       	mov	r31, r11
    1a7e:	f4 60       	ori	r31, 0x04	; 4
    1a80:	bf 2e       	mov	r11, r31
    1a82:	09 c0       	rjmp	.+18     	; 0x1a96 <vfprintf+0x264>
    1a84:	34 fe       	sbrs	r3, 4
    1a86:	0a c0       	rjmp	.+20     	; 0x1a9c <vfprintf+0x26a>
    1a88:	29 2f       	mov	r18, r25
    1a8a:	26 60       	ori	r18, 0x06	; 6
    1a8c:	b2 2e       	mov	r11, r18
    1a8e:	06 c0       	rjmp	.+12     	; 0x1a9c <vfprintf+0x26a>
    1a90:	28 e0       	ldi	r18, 0x08	; 8
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	05 c0       	rjmp	.+10     	; 0x1aa0 <vfprintf+0x26e>
    1a96:	20 e1       	ldi	r18, 0x10	; 16
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <vfprintf+0x26e>
    1a9c:	20 e1       	ldi	r18, 0x10	; 16
    1a9e:	32 e0       	ldi	r19, 0x02	; 2
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	b7 fe       	sbrs	r11, 7
    1aa4:	07 c0       	rjmp	.+14     	; 0x1ab4 <vfprintf+0x282>
    1aa6:	60 81       	ld	r22, Z
    1aa8:	71 81       	ldd	r23, Z+1	; 0x01
    1aaa:	82 81       	ldd	r24, Z+2	; 0x02
    1aac:	93 81       	ldd	r25, Z+3	; 0x03
    1aae:	0c 5f       	subi	r16, 0xFC	; 252
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab2:	06 c0       	rjmp	.+12     	; 0x1ac0 <vfprintf+0x28e>
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 5f       	subi	r16, 0xFE	; 254
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac0:	a3 01       	movw	r20, r6
    1ac2:	db d0       	rcall	.+438    	; 0x1c7a <__ultoa_invert>
    1ac4:	88 2e       	mov	r8, r24
    1ac6:	86 18       	sub	r8, r6
    1ac8:	fb 2d       	mov	r31, r11
    1aca:	ff 77       	andi	r31, 0x7F	; 127
    1acc:	3f 2e       	mov	r3, r31
    1ace:	36 fe       	sbrs	r3, 6
    1ad0:	0d c0       	rjmp	.+26     	; 0x1aec <vfprintf+0x2ba>
    1ad2:	23 2d       	mov	r18, r3
    1ad4:	2e 7f       	andi	r18, 0xFE	; 254
    1ad6:	a2 2e       	mov	r10, r18
    1ad8:	89 14       	cp	r8, r9
    1ada:	58 f4       	brcc	.+22     	; 0x1af2 <vfprintf+0x2c0>
    1adc:	34 fe       	sbrs	r3, 4
    1ade:	0b c0       	rjmp	.+22     	; 0x1af6 <vfprintf+0x2c4>
    1ae0:	32 fc       	sbrc	r3, 2
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <vfprintf+0x2c4>
    1ae4:	83 2d       	mov	r24, r3
    1ae6:	8e 7e       	andi	r24, 0xEE	; 238
    1ae8:	a8 2e       	mov	r10, r24
    1aea:	05 c0       	rjmp	.+10     	; 0x1af6 <vfprintf+0x2c4>
    1aec:	b8 2c       	mov	r11, r8
    1aee:	a3 2c       	mov	r10, r3
    1af0:	03 c0       	rjmp	.+6      	; 0x1af8 <vfprintf+0x2c6>
    1af2:	b8 2c       	mov	r11, r8
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <vfprintf+0x2c6>
    1af6:	b9 2c       	mov	r11, r9
    1af8:	a4 fe       	sbrs	r10, 4
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <vfprintf+0x2e8>
    1afc:	fe 01       	movw	r30, r28
    1afe:	e8 0d       	add	r30, r8
    1b00:	f1 1d       	adc	r31, r1
    1b02:	80 81       	ld	r24, Z
    1b04:	80 33       	cpi	r24, 0x30	; 48
    1b06:	21 f4       	brne	.+8      	; 0x1b10 <vfprintf+0x2de>
    1b08:	9a 2d       	mov	r25, r10
    1b0a:	99 7e       	andi	r25, 0xE9	; 233
    1b0c:	a9 2e       	mov	r10, r25
    1b0e:	09 c0       	rjmp	.+18     	; 0x1b22 <vfprintf+0x2f0>
    1b10:	a2 fe       	sbrs	r10, 2
    1b12:	06 c0       	rjmp	.+12     	; 0x1b20 <vfprintf+0x2ee>
    1b14:	b3 94       	inc	r11
    1b16:	b3 94       	inc	r11
    1b18:	04 c0       	rjmp	.+8      	; 0x1b22 <vfprintf+0x2f0>
    1b1a:	8a 2d       	mov	r24, r10
    1b1c:	86 78       	andi	r24, 0x86	; 134
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <vfprintf+0x2f0>
    1b20:	b3 94       	inc	r11
    1b22:	a3 fc       	sbrc	r10, 3
    1b24:	10 c0       	rjmp	.+32     	; 0x1b46 <vfprintf+0x314>
    1b26:	a0 fe       	sbrs	r10, 0
    1b28:	06 c0       	rjmp	.+12     	; 0x1b36 <vfprintf+0x304>
    1b2a:	b2 14       	cp	r11, r2
    1b2c:	80 f4       	brcc	.+32     	; 0x1b4e <vfprintf+0x31c>
    1b2e:	28 0c       	add	r2, r8
    1b30:	92 2c       	mov	r9, r2
    1b32:	9b 18       	sub	r9, r11
    1b34:	0d c0       	rjmp	.+26     	; 0x1b50 <vfprintf+0x31e>
    1b36:	b2 14       	cp	r11, r2
    1b38:	58 f4       	brcc	.+22     	; 0x1b50 <vfprintf+0x31e>
    1b3a:	b6 01       	movw	r22, r12
    1b3c:	80 e2       	ldi	r24, 0x20	; 32
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	60 d0       	rcall	.+192    	; 0x1c02 <fputc>
    1b42:	b3 94       	inc	r11
    1b44:	f8 cf       	rjmp	.-16     	; 0x1b36 <vfprintf+0x304>
    1b46:	b2 14       	cp	r11, r2
    1b48:	18 f4       	brcc	.+6      	; 0x1b50 <vfprintf+0x31e>
    1b4a:	2b 18       	sub	r2, r11
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <vfprintf+0x320>
    1b4e:	98 2c       	mov	r9, r8
    1b50:	21 2c       	mov	r2, r1
    1b52:	a4 fe       	sbrs	r10, 4
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <vfprintf+0x342>
    1b56:	b6 01       	movw	r22, r12
    1b58:	80 e3       	ldi	r24, 0x30	; 48
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	52 d0       	rcall	.+164    	; 0x1c02 <fputc>
    1b5e:	a2 fe       	sbrs	r10, 2
    1b60:	16 c0       	rjmp	.+44     	; 0x1b8e <vfprintf+0x35c>
    1b62:	a1 fc       	sbrc	r10, 1
    1b64:	03 c0       	rjmp	.+6      	; 0x1b6c <vfprintf+0x33a>
    1b66:	88 e7       	ldi	r24, 0x78	; 120
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <vfprintf+0x33e>
    1b6c:	88 e5       	ldi	r24, 0x58	; 88
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	b6 01       	movw	r22, r12
    1b72:	0c c0       	rjmp	.+24     	; 0x1b8c <vfprintf+0x35a>
    1b74:	8a 2d       	mov	r24, r10
    1b76:	86 78       	andi	r24, 0x86	; 134
    1b78:	51 f0       	breq	.+20     	; 0x1b8e <vfprintf+0x35c>
    1b7a:	a1 fe       	sbrs	r10, 1
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <vfprintf+0x350>
    1b7e:	8b e2       	ldi	r24, 0x2B	; 43
    1b80:	01 c0       	rjmp	.+2      	; 0x1b84 <vfprintf+0x352>
    1b82:	80 e2       	ldi	r24, 0x20	; 32
    1b84:	a7 fc       	sbrc	r10, 7
    1b86:	8d e2       	ldi	r24, 0x2D	; 45
    1b88:	b6 01       	movw	r22, r12
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	3a d0       	rcall	.+116    	; 0x1c02 <fputc>
    1b8e:	89 14       	cp	r8, r9
    1b90:	30 f4       	brcc	.+12     	; 0x1b9e <vfprintf+0x36c>
    1b92:	b6 01       	movw	r22, r12
    1b94:	80 e3       	ldi	r24, 0x30	; 48
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	34 d0       	rcall	.+104    	; 0x1c02 <fputc>
    1b9a:	9a 94       	dec	r9
    1b9c:	f8 cf       	rjmp	.-16     	; 0x1b8e <vfprintf+0x35c>
    1b9e:	8a 94       	dec	r8
    1ba0:	f3 01       	movw	r30, r6
    1ba2:	e8 0d       	add	r30, r8
    1ba4:	f1 1d       	adc	r31, r1
    1ba6:	80 81       	ld	r24, Z
    1ba8:	b6 01       	movw	r22, r12
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	2a d0       	rcall	.+84     	; 0x1c02 <fputc>
    1bae:	81 10       	cpse	r8, r1
    1bb0:	f6 cf       	rjmp	.-20     	; 0x1b9e <vfprintf+0x36c>
    1bb2:	22 20       	and	r2, r2
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <vfprintf+0x386>
    1bb6:	4e ce       	rjmp	.-868    	; 0x1854 <vfprintf+0x22>
    1bb8:	b6 01       	movw	r22, r12
    1bba:	80 e2       	ldi	r24, 0x20	; 32
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	21 d0       	rcall	.+66     	; 0x1c02 <fputc>
    1bc0:	2a 94       	dec	r2
    1bc2:	f7 cf       	rjmp	.-18     	; 0x1bb2 <vfprintf+0x380>
    1bc4:	f6 01       	movw	r30, r12
    1bc6:	86 81       	ldd	r24, Z+6	; 0x06
    1bc8:	97 81       	ldd	r25, Z+7	; 0x07
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <vfprintf+0x39e>
    1bcc:	8f ef       	ldi	r24, 0xFF	; 255
    1bce:	9f ef       	ldi	r25, 0xFF	; 255
    1bd0:	2b 96       	adiw	r28, 0x0b	; 11
    1bd2:	e2 e1       	ldi	r30, 0x12	; 18
    1bd4:	cc c0       	rjmp	.+408    	; 0x1d6e <__epilogue_restores__>

00001bd6 <strnlen_P>:
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	05 90       	lpm	r0, Z+
    1bda:	61 50       	subi	r22, 0x01	; 1
    1bdc:	70 40       	sbci	r23, 0x00	; 0
    1bde:	01 10       	cpse	r0, r1
    1be0:	d8 f7       	brcc	.-10     	; 0x1bd8 <strnlen_P+0x2>
    1be2:	80 95       	com	r24
    1be4:	90 95       	com	r25
    1be6:	8e 0f       	add	r24, r30
    1be8:	9f 1f       	adc	r25, r31
    1bea:	08 95       	ret

00001bec <strnlen>:
    1bec:	fc 01       	movw	r30, r24
    1bee:	61 50       	subi	r22, 0x01	; 1
    1bf0:	70 40       	sbci	r23, 0x00	; 0
    1bf2:	01 90       	ld	r0, Z+
    1bf4:	01 10       	cpse	r0, r1
    1bf6:	d8 f7       	brcc	.-10     	; 0x1bee <strnlen+0x2>
    1bf8:	80 95       	com	r24
    1bfa:	90 95       	com	r25
    1bfc:	8e 0f       	add	r24, r30
    1bfe:	9f 1f       	adc	r25, r31
    1c00:	08 95       	ret

00001c02 <fputc>:
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	fb 01       	movw	r30, r22
    1c0c:	23 81       	ldd	r18, Z+3	; 0x03
    1c0e:	21 fd       	sbrc	r18, 1
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <fputc+0x16>
    1c12:	8f ef       	ldi	r24, 0xFF	; 255
    1c14:	9f ef       	ldi	r25, 0xFF	; 255
    1c16:	2c c0       	rjmp	.+88     	; 0x1c70 <fputc+0x6e>
    1c18:	22 ff       	sbrs	r18, 2
    1c1a:	16 c0       	rjmp	.+44     	; 0x1c48 <fputc+0x46>
    1c1c:	46 81       	ldd	r20, Z+6	; 0x06
    1c1e:	57 81       	ldd	r21, Z+7	; 0x07
    1c20:	24 81       	ldd	r18, Z+4	; 0x04
    1c22:	35 81       	ldd	r19, Z+5	; 0x05
    1c24:	42 17       	cp	r20, r18
    1c26:	53 07       	cpc	r21, r19
    1c28:	44 f4       	brge	.+16     	; 0x1c3a <fputc+0x38>
    1c2a:	a0 81       	ld	r26, Z
    1c2c:	b1 81       	ldd	r27, Z+1	; 0x01
    1c2e:	9d 01       	movw	r18, r26
    1c30:	2f 5f       	subi	r18, 0xFF	; 255
    1c32:	3f 4f       	sbci	r19, 0xFF	; 255
    1c34:	31 83       	std	Z+1, r19	; 0x01
    1c36:	20 83       	st	Z, r18
    1c38:	8c 93       	st	X, r24
    1c3a:	26 81       	ldd	r18, Z+6	; 0x06
    1c3c:	37 81       	ldd	r19, Z+7	; 0x07
    1c3e:	2f 5f       	subi	r18, 0xFF	; 255
    1c40:	3f 4f       	sbci	r19, 0xFF	; 255
    1c42:	37 83       	std	Z+7, r19	; 0x07
    1c44:	26 83       	std	Z+6, r18	; 0x06
    1c46:	14 c0       	rjmp	.+40     	; 0x1c70 <fputc+0x6e>
    1c48:	8b 01       	movw	r16, r22
    1c4a:	ec 01       	movw	r28, r24
    1c4c:	fb 01       	movw	r30, r22
    1c4e:	00 84       	ldd	r0, Z+8	; 0x08
    1c50:	f1 85       	ldd	r31, Z+9	; 0x09
    1c52:	e0 2d       	mov	r30, r0
    1c54:	09 95       	icall
    1c56:	89 2b       	or	r24, r25
    1c58:	e1 f6       	brne	.-72     	; 0x1c12 <fputc+0x10>
    1c5a:	d8 01       	movw	r26, r16
    1c5c:	16 96       	adiw	r26, 0x06	; 6
    1c5e:	8d 91       	ld	r24, X+
    1c60:	9c 91       	ld	r25, X
    1c62:	17 97       	sbiw	r26, 0x07	; 7
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	17 96       	adiw	r26, 0x07	; 7
    1c68:	9c 93       	st	X, r25
    1c6a:	8e 93       	st	-X, r24
    1c6c:	16 97       	sbiw	r26, 0x06	; 6
    1c6e:	ce 01       	movw	r24, r28
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	08 95       	ret

00001c7a <__ultoa_invert>:
    1c7a:	fa 01       	movw	r30, r20
    1c7c:	aa 27       	eor	r26, r26
    1c7e:	28 30       	cpi	r18, 0x08	; 8
    1c80:	51 f1       	breq	.+84     	; 0x1cd6 <__ultoa_invert+0x5c>
    1c82:	20 31       	cpi	r18, 0x10	; 16
    1c84:	81 f1       	breq	.+96     	; 0x1ce6 <__ultoa_invert+0x6c>
    1c86:	e8 94       	clt
    1c88:	6f 93       	push	r22
    1c8a:	6e 7f       	andi	r22, 0xFE	; 254
    1c8c:	6e 5f       	subi	r22, 0xFE	; 254
    1c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c90:	8f 4f       	sbci	r24, 0xFF	; 255
    1c92:	9f 4f       	sbci	r25, 0xFF	; 255
    1c94:	af 4f       	sbci	r26, 0xFF	; 255
    1c96:	b1 e0       	ldi	r27, 0x01	; 1
    1c98:	3e d0       	rcall	.+124    	; 0x1d16 <__ultoa_invert+0x9c>
    1c9a:	b4 e0       	ldi	r27, 0x04	; 4
    1c9c:	3c d0       	rcall	.+120    	; 0x1d16 <__ultoa_invert+0x9c>
    1c9e:	67 0f       	add	r22, r23
    1ca0:	78 1f       	adc	r23, r24
    1ca2:	89 1f       	adc	r24, r25
    1ca4:	9a 1f       	adc	r25, r26
    1ca6:	a1 1d       	adc	r26, r1
    1ca8:	68 0f       	add	r22, r24
    1caa:	79 1f       	adc	r23, r25
    1cac:	8a 1f       	adc	r24, r26
    1cae:	91 1d       	adc	r25, r1
    1cb0:	a1 1d       	adc	r26, r1
    1cb2:	6a 0f       	add	r22, r26
    1cb4:	71 1d       	adc	r23, r1
    1cb6:	81 1d       	adc	r24, r1
    1cb8:	91 1d       	adc	r25, r1
    1cba:	a1 1d       	adc	r26, r1
    1cbc:	20 d0       	rcall	.+64     	; 0x1cfe <__ultoa_invert+0x84>
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <__ultoa_invert+0x48>
    1cc0:	68 94       	set
    1cc2:	3f 91       	pop	r19
    1cc4:	2a e0       	ldi	r18, 0x0A	; 10
    1cc6:	26 9f       	mul	r18, r22
    1cc8:	11 24       	eor	r1, r1
    1cca:	30 19       	sub	r19, r0
    1ccc:	30 5d       	subi	r19, 0xD0	; 208
    1cce:	31 93       	st	Z+, r19
    1cd0:	de f6       	brtc	.-74     	; 0x1c88 <__ultoa_invert+0xe>
    1cd2:	cf 01       	movw	r24, r30
    1cd4:	08 95       	ret
    1cd6:	46 2f       	mov	r20, r22
    1cd8:	47 70       	andi	r20, 0x07	; 7
    1cda:	40 5d       	subi	r20, 0xD0	; 208
    1cdc:	41 93       	st	Z+, r20
    1cde:	b3 e0       	ldi	r27, 0x03	; 3
    1ce0:	0f d0       	rcall	.+30     	; 0x1d00 <__ultoa_invert+0x86>
    1ce2:	c9 f7       	brne	.-14     	; 0x1cd6 <__ultoa_invert+0x5c>
    1ce4:	f6 cf       	rjmp	.-20     	; 0x1cd2 <__ultoa_invert+0x58>
    1ce6:	46 2f       	mov	r20, r22
    1ce8:	4f 70       	andi	r20, 0x0F	; 15
    1cea:	40 5d       	subi	r20, 0xD0	; 208
    1cec:	4a 33       	cpi	r20, 0x3A	; 58
    1cee:	18 f0       	brcs	.+6      	; 0x1cf6 <__ultoa_invert+0x7c>
    1cf0:	49 5d       	subi	r20, 0xD9	; 217
    1cf2:	31 fd       	sbrc	r19, 1
    1cf4:	40 52       	subi	r20, 0x20	; 32
    1cf6:	41 93       	st	Z+, r20
    1cf8:	02 d0       	rcall	.+4      	; 0x1cfe <__ultoa_invert+0x84>
    1cfa:	a9 f7       	brne	.-22     	; 0x1ce6 <__ultoa_invert+0x6c>
    1cfc:	ea cf       	rjmp	.-44     	; 0x1cd2 <__ultoa_invert+0x58>
    1cfe:	b4 e0       	ldi	r27, 0x04	; 4
    1d00:	a6 95       	lsr	r26
    1d02:	97 95       	ror	r25
    1d04:	87 95       	ror	r24
    1d06:	77 95       	ror	r23
    1d08:	67 95       	ror	r22
    1d0a:	ba 95       	dec	r27
    1d0c:	c9 f7       	brne	.-14     	; 0x1d00 <__ultoa_invert+0x86>
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	61 05       	cpc	r22, r1
    1d12:	71 05       	cpc	r23, r1
    1d14:	08 95       	ret
    1d16:	9b 01       	movw	r18, r22
    1d18:	ac 01       	movw	r20, r24
    1d1a:	0a 2e       	mov	r0, r26
    1d1c:	06 94       	lsr	r0
    1d1e:	57 95       	ror	r21
    1d20:	47 95       	ror	r20
    1d22:	37 95       	ror	r19
    1d24:	27 95       	ror	r18
    1d26:	ba 95       	dec	r27
    1d28:	c9 f7       	brne	.-14     	; 0x1d1c <__ultoa_invert+0xa2>
    1d2a:	62 0f       	add	r22, r18
    1d2c:	73 1f       	adc	r23, r19
    1d2e:	84 1f       	adc	r24, r20
    1d30:	95 1f       	adc	r25, r21
    1d32:	a0 1d       	adc	r26, r0
    1d34:	08 95       	ret

00001d36 <__prologue_saves__>:
    1d36:	2f 92       	push	r2
    1d38:	3f 92       	push	r3
    1d3a:	4f 92       	push	r4
    1d3c:	5f 92       	push	r5
    1d3e:	6f 92       	push	r6
    1d40:	7f 92       	push	r7
    1d42:	8f 92       	push	r8
    1d44:	9f 92       	push	r9
    1d46:	af 92       	push	r10
    1d48:	bf 92       	push	r11
    1d4a:	cf 92       	push	r12
    1d4c:	df 92       	push	r13
    1d4e:	ef 92       	push	r14
    1d50:	ff 92       	push	r15
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	ca 1b       	sub	r28, r26
    1d60:	db 0b       	sbc	r29, r27
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	09 94       	ijmp

00001d6e <__epilogue_restores__>:
    1d6e:	2a 88       	ldd	r2, Y+18	; 0x12
    1d70:	39 88       	ldd	r3, Y+17	; 0x11
    1d72:	48 88       	ldd	r4, Y+16	; 0x10
    1d74:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d76:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d78:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d80:	b9 84       	ldd	r11, Y+9	; 0x09
    1d82:	c8 84       	ldd	r12, Y+8	; 0x08
    1d84:	df 80       	ldd	r13, Y+7	; 0x07
    1d86:	ee 80       	ldd	r14, Y+6	; 0x06
    1d88:	fd 80       	ldd	r15, Y+5	; 0x05
    1d8a:	0c 81       	ldd	r16, Y+4	; 0x04
    1d8c:	1b 81       	ldd	r17, Y+3	; 0x03
    1d8e:	aa 81       	ldd	r26, Y+2	; 0x02
    1d90:	b9 81       	ldd	r27, Y+1	; 0x01
    1d92:	ce 0f       	add	r28, r30
    1d94:	d1 1d       	adc	r29, r1
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	ed 01       	movw	r28, r26
    1da2:	08 95       	ret

00001da4 <_exit>:
    1da4:	f8 94       	cli

00001da6 <__stop_program>:
    1da6:	ff cf       	rjmp	.-2      	; 0x1da6 <__stop_program>
