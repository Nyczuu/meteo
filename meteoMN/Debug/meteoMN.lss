
meteoMN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00001adc  00001b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001adc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800164  00800164  00001bd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003894  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000130d  00000000  00000000  00005880  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c58  00000000  00000000  00006b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000088c  00000000  00000000  000087e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c19  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002062  00000000  00000000  00009c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000bcef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	01 c2       	rjmp	.+1026   	; 0x404 <__ctors_end>
       2:	1b c2       	rjmp	.+1078   	; 0x43a <__bad_interrupt>
       4:	1a c2       	rjmp	.+1076   	; 0x43a <__bad_interrupt>
       6:	19 c2       	rjmp	.+1074   	; 0x43a <__bad_interrupt>
       8:	18 c2       	rjmp	.+1072   	; 0x43a <__bad_interrupt>
       a:	17 c2       	rjmp	.+1070   	; 0x43a <__bad_interrupt>
       c:	16 c2       	rjmp	.+1068   	; 0x43a <__bad_interrupt>
       e:	15 c2       	rjmp	.+1066   	; 0x43a <__bad_interrupt>
      10:	14 c2       	rjmp	.+1064   	; 0x43a <__bad_interrupt>
      12:	13 c2       	rjmp	.+1062   	; 0x43a <__bad_interrupt>
      14:	12 c2       	rjmp	.+1060   	; 0x43a <__bad_interrupt>
      16:	e3 c6       	rjmp	.+3526   	; 0xdde <__vector_11>
      18:	10 c2       	rjmp	.+1056   	; 0x43a <__bad_interrupt>
      1a:	0f c2       	rjmp	.+1054   	; 0x43a <__bad_interrupt>
      1c:	0e c2       	rjmp	.+1052   	; 0x43a <__bad_interrupt>
      1e:	0d c2       	rjmp	.+1050   	; 0x43a <__bad_interrupt>
      20:	0c c2       	rjmp	.+1048   	; 0x43a <__bad_interrupt>
      22:	0b c2       	rjmp	.+1046   	; 0x43a <__bad_interrupt>
      24:	0a c2       	rjmp	.+1044   	; 0x43a <__bad_interrupt>
      26:	09 c2       	rjmp	.+1042   	; 0x43a <__bad_interrupt>
      28:	08 c2       	rjmp	.+1040   	; 0x43a <__bad_interrupt>
      2a:	07 c2       	rjmp	.+1038   	; 0x43a <__bad_interrupt>
      2c:	06 c2       	rjmp	.+1036   	; 0x43a <__bad_interrupt>
      2e:	05 c2       	rjmp	.+1034   	; 0x43a <__bad_interrupt>
      30:	04 c2       	rjmp	.+1032   	; 0x43a <__bad_interrupt>
      32:	03 c2       	rjmp	.+1030   	; 0x43a <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	ae d5       	rcall	.+2908   	; 0xb92 <switch_menu+0xce>
      36:	f0 a8       	ldd	r15, Z+48	; 0x30
      38:	3f d3       	rcall	.+1662   	; 0x6b8 <DHT_Read+0xcc>
      3a:	00 40       	sbci	r16, 0x00	; 0
      3c:	8d 14       	cp	r8, r13
      3e:	20 00       	.word	0x0020	; ????
      40:	a1 c8       	rjmp	.-3774   	; 0xfffff184 <__eeprom_end+0xff7ef184>
      42:	da 12       	cpse	r13, r26
      44:	81 3f       	cpi	r24, 0xF1	; 241
      46:	d9 22       	and	r13, r25
      48:	db 20       	and	r13, r11
      4a:	a4 a6       	std	Z+44, r10	; 0x2c
      4c:	2e af       	std	Y+62, r18	; 0x3e
      4e:	22 00       	.word	0x0022	; ????
      50:	3f 21       	and	r19, r15
      52:	00 7f       	andi	r16, 0xF0	; 240

00000054 <ssd1306xled_font8x16data>:
	...
      64:	00 00 00 f8 00 00 00 00 00 00 00 33 30 00 00 00     ...........30...
      74:	00 10 0c 06 10 0c 06 00 00 00 00 00 00 00 00 00     ................
      84:	40 c0 78 40 c0 78 40 00 04 3f 04 04 3f 04 04 00     @.x@.x@..?..?...
      94:	00 70 88 fc 08 30 00 00 00 18 20 ff 21 1e 00 00     .p...0.... .!...
      a4:	f0 08 f0 00 e0 18 00 00 00 21 1c 03 1e 21 1e 00     .........!...!..
      b4:	00 f0 08 88 70 00 00 00 1e 21 23 24 19 27 21 10     ....p....!#$.'!.
      c4:	10 16 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
      d4:	00 00 00 e0 18 04 02 00 00 00 00 07 18 20 40 00     ............. @.
      e4:	00 02 04 18 e0 00 00 00 00 40 20 18 07 00 00 00     .........@ .....
      f4:	40 40 80 f0 80 40 40 00 02 02 01 0f 01 02 02 00     @@...@@.........
     104:	00 00 00 f0 00 00 00 00 01 01 01 1f 01 01 01 00     ................
	...
     11c:	80 b0 70 00 00 00 00 00 00 00 00 00 00 00 00 00     ..p.............
     12c:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
     13c:	00 30 30 00 00 00 00 00 00 00 00 00 80 60 18 04     .00..........`..
     14c:	00 60 18 06 01 00 00 00 00 e0 10 08 08 10 e0 00     .`..............
     15c:	00 0f 10 20 20 10 0f 00 00 10 10 f8 00 00 00 00     ...  ...........
     16c:	00 20 20 3f 20 20 00 00 00 70 08 08 08 88 70 00     .  ?  ...p....p.
     17c:	00 30 28 24 22 21 30 00 00 30 08 88 88 48 30 00     .0($"!0..0...H0.
     18c:	00 18 20 20 20 11 0e 00 00 00 c0 20 10 f8 00 00     ..   ...... ....
     19c:	00 07 04 24 24 3f 24 00 00 f8 08 88 88 08 08 00     ...$$?$.........
     1ac:	00 19 21 20 20 11 0e 00 00 e0 10 88 88 18 00 00     ..!  ...........
     1bc:	00 0f 11 20 20 11 0e 00 00 38 08 08 c8 38 08 00     ...  ....8...8..
     1cc:	00 00 00 3f 00 00 00 00 00 70 88 08 08 88 70 00     ...?.....p....p.
     1dc:	00 1c 22 21 21 22 1c 00 00 e0 10 08 08 10 e0 00     .."!!"..........
     1ec:	00 00 31 22 22 11 0f 00 00 00 00 c0 c0 00 00 00     ..1""...........
     1fc:	00 00 00 30 30 00 00 00 00 00 00 80 00 00 00 00     ...00...........
     20c:	00 00 80 60 00 00 00 00 00 00 80 40 20 10 08 00     ...`.......@ ...
     21c:	00 01 02 04 08 10 20 00 40 40 40 40 40 40 40 00     ...... .@@@@@@@.
     22c:	04 04 04 04 04 04 04 00 00 08 10 20 40 80 00 00     ........... @...
     23c:	00 20 10 08 04 02 01 00 00 70 48 08 08 08 f0 00     . .......pH.....
     24c:	00 00 00 30 36 01 00 00 c0 30 c8 28 e8 10 e0 00     ...06....0.(....
     25c:	07 18 27 24 23 14 0b 00 00 00 c0 38 e0 00 00 00     ..'$#......8....
     26c:	20 3c 23 02 02 27 38 20 08 f8 88 88 88 70 00 00      <#..'8 .....p..
     27c:	20 3f 20 20 20 11 0e 00 c0 30 08 08 08 08 38 00      ?   ....0....8.
     28c:	07 18 20 20 20 10 08 00 08 f8 08 08 08 10 e0 00     ..   ...........
     29c:	20 3f 20 20 20 10 0f 00 08 f8 88 88 e8 08 10 00      ?   ...........
     2ac:	20 3f 20 20 23 20 18 00 08 f8 88 88 e8 08 10 00      ?  # ..........
     2bc:	20 3f 20 00 03 00 00 00 c0 30 08 08 08 38 00 00      ? ......0...8..
     2cc:	07 18 20 20 22 1e 02 00 08 f8 08 00 00 08 f8 08     ..  "...........
     2dc:	20 3f 21 01 01 21 3f 20 00 08 08 f8 08 08 00 00      ?!..!? ........
     2ec:	00 20 20 3f 20 20 00 00 00 00 08 08 f8 08 08 00     .  ?  ..........
     2fc:	c0 80 80 80 7f 00 00 00 08 f8 88 c0 28 18 08 00     ............(...
     30c:	20 3f 20 01 26 38 20 00 08 f8 08 00 00 00 00 00      ? .&8 .........
     31c:	20 3f 20 20 20 20 30 00 08 f8 f8 00 f8 f8 08 00      ?    0.........
     32c:	20 3f 00 3f 00 3f 20 00 08 f8 30 c0 00 08 f8 08      ?.?.? ...0.....
     33c:	20 3f 20 00 07 18 3f 00 e0 10 08 08 08 10 e0 00      ? ...?.........
     34c:	0f 10 20 20 20 10 0f 00 08 f8 08 08 08 08 f0 00     ..   ...........
     35c:	20 3f 21 01 01 01 00 00 e0 10 08 08 08 10 e0 00      ?!.............
     36c:	0f 18 24 24 38 50 4f 00 08 f8 88 88 88 88 70 00     ..$$8PO.......p.
     37c:	20 3f 20 00 03 0c 30 20 00 70 88 08 08 08 38 00      ? ...0 .p....8.
     38c:	00 38 20 21 21 22 1c 00 18 08 08 f8 08 08 18 00     .8 !!"..........
     39c:	00 00 20 3f 20 00 00 00 08 f8 08 00 00 08 f8 08     .. ? ...........
     3ac:	00 1f 20 20 20 20 1f 00 08 78 88 00 00 c8 38 08     ..    ...x....8.
     3bc:	00 00 07 38 0e 01 00 00 f8 08 00 f8 00 08 f8 00     ...8............
     3cc:	03 3c 07 00 07 3c 03 00 08 18 68 80 80 68 18 08     .<...<....h..h..
     3dc:	20 30 2c 03 03 2c 30 20 08 38 c8 00 c8 38 08 00      0,..,0 .8...8..
     3ec:	00 00 20 3f 20 00 00 00 10 08 08 08 c8 38 08 00     .. ? ........8..
     3fc:	20 38 26 21 20 20 18 00                              8&!  ..

00000404 <__ctors_end>:
     404:	11 24       	eor	r1, r1
     406:	1f be       	out	0x3f, r1	; 63
     408:	cf ef       	ldi	r28, 0xFF	; 255
     40a:	d4 e0       	ldi	r29, 0x04	; 4
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	cd bf       	out	0x3d, r28	; 61

00000410 <__do_copy_data>:
     410:	11 e0       	ldi	r17, 0x01	; 1
     412:	a0 e0       	ldi	r26, 0x00	; 0
     414:	b1 e0       	ldi	r27, 0x01	; 1
     416:	ec ed       	ldi	r30, 0xDC	; 220
     418:	fa e1       	ldi	r31, 0x1A	; 26
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__do_copy_data+0x10>
     41c:	05 90       	lpm	r0, Z+
     41e:	0d 92       	st	X+, r0
     420:	a4 36       	cpi	r26, 0x64	; 100
     422:	b1 07       	cpc	r27, r17
     424:	d9 f7       	brne	.-10     	; 0x41c <__do_copy_data+0xc>

00000426 <__do_clear_bss>:
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	a4 e6       	ldi	r26, 0x64	; 100
     42a:	b1 e0       	ldi	r27, 0x01	; 1
     42c:	01 c0       	rjmp	.+2      	; 0x430 <.do_clear_bss_start>

0000042e <.do_clear_bss_loop>:
     42e:	1d 92       	st	X+, r1

00000430 <.do_clear_bss_start>:
     430:	a0 38       	cpi	r26, 0x80	; 128
     432:	b2 07       	cpc	r27, r18
     434:	e1 f7       	brne	.-8      	; 0x42e <.do_clear_bss_loop>
     436:	c5 d4       	rcall	.+2442   	; 0xdc2 <main>
     438:	4f cb       	rjmp	.-2402   	; 0xfffffad8 <__eeprom_end+0xff7efad8>

0000043a <__bad_interrupt>:
     43a:	e2 cd       	rjmp	.-1084   	; 0x0 <__vectors>

0000043c <DHT_Setup>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43c:	2f ef       	ldi	r18, 0xFF	; 255
     43e:	83 ed       	ldi	r24, 0xD3	; 211
     440:	90 e3       	ldi	r25, 0x30	; 48
     442:	21 50       	subi	r18, 0x01	; 1
     444:	80 40       	sbci	r24, 0x00	; 0
     446:	90 40       	sbci	r25, 0x00	; 0
     448:	e1 f7       	brne	.-8      	; 0x442 <DHT_Setup+0x6>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <DHT_Setup+0x10>
     44c:	00 00       	nop
//----- Functions -----------------------------//
//Setup sensor.
void DHT_Setup()
{
	_delay_ms(__DHT_Delay_Setup);
	__DHT_STATUS = DHT_Ok;
     44e:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__DHT_STATUS>
     452:	08 95       	ret

00000454 <DHT_GetStatus>:

//Get sensor status.
enum DHT_Status_t DHT_GetStatus()
{
	return (__DHT_STATUS);
}
     454:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__DHT_STATUS>
     458:	08 95       	ret

0000045a <DHT_ReadRaw>:

//Read raw buffer from sensor.
enum DHT_Status_t DHT_ReadRaw(uint8_t Data[4])
{
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	00 d0       	rcall	.+0      	; 0x468 <DHT_ReadRaw+0xe>
     468:	00 d0       	rcall	.+0      	; 0x46a <DHT_ReadRaw+0x10>
     46a:	1f 92       	push	r1
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	68 2f       	mov	r22, r24
     472:	79 2f       	mov	r23, r25
	uint8_t buffer[5] = {0, 0, 0, 0, 0};
     474:	fe 01       	movw	r30, r28
     476:	31 96       	adiw	r30, 0x01	; 1
     478:	85 e0       	ldi	r24, 0x05	; 5
     47a:	df 01       	movw	r26, r30
     47c:	1d 92       	st	X+, r1
     47e:	8a 95       	dec	r24
     480:	e9 f7       	brne	.-6      	; 0x47c <DHT_ReadRaw+0x22>
	uint8_t retries, i;
	int8_t j;
	__DHT_STATUS = DHT_Ok;
     482:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__DHT_STATUS>

	//----- Step 1 - Start communication -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Request data
		DigitalWrite(DHT_Pin, Low);			//DHT_PIN = 0
     486:	5e 98       	cbi	0x0b, 6	; 11
		PinMode(DHT_Pin, Output);			//DHT_PIN = Output
     488:	56 9a       	sbi	0x0a, 6	; 10
     48a:	8f e3       	ldi	r24, 0x3F	; 63
     48c:	9c e9       	ldi	r25, 0x9C	; 156
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <DHT_ReadRaw+0x34>
     492:	00 c0       	rjmp	.+0      	; 0x494 <DHT_ReadRaw+0x3a>
     494:	00 00       	nop
		_delay_ms(__DHT_Delay_Read);

		//Setup DHT_PIN as input with pull-up resistor so as to read data
		DigitalWrite(DHT_Pin, High);		//DHT_PIN = 1 (Pull-up resistor)
     496:	5e 9a       	sbi	0x0b, 6	; 11
		PinMode(DHT_Pin, Input);			//DHT_PIN = Input
     498:	56 98       	cbi	0x0a, 6	; 10

		//Wait for response for 20-40us
		retries = 0;
		while (DigitalRead(DHT_Pin))
     49a:	2f e1       	ldi	r18, 0x1F	; 31
     49c:	0a c0       	rjmp	.+20     	; 0x4b2 <DHT_ReadRaw+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     49e:	95 e0       	ldi	r25, 0x05	; 5
     4a0:	9a 95       	dec	r25
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <DHT_ReadRaw+0x46>
     4a4:	00 00       	nop
     4a6:	21 50       	subi	r18, 0x01	; 1
		{
			_delay_us(2);
			retries += 2;
			if (retries > 60)
     4a8:	21 f4       	brne	.+8      	; 0x4b2 <DHT_ReadRaw+0x58>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     4aa:	84 e0       	ldi	r24, 0x04	; 4
     4ac:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__DHT_STATUS>
     4b0:	8f c0       	rjmp	.+286    	; 0x5d0 <__stack+0xd1>
		DigitalWrite(DHT_Pin, High);		//DHT_PIN = 1 (Pull-up resistor)
		PinMode(DHT_Pin, Input);			//DHT_PIN = Input

		//Wait for response for 20-40us
		retries = 0;
		while (DigitalRead(DHT_Pin))
     4b2:	4e 99       	sbic	0x09, 6	; 9
     4b4:	f4 cf       	rjmp	.-24     	; 0x49e <DHT_ReadRaw+0x44>
		}
	}
	//----------------------------------------

	//----- Step 2 - Wait for response -----
	if (__DHT_STATUS == DHT_Ok)
     4b6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__DHT_STATUS>
     4ba:	88 23       	and	r24, r24
     4bc:	59 f0       	breq	.+22     	; 0x4d4 <DHT_ReadRaw+0x7a>
     4be:	88 c0       	rjmp	.+272    	; 0x5d0 <__stack+0xd1>
     4c0:	a5 e0       	ldi	r26, 0x05	; 5
     4c2:	aa 95       	dec	r26
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <DHT_ReadRaw+0x68>
     4c6:	00 00       	nop
     4c8:	21 50       	subi	r18, 0x01	; 1
		retries = 0;
		while (!DigitalRead(DHT_Pin))
		{
			_delay_us(2);
			retries += 2;
			if (retries > 100)
     4ca:	29 f4       	brne	.+10     	; 0x4d6 <DHT_ReadRaw+0x7c>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     4cc:	84 e0       	ldi	r24, 0x04	; 4
     4ce:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__DHT_STATUS>
				break;
     4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <DHT_ReadRaw+0x96>
     4d4:	23 e3       	ldi	r18, 0x33	; 51
	if (__DHT_STATUS == DHT_Ok)
	{
		//Response sequence began
		//Wait for the first response to finish (low for ~80us)
		retries = 0;
		while (!DigitalRead(DHT_Pin))
     4d6:	4e 9b       	sbis	0x09, 6	; 9
     4d8:	f3 cf       	rjmp	.-26     	; 0x4c0 <DHT_ReadRaw+0x66>
     4da:	0a c0       	rjmp	.+20     	; 0x4f0 <DHT_ReadRaw+0x96>
     4dc:	b5 e0       	ldi	r27, 0x05	; 5
     4de:	ba 95       	dec	r27
     4e0:	f1 f7       	brne	.-4      	; 0x4de <DHT_ReadRaw+0x84>
     4e2:	00 00       	nop
     4e4:	21 50       	subi	r18, 0x01	; 1
		retries = 0;
		while(DigitalRead(DHT_Pin))
		{
			_delay_us(2);
			retries += 2;
			if (retries > 100)
     4e6:	29 f4       	brne	.+10     	; 0x4f2 <DHT_ReadRaw+0x98>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     4e8:	84 e0       	ldi	r24, 0x04	; 4
     4ea:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__DHT_STATUS>
				break;
     4ee:	70 c0       	rjmp	.+224    	; 0x5d0 <__stack+0xd1>
     4f0:	23 e3       	ldi	r18, 0x33	; 51
				break;
			}
		}
		//Wait for the last response to finish (high for ~80us)
		retries = 0;
		while(DigitalRead(DHT_Pin))
     4f2:	4e 99       	sbic	0x09, 6	; 9
     4f4:	f3 cf       	rjmp	.-26     	; 0x4dc <DHT_ReadRaw+0x82>
		}
	}
	//--------------------------------------

	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
     4f6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__DHT_STATUS>
     4fa:	88 23       	and	r24, r24
     4fc:	09 f4       	brne	.+2      	; 0x500 <__stack+0x1>
     4fe:	43 c0       	rjmp	.+134    	; 0x586 <__stack+0x87>
     500:	67 c0       	rjmp	.+206    	; 0x5d0 <__stack+0xd1>
     502:	85 e0       	ldi	r24, 0x05	; 5
     504:	8a 95       	dec	r24
     506:	f1 f7       	brne	.-4      	; 0x504 <__stack+0x5>
     508:	00 00       	nop
     50a:	21 50       	subi	r18, 0x01	; 1
				retries = 0;
				while(!DigitalRead(DHT_Pin))
				{
					_delay_us(2);
					retries += 2;
					if (retries > 70)
     50c:	31 f4       	brne	.+12     	; 0x51a <__stack+0x1b>
					{
						__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     50e:	50 93 6c 01 	sts	0x016C, r21	; 0x80016c <__DHT_STATUS>
						j = -1;								//Break inner for-loop
						i = 5;								//Break outer for-loop
     512:	45 e0       	ldi	r20, 0x05	; 5
     514:	34 c0       	rjmp	.+104    	; 0x57e <__stack+0x7f>
     516:	42 2f       	mov	r20, r18
     518:	24 e2       	ldi	r18, 0x24	; 36
		for (i = 0 ; i < 5 ; i++)
			for (j = 7 ; j >= 0 ; j--)
			{
				//There is always a leading low level of 50 us
				retries = 0;
				while(!DigitalRead(DHT_Pin))
     51a:	4e 9b       	sbis	0x09, 6	; 9
     51c:	f2 cf       	rjmp	.-28     	; 0x502 <__stack+0x3>
						i = 5;								//Break outer for-loop
						break;								//Break while loop
					}
				}

				if (__DHT_STATUS == DHT_Ok)
     51e:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <__DHT_STATUS>
     522:	21 11       	cpse	r18, r1
     524:	29 c0       	rjmp	.+82     	; 0x578 <__stack+0x79>
     526:	9d e5       	ldi	r25, 0x5D	; 93
     528:	9a 95       	dec	r25
     52a:	f1 f7       	brne	.-4      	; 0x528 <__stack+0x29>
     52c:	00 00       	nop
				{
					//We read data bit || 26-28us means '0' || 70us means '1'
					_delay_us(35);							//Wait for more than 28us
					if (DigitalRead(DHT_Pin))				//If HIGH
     52e:	4e 9b       	sbis	0x09, 6	; 9
     530:	1e c0       	rjmp	.+60     	; 0x56e <__stack+0x6f>
						BitSet(buffer[i], j);				//bit = '1'
     532:	e1 e0       	ldi	r30, 0x01	; 1
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	ec 0f       	add	r30, r28
     538:	fd 1f       	adc	r31, r29
     53a:	e4 0f       	add	r30, r20
     53c:	f1 1d       	adc	r31, r1
     53e:	20 81       	ld	r18, Z
     540:	d7 01       	movw	r26, r14
     542:	c6 01       	movw	r24, r12
     544:	03 2e       	mov	r0, r19
     546:	04 c0       	rjmp	.+8      	; 0x550 <__stack+0x51>
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	aa 1f       	adc	r26, r26
     54e:	bb 1f       	adc	r27, r27
     550:	0a 94       	dec	r0
     552:	d2 f7       	brpl	.-12     	; 0x548 <__stack+0x49>
     554:	82 2b       	or	r24, r18
     556:	80 83       	st	Z, r24
     558:	0a c0       	rjmp	.+20     	; 0x56e <__stack+0x6f>
     55a:	a5 e0       	ldi	r26, 0x05	; 5
     55c:	aa 95       	dec	r26
     55e:	f1 f7       	brne	.-4      	; 0x55c <__stack+0x5d>
     560:	00 00       	nop
     562:	21 50       	subi	r18, 0x01	; 1
					retries = 0;
					while(DigitalRead(DHT_Pin))
					{
						_delay_us(2);
						retries += 2;
						if (retries > 100)
     564:	29 f4       	brne	.+10     	; 0x570 <__stack+0x71>
						{
							__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     566:	50 93 6c 01 	sts	0x016C, r21	; 0x80016c <__DHT_STATUS>
							break;
     56a:	24 2f       	mov	r18, r20
     56c:	06 c0       	rjmp	.+12     	; 0x57a <__stack+0x7b>
     56e:	23 e3       	ldi	r18, 0x33	; 51
					_delay_us(35);							//Wait for more than 28us
					if (DigitalRead(DHT_Pin))				//If HIGH
						BitSet(buffer[i], j);				//bit = '1'

					retries = 0;
					while(DigitalRead(DHT_Pin))
     570:	4e 99       	sbic	0x09, 6	; 9
     572:	f3 cf       	rjmp	.-26     	; 0x55a <__stack+0x5b>
     574:	24 2f       	mov	r18, r20
     576:	01 c0       	rjmp	.+2      	; 0x57a <__stack+0x7b>
     578:	24 2f       	mov	r18, r20
	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
			for (j = 7 ; j >= 0 ; j--)
     57a:	31 50       	subi	r19, 0x01	; 1
     57c:	62 f6       	brpl	.-104    	; 0x516 <__stack+0x17>

	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
     57e:	4f 5f       	subi	r20, 0xFF	; 255
     580:	45 30       	cpi	r20, 0x05	; 5
     582:	38 f0       	brcs	.+14     	; 0x592 <__stack+0x93>
     584:	08 c0       	rjmp	.+16     	; 0x596 <__stack+0x97>
     586:	40 e0       	ldi	r20, 0x00	; 0
				if (__DHT_STATUS == DHT_Ok)
				{
					//We read data bit || 26-28us means '0' || 70us means '1'
					_delay_us(35);							//Wait for more than 28us
					if (DigitalRead(DHT_Pin))				//If HIGH
						BitSet(buffer[i], j);				//bit = '1'
     588:	c1 2c       	mov	r12, r1
     58a:	d1 2c       	mov	r13, r1
     58c:	76 01       	movw	r14, r12
     58e:	c3 94       	inc	r12
					{
						_delay_us(2);
						retries += 2;
						if (retries > 100)
						{
							__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
     590:	54 e0       	ldi	r21, 0x04	; 4
     592:	37 e0       	ldi	r19, 0x07	; 7
     594:	c1 cf       	rjmp	.-126    	; 0x518 <__stack+0x19>
	}
	//--------------------------------------


	//----- Step 4 - Check checksum and return data -----
	if (__DHT_STATUS == DHT_Ok)
     596:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__DHT_STATUS>
     59a:	81 11       	cpse	r24, r1
     59c:	19 c0       	rjmp	.+50     	; 0x5d0 <__stack+0xd1>
	{
		if (((uint8_t)(buffer[0] + buffer[1] + buffer[2] + buffer[3])) != buffer[4])
     59e:	99 81       	ldd	r25, Y+1	; 0x01
     5a0:	8a 81       	ldd	r24, Y+2	; 0x02
     5a2:	98 0f       	add	r25, r24
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	98 0f       	add	r25, r24
     5a8:	8c 81       	ldd	r24, Y+4	; 0x04
     5aa:	89 0f       	add	r24, r25
     5ac:	9d 81       	ldd	r25, Y+5	; 0x05
     5ae:	89 17       	cp	r24, r25
     5b0:	21 f0       	breq	.+8      	; 0x5ba <__stack+0xbb>
		{
			__DHT_STATUS = DHT_Error_Checksum;	//Checksum error
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__DHT_STATUS>
     5b8:	0b c0       	rjmp	.+22     	; 0x5d0 <__stack+0xd1>
     5ba:	de 01       	movw	r26, r28
     5bc:	11 96       	adiw	r26, 0x01	; 1
     5be:	e6 2f       	mov	r30, r22
     5c0:	f7 2f       	mov	r31, r23
     5c2:	ce 01       	movw	r24, r28
     5c4:	05 96       	adiw	r24, 0x05	; 5
			//data[1] = Humidity		(dec)
			//data[2] = Temperature		(int)
			//data[3] = Temperature		(dec)
			//data[4] = Checksum
			for (i = 0 ; i < 4 ; i++)
				Data[i] = buffer[i];
     5c6:	2d 91       	ld	r18, X+
     5c8:	21 93       	st	Z+, r18
			//data[0] = Humidity		(int)
			//data[1] = Humidity		(dec)
			//data[2] = Temperature		(int)
			//data[3] = Temperature		(dec)
			//data[4] = Checksum
			for (i = 0 ; i < 4 ; i++)
     5ca:	a8 17       	cp	r26, r24
     5cc:	b9 07       	cpc	r27, r25
     5ce:	d9 f7       	brne	.-10     	; 0x5c6 <__stack+0xc7>
		}
	}
	//---------------------------------------------------

	return DHT_GetStatus();
}
     5d0:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__DHT_STATUS>
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	df 90       	pop	r13
     5e8:	cf 90       	pop	r12
     5ea:	08 95       	ret

000005ec <DHT_Read>:
	return DHT_Read(waste, Humidity);
}

//Read temperature and humidity.
enum DHT_Status_t DHT_Read(float *Temperature, float *Humidity)
{
     5ec:	8f 92       	push	r8
     5ee:	9f 92       	push	r9
     5f0:	af 92       	push	r10
     5f2:	bf 92       	push	r11
     5f4:	cf 92       	push	r12
     5f6:	df 92       	push	r13
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	00 d0       	rcall	.+0      	; 0x606 <DHT_Read+0x1a>
     606:	00 d0       	rcall	.+0      	; 0x608 <DHT_Read+0x1c>
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	8c 01       	movw	r16, r24
     60e:	7b 01       	movw	r14, r22
	uint8_t data[4] = { 0, 0, 0, 0 };
     610:	19 82       	std	Y+1, r1	; 0x01
     612:	1a 82       	std	Y+2, r1	; 0x02
     614:	1b 82       	std	Y+3, r1	; 0x03
     616:	1c 82       	std	Y+4, r1	; 0x04

	//Read data
	enum DHT_Status_t status =  DHT_ReadRaw(data);
     618:	ce 01       	movw	r24, r28
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	1e df       	rcall	.-452    	; 0x45a <DHT_ReadRaw>

	//If read successfully
	if (status == DHT_Ok)
     61e:	81 11       	cpse	r24, r1
     620:	69 c0       	rjmp	.+210    	; 0x6f4 <DHT_Read+0x108>
	{
		//Calculate values
		*Temperature = ExtractTemperature(data[2], data[3]);
     622:	6c 81       	ldd	r22, Y+4	; 0x04
     624:	8b 81       	ldd	r24, Y+3	; 0x03

	#if (DHT_Type == DHT11)
		temp = Data2;
	#elif (DHT_Type == DHT22)
		//(Integral<<8 + Decimal) / 10
		temp = (BitCheck(Data2, 7) ? ((((Data2 & 0x7F) << 8) | Data3) / (-10.0)) : (((Data2 << 8) | Data3) / 10.0));
     626:	88 23       	and	r24, r24
     628:	74 f4       	brge	.+28     	; 0x646 <DHT_Read+0x5a>
     62a:	8f 77       	andi	r24, 0x7F	; 127
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	78 2b       	or	r23, r24
     630:	07 2e       	mov	r0, r23
     632:	00 0c       	add	r0, r0
     634:	88 0b       	sbc	r24, r24
     636:	99 0b       	sbc	r25, r25
     638:	85 d6       	rcall	.+3338   	; 0x1344 <__floatsisf>
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	40 e2       	ldi	r20, 0x20	; 32
     640:	51 ec       	ldi	r21, 0xC1	; 193
     642:	16 d6       	rcall	.+3116   	; 0x1270 <__divsf3>
     644:	0c c0       	rjmp	.+24     	; 0x65e <DHT_Read+0x72>
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	78 2b       	or	r23, r24
     64a:	07 2e       	mov	r0, r23
     64c:	00 0c       	add	r0, r0
     64e:	88 0b       	sbc	r24, r24
     650:	99 0b       	sbc	r25, r25
     652:	78 d6       	rcall	.+3312   	; 0x1344 <__floatsisf>
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	40 e2       	ldi	r20, 0x20	; 32
     65a:	51 e4       	ldi	r21, 0x41	; 65
     65c:	09 d6       	rcall	.+3090   	; 0x1270 <__divsf3>

	//If read successfully
	if (status == DHT_Ok)
	{
		//Calculate values
		*Temperature = ExtractTemperature(data[2], data[3]);
     65e:	f8 01       	movw	r30, r16
     660:	60 83       	st	Z, r22
     662:	71 83       	std	Z+1, r23	; 0x01
     664:	82 83       	std	Z+2, r24	; 0x02
     666:	93 83       	std	Z+3, r25	; 0x03

	#if (DHT_Type == DHT11)
		hum = Data0;
	#elif (DHT_Type == DHT22)
		//(Integral<<8 + Decimal) / 10
		hum = ((Data0<<8) | Data1) / 10.0;
     668:	69 81       	ldd	r22, Y+1	; 0x01
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	76 2f       	mov	r23, r22
     66e:	66 27       	eor	r22, r22
     670:	8a 81       	ldd	r24, Y+2	; 0x02
     672:	68 2b       	or	r22, r24
     674:	07 2e       	mov	r0, r23
     676:	00 0c       	add	r0, r0
     678:	88 0b       	sbc	r24, r24
     67a:	99 0b       	sbc	r25, r25
     67c:	63 d6       	rcall	.+3270   	; 0x1344 <__floatsisf>
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e2       	ldi	r20, 0x20	; 32
     684:	51 e4       	ldi	r21, 0x41	; 65
     686:	f4 d5       	rcall	.+3048   	; 0x1270 <__divsf3>
     688:	4b 01       	movw	r8, r22
     68a:	5c 01       	movw	r10, r24
	//If read successfully
	if (status == DHT_Ok)
	{
		//Calculate values
		*Temperature = ExtractTemperature(data[2], data[3]);
		*Humidity = ExtractHumidity(data[0], data[1]);
     68c:	f7 01       	movw	r30, r14
     68e:	60 83       	st	Z, r22
     690:	71 83       	std	Z+1, r23	; 0x01
     692:	82 83       	std	Z+2, r24	; 0x02
     694:	93 83       	std	Z+3, r25	; 0x03

		//Check values
		if ((*Temperature < __DHT_Temperature_Min) || (*Temperature > __DHT_Temperature_Max))
     696:	f8 01       	movw	r30, r16
     698:	c0 80       	ld	r12, Z
     69a:	d1 80       	ldd	r13, Z+1	; 0x01
     69c:	e2 80       	ldd	r14, Z+2	; 0x02
     69e:	f3 80       	ldd	r15, Z+3	; 0x03
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e2       	ldi	r20, 0x20	; 32
     6a6:	52 ec       	ldi	r21, 0xC2	; 194
     6a8:	c7 01       	movw	r24, r14
     6aa:	b6 01       	movw	r22, r12
     6ac:	dd d5       	rcall	.+3002   	; 0x1268 <__cmpsf2>
     6ae:	88 23       	and	r24, r24
     6b0:	4c f0       	brlt	.+18     	; 0x6c4 <DHT_Read+0xd8>
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 ea       	ldi	r20, 0xA0	; 160
     6b8:	52 e4       	ldi	r21, 0x42	; 66
     6ba:	c7 01       	movw	r24, r14
     6bc:	b6 01       	movw	r22, r12
     6be:	f2 d6       	rcall	.+3556   	; 0x14a4 <__gesf2>
     6c0:	18 16       	cp	r1, r24
     6c2:	24 f4       	brge	.+8      	; 0x6cc <DHT_Read+0xe0>
			__DHT_STATUS = DHT_Error_Temperature;
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__DHT_STATUS>
     6ca:	14 c0       	rjmp	.+40     	; 0x6f4 <DHT_Read+0x108>
		else if ((*Humidity < __DHT_Humidity_Min) || (*Humidity > __DHT_Humidity_Max))
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	a9 01       	movw	r20, r18
     6d2:	c5 01       	movw	r24, r10
     6d4:	b4 01       	movw	r22, r8
     6d6:	c8 d5       	rcall	.+2960   	; 0x1268 <__cmpsf2>
     6d8:	88 23       	and	r24, r24
     6da:	4c f0       	brlt	.+18     	; 0x6ee <DHT_Read+0x102>
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	48 ec       	ldi	r20, 0xC8	; 200
     6e2:	52 e4       	ldi	r21, 0x42	; 66
     6e4:	c5 01       	movw	r24, r10
     6e6:	b4 01       	movw	r22, r8
     6e8:	dd d6       	rcall	.+3514   	; 0x14a4 <__gesf2>
     6ea:	18 16       	cp	r1, r24
     6ec:	1c f4       	brge	.+6      	; 0x6f4 <DHT_Read+0x108>
			__DHT_STATUS = DHT_Error_Humidity;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__DHT_STATUS>
	}

	return DHT_GetStatus();
}
     6f4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__DHT_STATUS>
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	9f 90       	pop	r9
     716:	8f 90       	pop	r8
     718:	08 95       	ret

0000071a <ssd1306_start_command>:

void ssd1306tx_string(char *s) {
	while (*s) {
		ssd1306tx_char(*s++);
	}
}
     71a:	d6 d0       	rcall	.+428    	; 0x8c8 <I2C_start>
     71c:	88 e7       	ldi	r24, 0x78	; 120
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	e5 d0       	rcall	.+458    	; 0x8ec <I2C_write>
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	e2 d0       	rcall	.+452    	; 0x8ec <I2C_write>
     728:	08 95       	ret

0000072a <ssd1306_start_data>:
     72a:	ce d0       	rcall	.+412    	; 0x8c8 <I2C_start>
     72c:	88 e7       	ldi	r24, 0x78	; 120
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	dd d0       	rcall	.+442    	; 0x8ec <I2C_write>
     732:	80 e4       	ldi	r24, 0x40	; 64
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	da d0       	rcall	.+436    	; 0x8ec <I2C_write>
     738:	08 95       	ret

0000073a <ssd1306_init>:
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	eb df       	rcall	.-42     	; 0x71a <ssd1306_start_command>
     744:	c4 e3       	ldi	r28, 0x34	; 52
     746:	d0 e0       	ldi	r29, 0x00	; 0
     748:	04 e5       	ldi	r16, 0x54	; 84
     74a:	10 e0       	ldi	r17, 0x00	; 0
     74c:	fe 01       	movw	r30, r28
     74e:	84 91       	lpm	r24, Z
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	cc d0       	rcall	.+408    	; 0x8ec <I2C_write>
     754:	21 96       	adiw	r28, 0x01	; 1
     756:	c0 17       	cp	r28, r16
     758:	d1 07       	cpc	r29, r17
     75a:	c1 f7       	brne	.-16     	; 0x74c <ssd1306_init+0x12>
     75c:	be d0       	rcall	.+380    	; 0x8da <I2C_stop>
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	08 95       	ret

00000768 <ssd1306_setpos>:
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	c8 2f       	mov	r28, r24
     76e:	d6 2f       	mov	r29, r22
     770:	d4 df       	rcall	.-88     	; 0x71a <ssd1306_start_command>
     772:	d7 70       	andi	r29, 0x07	; 7
     774:	8d 2f       	mov	r24, r29
     776:	80 6b       	ori	r24, 0xB0	; 176
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	b8 d0       	rcall	.+368    	; 0x8ec <I2C_write>
     77c:	8c 2f       	mov	r24, r28
     77e:	8f 70       	andi	r24, 0x0F	; 15
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	b4 d0       	rcall	.+360    	; 0x8ec <I2C_write>
     784:	c2 95       	swap	r28
     786:	cf 70       	andi	r28, 0x0F	; 15
     788:	8c 2f       	mov	r24, r28
     78a:	80 61       	ori	r24, 0x10	; 16
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	ae d0       	rcall	.+348    	; 0x8ec <I2C_write>
     790:	a4 d0       	rcall	.+328    	; 0x8da <I2C_stop>
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <ssd1306_stop>:
     798:	a0 d0       	rcall	.+320    	; 0x8da <I2C_stop>
     79a:	08 95       	ret

0000079c <ssd1306_clear_display>:
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	d0 e0       	ldi	r29, 0x00	; 0
     7a2:	6d 2f       	mov	r22, r29
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	e0 df       	rcall	.-64     	; 0x768 <ssd1306_setpos>
     7a8:	c0 df       	rcall	.-128    	; 0x72a <ssd1306_start_data>
     7aa:	c0 e8       	ldi	r28, 0x80	; 128
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	9d d0       	rcall	.+314    	; 0x8ec <I2C_write>
     7b2:	c1 50       	subi	r28, 0x01	; 1
     7b4:	d9 f7       	brne	.-10     	; 0x7ac <ssd1306_clear_display+0x10>
     7b6:	df 5f       	subi	r29, 0xFF	; 255
     7b8:	d8 30       	cpi	r29, 0x08	; 8
     7ba:	99 f7       	brne	.-26     	; 0x7a2 <ssd1306_clear_display+0x6>
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <ssd1306tx_init>:
     7c2:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <ssd1306tx_font_src+0x1>
     7c6:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <ssd1306tx_font_src>
     7ca:	60 93 6d 01 	sts	0x016D, r22	; 0x80016d <ssd1306tx_font_char_base>
     7ce:	08 95       	ret

000007d0 <ssd1306tx_stringxy>:

void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
     7d0:	8f 92       	push	r8
     7d2:	9f 92       	push	r9
     7d4:	af 92       	push	r10
     7d6:	bf 92       	push	r11
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	6c 01       	movw	r12, r24
     7ea:	96 2e       	mov	r9, r22
     7ec:	84 2e       	mov	r8, r20
	uint16_t j, k = 0;
	while (s[k] != '\0') {
     7ee:	f9 01       	movw	r30, r18
     7f0:	a0 80       	ld	r10, Z
     7f2:	aa 20       	and	r10, r10
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <ssd1306tx_stringxy+0x28>
     7f6:	44 c0       	rjmp	.+136    	; 0x880 <ssd1306tx_stringxy+0xb0>
     7f8:	79 01       	movw	r14, r18
     7fa:	ff ef       	ldi	r31, 0xFF	; 255
     7fc:	ef 1a       	sub	r14, r31
     7fe:	ff 0a       	sbc	r15, r31
		j = s[k] * 16 - (32 * 16); // Convert ASCII code to font data index. NOTE: (x*16) already optimized to (x<<4).
     800:	b1 2c       	mov	r11, r1
     802:	80 e2       	ldi	r24, 0x20	; 32
     804:	a8 1a       	sub	r10, r24
     806:	b1 08       	sbc	r11, r1
     808:	aa 0c       	add	r10, r10
     80a:	bb 1c       	adc	r11, r11
     80c:	aa 0c       	add	r10, r10
     80e:	bb 1c       	adc	r11, r11
     810:	aa 0c       	add	r10, r10
     812:	bb 1c       	adc	r11, r11
     814:	aa 0c       	add	r10, r10
     816:	bb 1c       	adc	r11, r11
		if (x > 120) {
     818:	e8 e7       	ldi	r30, 0x78	; 120
     81a:	e9 15       	cp	r30, r9
     81c:	10 f4       	brcc	.+4      	; 0x822 <ssd1306tx_stringxy+0x52>
			x = 0;    // Go to the next line.
			y++;
     81e:	83 94       	inc	r8
void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
	uint16_t j, k = 0;
	while (s[k] != '\0') {
		j = s[k] * 16 - (32 * 16); // Convert ASCII code to font data index. NOTE: (x*16) already optimized to (x<<4).
		if (x > 120) {
			x = 0;    // Go to the next line.
     820:	91 2c       	mov	r9, r1
			y++;
		}
		ssd1306_setpos(x, y);
     822:	68 2d       	mov	r22, r8
     824:	89 2d       	mov	r24, r9
     826:	a0 df       	rcall	.-192    	; 0x768 <ssd1306_setpos>
		ssd1306_start_data();
     828:	80 df       	rcall	.-256    	; 0x72a <ssd1306_start_data>
     82a:	86 01       	movw	r16, r12
     82c:	0a 0d       	add	r16, r10
     82e:	1b 1d       	adc	r17, r11
     830:	e5 01       	movw	r28, r10
     832:	28 96       	adiw	r28, 0x08	; 8
     834:	cc 0d       	add	r28, r12
     836:	dd 1d       	adc	r29, r13
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
     838:	f8 01       	movw	r30, r16
     83a:	84 91       	lpm	r24, Z
	}
	I2C_stop();	// Finish transmission
}

void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	56 d0       	rcall	.+172    	; 0x8ec <I2C_write>
     840:	0f 5f       	subi	r16, 0xFF	; 255
     842:	1f 4f       	sbci	r17, 0xFF	; 255
			x = 0;    // Go to the next line.
			y++;
		}
		ssd1306_setpos(x, y);
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
     844:	0c 17       	cp	r16, r28
     846:	1d 07       	cpc	r17, r29
     848:	b9 f7       	brne	.-18     	; 0x838 <ssd1306tx_stringxy+0x68>
void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
}

void ssd1306_stop(void) {
	I2C_stop();
     84a:	47 d0       	rcall	.+142    	; 0x8da <I2C_stop>
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
		}
		ssd1306_stop();
		ssd1306_setpos(x, y + 1);
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	68 0d       	add	r22, r8
     850:	89 2d       	mov	r24, r9
     852:	8a df       	rcall	.-236    	; 0x768 <ssd1306_setpos>
		ssd1306_start_data();
     854:	6a df       	rcall	.-300    	; 0x72a <ssd1306_start_data>
     856:	85 01       	movw	r16, r10
     858:	00 5f       	subi	r16, 0xF0	; 240
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
     85c:	0c 0d       	add	r16, r12
     85e:	1d 1d       	adc	r17, r13
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i + 8]));
     860:	fe 01       	movw	r30, r28
     862:	84 91       	lpm	r24, Z
	}
	I2C_stop();	// Finish transmission
}

void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	42 d0       	rcall	.+132    	; 0x8ec <I2C_write>
     868:	21 96       	adiw	r28, 0x01	; 1
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
		}
		ssd1306_stop();
		ssd1306_setpos(x, y + 1);
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
     86a:	c0 17       	cp	r28, r16
     86c:	d1 07       	cpc	r29, r17
     86e:	c1 f7       	brne	.-16     	; 0x860 <ssd1306tx_stringxy+0x90>
void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
}

void ssd1306_stop(void) {
	I2C_stop();
     870:	34 d0       	rcall	.+104    	; 0x8da <I2C_stop>
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i + 8]));
		}
		ssd1306_stop();
		x += 8;
     872:	f8 e0       	ldi	r31, 0x08	; 8
     874:	9f 0e       	add	r9, r31
	}
}

void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
	uint16_t j, k = 0;
	while (s[k] != '\0') {
     876:	f7 01       	movw	r30, r14
     878:	a1 90       	ld	r10, Z+
     87a:	7f 01       	movw	r14, r30
     87c:	a1 10       	cpse	r10, r1
     87e:	c0 cf       	rjmp	.-128    	; 0x800 <ssd1306tx_stringxy+0x30>
		}
		ssd1306_stop();
		x += 8;
		k++;
	}
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	08 95       	ret

0000089a <I2C_Initialize>:
{
	//TWSR |= 0x00; // Set prescaler to 1

	uint8_t bitrate_div;

	bitrate_div = ((F_CPU/1000l)/bitRate_kHz);
     89a:	9c 01       	movw	r18, r24
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	60 e4       	ldi	r22, 0x40	; 64
     8a2:	7f e1       	ldi	r23, 0x1F	; 31
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	01 d6       	rcall	.+3074   	; 0x14ac <__divmodsi4>
     8aa:	82 2f       	mov	r24, r18
	
	if(bitrate_div >= 16)
     8ac:	20 31       	cpi	r18, 0x10	; 16
     8ae:	48 f0       	brcs	.+18     	; 0x8c2 <I2C_Initialize+0x28>
	bitrate_div = (bitrate_div-16)/2;
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	20 51       	subi	r18, 0x10	; 16
     8b4:	31 09       	sbc	r19, r1
     8b6:	c9 01       	movw	r24, r18
     8b8:	99 23       	and	r25, r25
     8ba:	0c f4       	brge	.+2      	; 0x8be <I2C_Initialize+0x24>
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	95 95       	asr	r25
     8c0:	87 95       	ror	r24
	
	TWBR = bitrate_div;
     8c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     8c6:	08 95       	ret

000008c8 <I2C_start>:
}

void I2C_start(void){
	TWCR = (1<<TWINT) | (1<<TWEN) |( 1<<TWSTA);
     8c8:	84 ea       	ldi	r24, 0xA4	; 164
     8ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWINT)));
     8ce:	ec eb       	ldi	r30, 0xBC	; 188
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	88 23       	and	r24, r24
     8d6:	ec f7       	brge	.-6      	; 0x8d2 <I2C_start+0xa>
}
     8d8:	08 95       	ret

000008da <I2C_stop>:

void I2C_stop(void){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     8da:	84 e9       	ldi	r24, 0x94	; 148
     8dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWSTO)));
     8e0:	ec eb       	ldi	r30, 0xBC	; 188
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	84 ff       	sbrs	r24, 4
     8e8:	fd cf       	rjmp	.-6      	; 0x8e4 <I2C_stop+0xa>
}
     8ea:	08 95       	ret

000008ec <I2C_write>:

void I2C_write(uint8_t dane){
	TWDR = dane;
     8ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     8f0:	84 e8       	ldi	r24, 0x84	; 132
     8f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWINT)));
     8f6:	ec eb       	ldi	r30, 0xBC	; 188
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	88 23       	and	r24, r24
     8fe:	ec f7       	brge	.-6      	; 0x8fa <I2C_write+0xe>
}
     900:	08 95       	ret

00000902 <display_init>:
#include "display_extensions.h"


void display_init()
{
	I2C_Initialize(100);
     902:	84 e6       	ldi	r24, 0x64	; 100
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	c9 df       	rcall	.-110    	; 0x89a <I2C_Initialize>
	ssd1306_init();
     908:	18 df       	rcall	.-464    	; 0x73a <ssd1306_init>
	ssd1306tx_init(ssd1306xled_font8x16data, ' ');
     90a:	60 e2       	ldi	r22, 0x20	; 32
     90c:	84 e5       	ldi	r24, 0x54	; 84
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	58 df       	rcall	.-336    	; 0x7c2 <ssd1306tx_init>
	ssd1306_start_command();
     912:	03 df       	rcall	.-506    	; 0x71a <ssd1306_start_command>
	I2C_write(0xA6);
     914:	86 ea       	ldi	r24, 0xA6	; 166
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	e9 df       	rcall	.-46     	; 0x8ec <I2C_write>
	ssd1306_stop();
     91a:	3e df       	rcall	.-388    	; 0x798 <ssd1306_stop>
	ssd1306_clear_display();
     91c:	3f df       	rcall	.-386    	; 0x79c <ssd1306_clear_display>
     91e:	08 95       	ret

00000920 <draw_string>:
	
	draw_string(xstart + 110, ystart + 8,number_as_char);
}

void draw_string(uint8_t xstart, uint8_t ystart, char* str)
{
     920:	9a 01       	movw	r18, r20
	ssd1306tx_stringxy(ssd1306xled_font8x16data, xstart, ystart, str);
     922:	46 2f       	mov	r20, r22
     924:	68 2f       	mov	r22, r24
     926:	84 e5       	ldi	r24, 0x54	; 84
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	52 df       	rcall	.-348    	; 0x7d0 <ssd1306tx_stringxy>
     92c:	08 95       	ret

0000092e <draw_number>:
//draw_digit(xstart, ystart, first);
//draw_digit(xstart+ 24,ystart, second);
//}

void draw_number(uint8_t xstart, uint8_t ystart, uint8_t number)
{
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	00 d0       	rcall	.+0      	; 0x938 <draw_number+0xa>
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	08 2f       	mov	r16, r24
     93e:	16 2f       	mov	r17, r22
	char number_as_char[2];
	
	if(number < 10)
     940:	4a 30       	cpi	r20, 0x0A	; 10
     942:	90 f4       	brcc	.+36     	; 0x968 <draw_number+0x3a>
	sprintf(number_as_char, "0%d", number);
     944:	1f 92       	push	r1
     946:	4f 93       	push	r20
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	9f 93       	push	r25
     94e:	8f 93       	push	r24
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	9f 93       	push	r25
     956:	8f 93       	push	r24
     958:	e7 d5       	rcall	.+3022   	; 0x1528 <sprintf>
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	11 c0       	rjmp	.+34     	; 0x98a <draw_number+0x5c>
	else
	sprintf(number_as_char, "%d", number);
     968:	1f 92       	push	r1
     96a:	4f 93       	push	r20
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	9f 93       	push	r25
     972:	8f 93       	push	r24
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	9f 93       	push	r25
     97a:	8f 93       	push	r24
     97c:	d5 d5       	rcall	.+2986   	; 0x1528 <sprintf>
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
	
	draw_string(xstart + 110, ystart + 8,number_as_char);
     98a:	68 e0       	ldi	r22, 0x08	; 8
     98c:	61 0f       	add	r22, r17
     98e:	ae 01       	movw	r20, r28
     990:	4f 5f       	subi	r20, 0xFF	; 255
     992:	5f 4f       	sbci	r21, 0xFF	; 255
     994:	8e e6       	ldi	r24, 0x6E	; 110
     996:	80 0f       	add	r24, r16
     998:	c3 df       	rcall	.-122    	; 0x920 <draw_string>
}
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	08 95       	ret

000009a8 <draw_clock>:
{
	ssd1306tx_stringxy(ssd1306xled_font8x16data, xstart, ystart, str);
}

void draw_clock(uint8_t xstart, uint8_t ystart, uint8_t hours, uint8_t minutes, uint8_t seconds, bool displayHour, bool displayMinute, bool displaySecond)
{
     9a8:	af 92       	push	r10
     9aa:	cf 92       	push	r12
     9ac:	ef 92       	push	r14
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	d8 2f       	mov	r29, r24
     9b8:	c6 2f       	mov	r28, r22
     9ba:	12 2f       	mov	r17, r18
	if(displayHour == 1)
     9bc:	e1 10       	cpse	r14, r1
	{
		draw_number(xstart,ystart, hours);
     9be:	b7 df       	rcall	.-146    	; 0x92e <draw_number>
	}
	
	draw_string(xstart +48, ystart +1, ":");
     9c0:	45 e0       	ldi	r20, 0x05	; 5
     9c2:	51 e0       	ldi	r21, 0x01	; 1
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	6c 0f       	add	r22, r28
     9c8:	80 e3       	ldi	r24, 0x30	; 48
     9ca:	8d 0f       	add	r24, r29
     9cc:	a9 df       	rcall	.-174    	; 0x920 <draw_string>
	
	if(displayMinute == 1)
     9ce:	cc 20       	and	r12, r12
     9d0:	29 f0       	breq	.+10     	; 0x9dc <draw_clock+0x34>
	{
		draw_number(xstart + 60, ystart, minutes);
     9d2:	41 2f       	mov	r20, r17
     9d4:	6c 2f       	mov	r22, r28
     9d6:	8c e3       	ldi	r24, 0x3C	; 60
     9d8:	8d 0f       	add	r24, r29
     9da:	a9 df       	rcall	.-174    	; 0x92e <draw_number>
	}
	
	if(displaySecond == 1)
     9dc:	aa 20       	and	r10, r10
     9de:	31 f0       	breq	.+12     	; 0x9ec <draw_clock+0x44>
	{
		draw_number(xstart + 110, ystart+8,seconds);
     9e0:	68 e0       	ldi	r22, 0x08	; 8
     9e2:	6c 0f       	add	r22, r28
     9e4:	40 2f       	mov	r20, r16
     9e6:	8e e6       	ldi	r24, 0x6E	; 110
     9e8:	8d 0f       	add	r24, r29
     9ea:	a1 df       	rcall	.-190    	; 0x92e <draw_number>
	}
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ef 90       	pop	r14
     9f6:	cf 90       	pop	r12
     9f8:	af 90       	pop	r10
     9fa:	08 95       	ret

000009fc <draw_its_time>:

void draw_its_time()
{
	draw_string(2,2,"IT IS TIME!!!");
     9fc:	47 e0       	ldi	r20, 0x07	; 7
     9fe:	51 e0       	ldi	r21, 0x01	; 1
     a00:	62 e0       	ldi	r22, 0x02	; 2
     a02:	82 e0       	ldi	r24, 0x02	; 2
     a04:	8d df       	rcall	.-230    	; 0x920 <draw_string>
	draw_string(2,4,"IT IS TIME!!!");
     a06:	47 e0       	ldi	r20, 0x07	; 7
     a08:	51 e0       	ldi	r21, 0x01	; 1
     a0a:	64 e0       	ldi	r22, 0x04	; 4
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	88 df       	rcall	.-240    	; 0x920 <draw_string>
	draw_string(2,6,"IT IS TIME!!!");
     a10:	47 e0       	ldi	r20, 0x07	; 7
     a12:	51 e0       	ldi	r21, 0x01	; 1
     a14:	66 e0       	ldi	r22, 0x06	; 6
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	83 df       	rcall	.-250    	; 0x920 <draw_string>
     a1a:	08 95       	ret

00000a1c <refresh_screen>:
	_delay_ms(200);
}

void refresh_screen()
{
	if(selectedMenu == MENU_CLOCK)
     a1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a20:	8a 30       	cpi	r24, 0x0A	; 10
     a22:	11 f4       	brne	.+4      	; 0xa28 <refresh_screen+0xc>
	display_clock_view();
     a24:	f3 d2       	rcall	.+1510   	; 0x100c <display_clock_view>
     a26:	08 95       	ret
	else if (selectedMenu == MENU_CLOCK_SET_HOUR)
     a28:	8b 30       	cpi	r24, 0x0B	; 11
     a2a:	11 f4       	brne	.+4      	; 0xa30 <refresh_screen+0x14>
	display_clock_hour_set_view();
     a2c:	0e d3       	rcall	.+1564   	; 0x104a <display_clock_hour_set_view>
     a2e:	08 95       	ret
	else if (selectedMenu == MENU_CLOCK_SET_MINUTE)
     a30:	8c 30       	cpi	r24, 0x0C	; 12
     a32:	11 f4       	brne	.+4      	; 0xa38 <refresh_screen+0x1c>
	display_clock_minute_set_view();
     a34:	27 d3       	rcall	.+1614   	; 0x1084 <display_clock_minute_set_view>
     a36:	08 95       	ret
	else if (selectedMenu == MENU_TIMER)
     a38:	84 31       	cpi	r24, 0x14	; 20
     a3a:	11 f4       	brne	.+4      	; 0xa40 <refresh_screen+0x24>
	display_timer_view();
     a3c:	ee d3       	rcall	.+2012   	; 0x121a <display_timer_view>
     a3e:	08 95       	ret
	else if (selectedMenu == MENU_TIMER_SET_HOUR)
     a40:	85 31       	cpi	r24, 0x15	; 21
     a42:	11 f4       	brne	.+4      	; 0xa48 <refresh_screen+0x2c>
	display_timer_hour_set_view();
     a44:	f7 d3       	rcall	.+2030   	; 0x1234 <display_timer_hour_set_view>
     a46:	08 95       	ret
	else if (selectedMenu == MENU_TIMER_SET_MINUTE)
     a48:	86 31       	cpi	r24, 0x16	; 22
     a4a:	11 f4       	brne	.+4      	; 0xa50 <refresh_screen+0x34>
	display_timer_minute_set_view();
     a4c:	00 d4       	rcall	.+2048   	; 0x124e <display_timer_minute_set_view>
     a4e:	08 95       	ret
	else if (selectedMenu == MENU_TEMPEREATURE)
     a50:	88 32       	cpi	r24, 0x28	; 40
     a52:	11 f4       	brne	.+4      	; 0xa58 <refresh_screen+0x3c>
	display_temperature_view();
     a54:	34 d3       	rcall	.+1640   	; 0x10be <display_temperature_view>
     a56:	08 95       	ret
	else if (selectedMenu == MENU_ALARM)
     a58:	8e 31       	cpi	r24, 0x1E	; 30
     a5a:	11 f4       	brne	.+4      	; 0xa60 <refresh_screen+0x44>
	display_alarm_view();
     a5c:	47 d2       	rcall	.+1166   	; 0xeec <display_alarm_view>
     a5e:	08 95       	ret
	else if (selectedMenu == MENU_ALARM_SET_HOUR)
     a60:	8f 31       	cpi	r24, 0x1F	; 31
     a62:	11 f4       	brne	.+4      	; 0xa68 <refresh_screen+0x4c>
	display_alarm_hour_set_view();
     a64:	60 d2       	rcall	.+1216   	; 0xf26 <display_alarm_hour_set_view>
     a66:	08 95       	ret
	else if (selectedMenu == MENU_ALARM_SET_MINUTE)
     a68:	80 32       	cpi	r24, 0x20	; 32
     a6a:	09 f4       	brne	.+2      	; 0xa6e <refresh_screen+0x52>
	display_alarm_minute_set_view();
     a6c:	79 d2       	rcall	.+1266   	; 0xf60 <display_alarm_minute_set_view>
     a6e:	08 95       	ret

00000a70 <clock_set_minute_confirm>:
	temperature_view();
}

void clock_set_minute_confirm()
{
	clock_save();
     a70:	b0 d2       	rcall	.+1376   	; 0xfd2 <clock_save>
	selectedMenu = MENU_CLOCK;
     a72:	8a e0       	ldi	r24, 0x0A	; 10
     a74:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     a78:	08 95       	ret

00000a7a <timer_view>:
}

void timer_view()
{
	if(timerIsRunning == 0)
     a7a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <timerIsRunning>
     a7e:	81 11       	cpse	r24, r1
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <timer_view+0xa>
	timer_reset();
     a82:	47 d3       	rcall	.+1678   	; 0x1112 <timer_reset>
	
	selectedMenu = MENU_TIMER;
     a84:	84 e1       	ldi	r24, 0x14	; 20
     a86:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     a8a:	08 95       	ret

00000a8c <timer_set_hour>:
}

void timer_set_hour()
{
	if(timerIsRunning == 1 && timerIsReady == 1)
     a8c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <timerIsRunning>
     a90:	88 23       	and	r24, r24
     a92:	21 f0       	breq	.+8      	; 0xa9c <timer_set_hour+0x10>
     a94:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <timerIsReady>
     a98:	81 11       	cpse	r24, r1
	timer_reset();
     a9a:	3b d3       	rcall	.+1654   	; 0x1112 <timer_reset>

	selectedMenu = MENU_TIMER_SET_HOUR;
     a9c:	85 e1       	ldi	r24, 0x15	; 21
     a9e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     aa2:	08 95       	ret

00000aa4 <timer_set_minute_confirm>:
}

void timer_set_minute_confirm()
{
	timer_run();
     aa4:	42 d3       	rcall	.+1668   	; 0x112a <timer_run>
	timer_view();
     aa6:	e9 df       	rcall	.-46     	; 0xa7a <timer_view>
     aa8:	08 95       	ret

00000aaa <alarm_view>:
}

void alarm_view()
{
	//if(alarmIsRunning == 0)
	alarm_reset();
     aaa:	be d1       	rcall	.+892    	; 0xe28 <alarm_reset>
	
	selectedMenu = MENU_ALARM;
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     ab2:	08 95       	ret

00000ab4 <alarm_set_hour>:
}

void alarm_set_hour()
{
	//if(alarmIsRunning == 1 && alarmIsReady == 1)
	alarm_reset();
     ab4:	b9 d1       	rcall	.+882    	; 0xe28 <alarm_reset>

	selectedMenu = MENU_ALARM_SET_HOUR;
     ab6:	8f e1       	ldi	r24, 0x1F	; 31
     ab8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     abc:	08 95       	ret

00000abe <alarm_set_minute_confirm>:
}

void alarm_set_minute_confirm()
{
	alarm_run();
     abe:	c0 d1       	rcall	.+896    	; 0xe40 <alarm_run>
	alarm_view();
     ac0:	f4 df       	rcall	.-24     	; 0xaaa <alarm_view>
     ac2:	08 95       	ret

00000ac4 <switch_menu>:
	display_alarm_minute_set_view();
}

void switch_menu()
{
	if(BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK)
     ac4:	33 99       	sbic	0x06, 3	; 6
     ac6:	08 c0       	rjmp	.+16     	; 0xad8 <switch_menu+0x14>
     ac8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     acc:	8a 30       	cpi	r24, 0x0A	; 10
     ace:	21 f4       	brne	.+8      	; 0xad8 <switch_menu+0x14>
	selectedMenu = MENU_CLOCK_SET_HOUR;
     ad0:	8b e0       	ldi	r24, 0x0B	; 11
     ad2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     ad6:	08 95       	ret

	else if (BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     ad8:	33 99       	sbic	0x06, 3	; 6
     ada:	06 c0       	rjmp	.+12     	; 0xae8 <switch_menu+0x24>
     adc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ae0:	8b 30       	cpi	r24, 0x0B	; 11
     ae2:	11 f4       	brne	.+4      	; 0xae8 <switch_menu+0x24>
	add_hour();
     ae4:	33 d1       	rcall	.+614    	; 0xd4c <add_hour>
     ae6:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     ae8:	32 99       	sbic	0x06, 2	; 6
     aea:	07 c0       	rjmp	.+14     	; 0xafa <switch_menu+0x36>
     aec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     af0:	8b 30       	cpi	r24, 0x0B	; 11
     af2:	09 f0       	breq	.+2      	; 0xaf6 <switch_menu+0x32>
     af4:	f6 c0       	rjmp	.+492    	; 0xce2 <switch_menu+0x21e>
	subtract_hour();
     af6:	3c d1       	rcall	.+632    	; 0xd70 <subtract_hour>
     af8:	08 95       	ret
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     afa:	1a 99       	sbic	0x03, 2	; 3
     afc:	09 c0       	rjmp	.+18     	; 0xb10 <switch_menu+0x4c>
     afe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b02:	8b 30       	cpi	r24, 0x0B	; 11
     b04:	09 f0       	breq	.+2      	; 0xb08 <switch_menu+0x44>
     b06:	e1 c0       	rjmp	.+450    	; 0xcca <switch_menu+0x206>
	selectedMenu = MENU_CLOCK_SET_MINUTE;
     b08:	8c e0       	ldi	r24, 0x0C	; 12
     b0a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     b0e:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     b10:	19 99       	sbic	0x03, 1	; 3
     b12:	08 c0       	rjmp	.+16     	; 0xb24 <switch_menu+0x60>
     b14:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b18:	8b 30       	cpi	r24, 0x0B	; 11
     b1a:	21 f4       	brne	.+8      	; 0xb24 <switch_menu+0x60>
	selectedMenu = MENU_CLOCK;
     b1c:	8a e0       	ldi	r24, 0x0A	; 10
     b1e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     b22:	08 95       	ret

	else if (BUTTON_1_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     b24:	33 99       	sbic	0x06, 3	; 6
     b26:	06 c0       	rjmp	.+12     	; 0xb34 <switch_menu+0x70>
     b28:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b2c:	8c 30       	cpi	r24, 0x0C	; 12
     b2e:	11 f4       	brne	.+4      	; 0xb34 <switch_menu+0x70>
	add_minute();
     b30:	16 d1       	rcall	.+556    	; 0xd5e <add_minute>
     b32:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     b34:	32 99       	sbic	0x06, 2	; 6
     b36:	07 c0       	rjmp	.+14     	; 0xb46 <switch_menu+0x82>
     b38:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b3c:	8c 30       	cpi	r24, 0x0C	; 12
     b3e:	09 f0       	breq	.+2      	; 0xb42 <switch_menu+0x7e>
     b40:	d3 c0       	rjmp	.+422    	; 0xce8 <switch_menu+0x224>
	subtract_minute();
     b42:	1e d1       	rcall	.+572    	; 0xd80 <subtract_minute>
     b44:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     b46:	1a 99       	sbic	0x03, 2	; 3
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <switch_menu+0x94>
     b4a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b4e:	8c 30       	cpi	r24, 0x0C	; 12
     b50:	09 f0       	breq	.+2      	; 0xb54 <switch_menu+0x90>
     b52:	bd c0       	rjmp	.+378    	; 0xcce <switch_menu+0x20a>
	clock_set_minute_confirm();
     b54:	8d df       	rcall	.-230    	; 0xa70 <clock_set_minute_confirm>
     b56:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     b58:	19 99       	sbic	0x03, 1	; 3
     b5a:	08 c0       	rjmp	.+16     	; 0xb6c <switch_menu+0xa8>
     b5c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b60:	8c 30       	cpi	r24, 0x0C	; 12
     b62:	21 f4       	brne	.+8      	; 0xb6c <switch_menu+0xa8>
	selectedMenu = MENU_CLOCK_SET_HOUR;
     b64:	8b e0       	ldi	r24, 0x0B	; 11
     b66:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     b6a:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER)
     b6c:	32 99       	sbic	0x06, 2	; 6
     b6e:	06 c0       	rjmp	.+12     	; 0xb7c <switch_menu+0xb8>
     b70:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b74:	84 31       	cpi	r24, 0x14	; 20
     b76:	11 f4       	brne	.+4      	; 0xb7c <switch_menu+0xb8>
	timer_set_hour();
     b78:	89 df       	rcall	.-238    	; 0xa8c <timer_set_hour>
     b7a:	08 95       	ret
	
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     b7c:	33 99       	sbic	0x06, 3	; 6
     b7e:	06 c0       	rjmp	.+12     	; 0xb8c <switch_menu+0xc8>
     b80:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b84:	85 31       	cpi	r24, 0x15	; 21
     b86:	11 f4       	brne	.+4      	; 0xb8c <switch_menu+0xc8>
	add_hour();
     b88:	e1 d0       	rcall	.+450    	; 0xd4c <add_hour>
     b8a:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     b8c:	32 99       	sbic	0x06, 2	; 6
     b8e:	07 c0       	rjmp	.+14     	; 0xb9e <switch_menu+0xda>
     b90:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b94:	85 31       	cpi	r24, 0x15	; 21
     b96:	09 f0       	breq	.+2      	; 0xb9a <switch_menu+0xd6>
     b98:	aa c0       	rjmp	.+340    	; 0xcee <switch_menu+0x22a>
	subtract_hour();
     b9a:	ea d0       	rcall	.+468    	; 0xd70 <subtract_hour>
     b9c:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     b9e:	1a 99       	sbic	0x03, 2	; 3
     ba0:	09 c0       	rjmp	.+18     	; 0xbb4 <switch_menu+0xf0>
     ba2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ba6:	85 31       	cpi	r24, 0x15	; 21
     ba8:	09 f0       	breq	.+2      	; 0xbac <switch_menu+0xe8>
     baa:	93 c0       	rjmp	.+294    	; 0xcd2 <switch_menu+0x20e>
	selectedMenu = MENU_TIMER_SET_MINUTE;
     bac:	86 e1       	ldi	r24, 0x16	; 22
     bae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     bb2:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     bb4:	19 99       	sbic	0x03, 1	; 3
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <switch_menu+0x100>
     bb8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     bbc:	85 31       	cpi	r24, 0x15	; 21
     bbe:	11 f4       	brne	.+4      	; 0xbc4 <switch_menu+0x100>
	timer_view();
     bc0:	5c df       	rcall	.-328    	; 0xa7a <timer_view>
     bc2:	08 95       	ret

	else if (BUTTON_1_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     bc4:	33 99       	sbic	0x06, 3	; 6
     bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <switch_menu+0x110>
     bc8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     bcc:	86 31       	cpi	r24, 0x16	; 22
     bce:	11 f4       	brne	.+4      	; 0xbd4 <switch_menu+0x110>
	add_minute();
     bd0:	c6 d0       	rcall	.+396    	; 0xd5e <add_minute>
     bd2:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     bd4:	32 99       	sbic	0x06, 2	; 6
     bd6:	07 c0       	rjmp	.+14     	; 0xbe6 <switch_menu+0x122>
     bd8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     bdc:	86 31       	cpi	r24, 0x16	; 22
     bde:	09 f0       	breq	.+2      	; 0xbe2 <switch_menu+0x11e>
     be0:	89 c0       	rjmp	.+274    	; 0xcf4 <switch_menu+0x230>
	subtract_minute();
     be2:	ce d0       	rcall	.+412    	; 0xd80 <subtract_minute>
     be4:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     be6:	1a 99       	sbic	0x03, 2	; 3
     be8:	07 c0       	rjmp	.+14     	; 0xbf8 <switch_menu+0x134>
     bea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     bee:	86 31       	cpi	r24, 0x16	; 22
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <switch_menu+0x130>
     bf2:	71 c0       	rjmp	.+226    	; 0xcd6 <switch_menu+0x212>
	timer_set_minute_confirm();
     bf4:	57 df       	rcall	.-338    	; 0xaa4 <timer_set_minute_confirm>
     bf6:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     bf8:	19 99       	sbic	0x03, 1	; 3
     bfa:	06 c0       	rjmp	.+12     	; 0xc08 <switch_menu+0x144>
     bfc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c00:	86 31       	cpi	r24, 0x16	; 22
     c02:	11 f4       	brne	.+4      	; 0xc08 <switch_menu+0x144>
	timer_set_hour();
     c04:	43 df       	rcall	.-378    	; 0xa8c <timer_set_hour>
     c06:	08 95       	ret
	
	else if (BUTTON_3_PRESSED && selectedMenu == MENU_ALARM)
     c08:	1a 99       	sbic	0x03, 2	; 3
     c0a:	06 c0       	rjmp	.+12     	; 0xc18 <switch_menu+0x154>
     c0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c10:	8e 31       	cpi	r24, 0x1E	; 30
     c12:	11 f4       	brne	.+4      	; 0xc18 <switch_menu+0x154>
	alarm_set_hour();
     c14:	4f df       	rcall	.-354    	; 0xab4 <alarm_set_hour>
     c16:	08 95       	ret
	
	else if (BUTTON_1_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     c18:	33 99       	sbic	0x06, 3	; 6
     c1a:	06 c0       	rjmp	.+12     	; 0xc28 <switch_menu+0x164>
     c1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c20:	8f 31       	cpi	r24, 0x1F	; 31
     c22:	11 f4       	brne	.+4      	; 0xc28 <switch_menu+0x164>
	add_hour();
     c24:	93 d0       	rcall	.+294    	; 0xd4c <add_hour>
     c26:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     c28:	32 99       	sbic	0x06, 2	; 6
     c2a:	07 c0       	rjmp	.+14     	; 0xc3a <switch_menu+0x176>
     c2c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c30:	8f 31       	cpi	r24, 0x1F	; 31
     c32:	09 f0       	breq	.+2      	; 0xc36 <switch_menu+0x172>
     c34:	62 c0       	rjmp	.+196    	; 0xcfa <switch_menu+0x236>
	subtract_hour();
     c36:	9c d0       	rcall	.+312    	; 0xd70 <subtract_hour>
     c38:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     c3a:	1a 99       	sbic	0x03, 2	; 3
     c3c:	09 c0       	rjmp	.+18     	; 0xc50 <switch_menu+0x18c>
     c3e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c42:	8f 31       	cpi	r24, 0x1F	; 31
     c44:	09 f0       	breq	.+2      	; 0xc48 <switch_menu+0x184>
     c46:	49 c0       	rjmp	.+146    	; 0xcda <switch_menu+0x216>
	selectedMenu = MENU_ALARM_SET_MINUTE;
     c48:	80 e2       	ldi	r24, 0x20	; 32
     c4a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     c4e:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     c50:	19 99       	sbic	0x03, 1	; 3
     c52:	06 c0       	rjmp	.+12     	; 0xc60 <switch_menu+0x19c>
     c54:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c58:	8f 31       	cpi	r24, 0x1F	; 31
     c5a:	11 f4       	brne	.+4      	; 0xc60 <switch_menu+0x19c>
	alarm_view();
     c5c:	26 df       	rcall	.-436    	; 0xaaa <alarm_view>
     c5e:	08 95       	ret

	else if (BUTTON_1_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     c60:	33 99       	sbic	0x06, 3	; 6
     c62:	06 c0       	rjmp	.+12     	; 0xc70 <switch_menu+0x1ac>
     c64:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c68:	80 32       	cpi	r24, 0x20	; 32
     c6a:	11 f4       	brne	.+4      	; 0xc70 <switch_menu+0x1ac>
	add_minute();
     c6c:	78 d0       	rcall	.+240    	; 0xd5e <add_minute>
     c6e:	08 95       	ret
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     c70:	32 99       	sbic	0x06, 2	; 6
     c72:	07 c0       	rjmp	.+14     	; 0xc82 <switch_menu+0x1be>
     c74:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c78:	80 32       	cpi	r24, 0x20	; 32
     c7a:	09 f0       	breq	.+2      	; 0xc7e <switch_menu+0x1ba>
     c7c:	41 c0       	rjmp	.+130    	; 0xd00 <switch_menu+0x23c>
	subtract_minute();
     c7e:	80 d0       	rcall	.+256    	; 0xd80 <subtract_minute>
     c80:	08 95       	ret

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     c82:	1a 99       	sbic	0x03, 2	; 3
     c84:	06 c0       	rjmp	.+12     	; 0xc92 <switch_menu+0x1ce>
     c86:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c8a:	80 32       	cpi	r24, 0x20	; 32
     c8c:	41 f5       	brne	.+80     	; 0xcde <switch_menu+0x21a>
	alarm_set_minute_confirm();
     c8e:	17 df       	rcall	.-466    	; 0xabe <alarm_set_minute_confirm>
     c90:	08 95       	ret
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     c92:	19 99       	sbic	0x03, 1	; 3
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <switch_menu+0x1de>
     c96:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c9a:	80 32       	cpi	r24, 0x20	; 32
     c9c:	11 f4       	brne	.+4      	; 0xca2 <switch_menu+0x1de>
	alarm_set_hour();
     c9e:	0a df       	rcall	.-492    	; 0xab4 <alarm_set_hour>
     ca0:	08 95       	ret
	
	else if(BUTTON_1_PRESSED)
     ca2:	33 99       	sbic	0x06, 3	; 6
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <switch_menu+0x1ea>
	selectedMenu = MENU_CLOCK;
     ca6:	8a e0       	ldi	r24, 0x0A	; 10
     ca8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     cac:	08 95       	ret
	
	else if (BUTTON_2_PRESSED)
     cae:	32 99       	sbic	0x06, 2	; 6
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <switch_menu+0x1f2>
	timer_view();
     cb2:	e3 de       	rcall	.-570    	; 0xa7a <timer_view>
     cb4:	08 95       	ret
	
	else if (BUTTON_3_PRESSED)
     cb6:	1a 99       	sbic	0x03, 2	; 3
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <switch_menu+0x1fa>
	alarm_view();
     cba:	f7 de       	rcall	.-530    	; 0xaaa <alarm_view>
     cbc:	08 95       	ret
	
	else if (BUTTON_4_PRESSED)
     cbe:	19 99       	sbic	0x03, 1	; 3
     cc0:	22 c0       	rjmp	.+68     	; 0xd06 <switch_menu+0x242>
	alarm_view();
}

void temperature_view()
{
	selectedMenu = MENU_TEMPEREATURE;
     cc2:	88 e2       	ldi	r24, 0x28	; 40
     cc4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	else if (BUTTON_3_PRESSED)
	alarm_view();
	
	else if (BUTTON_4_PRESSED)
	temperature_view();
}
     cc8:	08 95       	ret
	subtract_hour();
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
	selectedMenu = MENU_CLOCK_SET_MINUTE;
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     cca:	83 b1       	in	r24, 0x03	; 3
     ccc:	2b cf       	rjmp	.-426    	; 0xb24 <switch_menu+0x60>
	subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
	clock_set_minute_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     cce:	83 b1       	in	r24, 0x03	; 3
     cd0:	4d cf       	rjmp	.-358    	; 0xb6c <switch_menu+0xa8>
	subtract_hour();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
	selectedMenu = MENU_TIMER_SET_MINUTE;
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     cd2:	83 b1       	in	r24, 0x03	; 3
     cd4:	77 cf       	rjmp	.-274    	; 0xbc4 <switch_menu+0x100>
	subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
	timer_set_minute_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     cd6:	83 b1       	in	r24, 0x03	; 3
     cd8:	97 cf       	rjmp	.-210    	; 0xc08 <switch_menu+0x144>
	subtract_hour();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
	selectedMenu = MENU_ALARM_SET_MINUTE;
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     cda:	83 b1       	in	r24, 0x03	; 3
     cdc:	c1 cf       	rjmp	.-126    	; 0xc60 <switch_menu+0x19c>
	subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
	alarm_set_minute_confirm();
	
	else if(BUTTON_4_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     cde:	83 b1       	in	r24, 0x03	; 3
     ce0:	e0 cf       	rjmp	.-64     	; 0xca2 <switch_menu+0x1de>
	add_hour();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
	subtract_hour();
	
	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_HOUR)
     ce2:	1a 9b       	sbis	0x03, 2	; 3
     ce4:	f2 cf       	rjmp	.-28     	; 0xcca <switch_menu+0x206>
     ce6:	14 cf       	rjmp	.-472    	; 0xb10 <switch_menu+0x4c>
	add_minute();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
	subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_CLOCK_SET_MINUTE)
     ce8:	1a 9b       	sbis	0x03, 2	; 3
     cea:	f1 cf       	rjmp	.-30     	; 0xcce <switch_menu+0x20a>
     cec:	35 cf       	rjmp	.-406    	; 0xb58 <switch_menu+0x94>
	add_hour();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
	subtract_hour();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_HOUR)
     cee:	1a 9b       	sbis	0x03, 2	; 3
     cf0:	f0 cf       	rjmp	.-32     	; 0xcd2 <switch_menu+0x20e>
     cf2:	60 cf       	rjmp	.-320    	; 0xbb4 <switch_menu+0xf0>
	add_minute();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
	subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_TIMER_SET_MINUTE)
     cf4:	1a 9b       	sbis	0x03, 2	; 3
     cf6:	ef cf       	rjmp	.-34     	; 0xcd6 <switch_menu+0x212>
     cf8:	7f cf       	rjmp	.-258    	; 0xbf8 <switch_menu+0x134>
	add_hour();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
	subtract_hour();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_HOUR)
     cfa:	1a 9b       	sbis	0x03, 2	; 3
     cfc:	ee cf       	rjmp	.-36     	; 0xcda <switch_menu+0x216>
     cfe:	a8 cf       	rjmp	.-176    	; 0xc50 <switch_menu+0x18c>
	add_minute();
	
	else if (BUTTON_2_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
	subtract_minute();

	else if(BUTTON_3_PRESSED && selectedMenu == MENU_ALARM_SET_MINUTE)
     d00:	1a 9b       	sbis	0x03, 2	; 3
     d02:	ed cf       	rjmp	.-38     	; 0xcde <switch_menu+0x21a>
     d04:	c6 cf       	rjmp	.-116    	; 0xc92 <switch_menu+0x1ce>
     d06:	08 95       	ret

00000d08 <on_button_pressed>:
	selectedMenu = MENU_CLOCK;
}

void on_button_pressed()
{
	ssd1306_clear_display();
     d08:	49 dd       	rcall	.-1390   	; 0x79c <ssd1306_clear_display>
	switch_menu();
     d0a:	dc de       	rcall	.-584    	; 0xac4 <switch_menu>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d0c:	2f ef       	ldi	r18, 0xFF	; 255
     d0e:	81 ee       	ldi	r24, 0xE1	; 225
     d10:	94 e0       	ldi	r25, 0x04	; 4
     d12:	21 50       	subi	r18, 0x01	; 1
     d14:	80 40       	sbci	r24, 0x00	; 0
     d16:	90 40       	sbci	r25, 0x00	; 0
     d18:	e1 f7       	brne	.-8      	; 0xd12 <on_button_pressed+0xa>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <on_button_pressed+0x14>
     d1c:	00 00       	nop
     d1e:	08 95       	ret

00000d20 <add_safe_hour>:
	selectedMinute = add_number(selectedMinute, MINUTES_IN_HOUR - 1);
}

void add_second()
{
	selectedSecond = add_number(selectedSecond, SECONDS_IN_MINUTE -1);
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	88 31       	cpi	r24, 0x18	; 24
     d24:	0c f0       	brlt	.+2      	; 0xd28 <add_safe_hour+0x8>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	08 95       	ret

00000d2a <add_safe_minute>:
     d2a:	8f 5f       	subi	r24, 0xFF	; 255
     d2c:	8c 33       	cpi	r24, 0x3C	; 60
     d2e:	0c f0       	brlt	.+2      	; 0xd32 <add_safe_minute+0x8>
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	08 95       	ret

00000d34 <add_safe_second>:
     d34:	8f 5f       	subi	r24, 0xFF	; 255
     d36:	8c 33       	cpi	r24, 0x3C	; 60
     d38:	0c f0       	brlt	.+2      	; 0xd3c <add_safe_second+0x8>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	08 95       	ret

00000d3e <reset>:
     d3e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <selectedHour>
     d42:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <selectedMinute>
     d46:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <selectedSecond>
     d4a:	08 95       	ret

00000d4c <add_hour>:
     d4c:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <selectedHour>
     d50:	8f 5f       	subi	r24, 0xFF	; 255
     d52:	88 31       	cpi	r24, 0x18	; 24
     d54:	0c f0       	brlt	.+2      	; 0xd58 <add_hour+0xc>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <selectedHour>
     d5c:	08 95       	ret

00000d5e <add_minute>:
     d5e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedMinute>
     d62:	8f 5f       	subi	r24, 0xFF	; 255
     d64:	8c 33       	cpi	r24, 0x3C	; 60
     d66:	0c f0       	brlt	.+2      	; 0xd6a <add_minute+0xc>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <selectedMinute>
     d6e:	08 95       	ret

00000d70 <subtract_hour>:
	return number;
}

uint8_t subtract_number(int8_t number, int8_t max)
{
	number--;
     d70:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <selectedHour>
     d74:	81 50       	subi	r24, 0x01	; 1
	
	if(number < 0)
     d76:	0a f4       	brpl	.+2      	; 0xd7a <subtract_hour+0xa>
	{
		number = max;
     d78:	87 e1       	ldi	r24, 0x17	; 23
	selectedSecond = add_number(selectedSecond, SECONDS_IN_MINUTE -1);
}

void subtract_hour()
{
	selectedHour = subtract_number(selectedHour, HOURS_IN_DAY - 1);
     d7a:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <selectedHour>
     d7e:	08 95       	ret

00000d80 <subtract_minute>:
	return number;
}

uint8_t subtract_number(int8_t number, int8_t max)
{
	number--;
     d80:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedMinute>
     d84:	81 50       	subi	r24, 0x01	; 1
	
	if(number < 0)
     d86:	0a f4       	brpl	.+2      	; 0xd8a <subtract_minute+0xa>
	{
		number = max;
     d88:	8b e3       	ldi	r24, 0x3B	; 59
	selectedHour = subtract_number(selectedHour, HOURS_IN_DAY - 1);
}

void subtract_minute()
{
	selectedMinute = subtract_number(selectedMinute, MINUTES_IN_HOUR - 1);
     d8a:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <selectedMinute>
     d8e:	08 95       	ret

00000d90 <port_init>:
#define LED1 (1<<PD7)
#define LED2 (1<<PB0)

void port_init()
{
	DDRC &= ~(BUTTON_2 | BUTTON_1);
     d90:	87 b1       	in	r24, 0x07	; 7
     d92:	83 7f       	andi	r24, 0xF3	; 243
     d94:	87 b9       	out	0x07, r24	; 7
	DDRB &= ~(BUTTON_4 | BUTTON_3);
     d96:	84 b1       	in	r24, 0x04	; 4
     d98:	89 7f       	andi	r24, 0xF9	; 249
     d9a:	84 b9       	out	0x04, r24	; 4
	DDRB |= LED2;
     d9c:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= BUZZER | LED1;
     d9e:	8a b1       	in	r24, 0x0a	; 10
     da0:	80 6a       	ori	r24, 0xA0	; 160
     da2:	8a b9       	out	0x0a, r24	; 10
	
	TCCR1B = (1<<CS12) | (1<<WGM12);
     da4:	8c e0       	ldi	r24, 0x0C	; 12
     da6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	OCR1AH = 0x7A;
     daa:	8a e7       	ldi	r24, 0x7A	; 122
     dac:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
	OCR1AL = 0x12;
     db0:	82 e1       	ldi	r24, 0x12	; 18
     db2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 |= (1<<ICIE1) | (1<<OCIE1A);
     db6:	ef e6       	ldi	r30, 0x6F	; 111
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	82 62       	ori	r24, 0x22	; 34
     dbe:	80 83       	st	Z, r24
     dc0:	08 95       	ret

00000dc2 <main>:
}

int main(void)
{
	sei();
     dc2:	78 94       	sei
	port_init();
     dc4:	e5 df       	rcall	.-54     	; 0xd90 <port_init>
	display_init();
     dc6:	9d dd       	rcall	.-1222   	; 0x902 <display_init>
	DHT_Setup();
     dc8:	39 db       	rcall	.-2446   	; 0x43c <DHT_Setup>

	while (1)
	{
		if(BUTTON_PRESSED)
     dca:	33 9b       	sbis	0x06, 3	; 6
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <main+0x16>
     dce:	32 9b       	sbis	0x06, 2	; 6
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <main+0x16>
     dd2:	1a 9b       	sbis	0x03, 2	; 3
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <main+0x16>
     dd6:	19 9b       	sbis	0x03, 1	; 3
			on_button_pressed();
     dd8:	97 df       	rcall	.-210    	; 0xd08 <on_button_pressed>
		
		refresh_screen();
     dda:	20 de       	rcall	.-960    	; 0xa1c <refresh_screen>
	}
     ddc:	f6 cf       	rjmp	.-20     	; 0xdca <main+0x8>

00000dde <__vector_11>:
}

ISR (TIMER1_COMPA_vect)
{
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	2f 93       	push	r18
     dea:	3f 93       	push	r19
     dec:	4f 93       	push	r20
     dee:	5f 93       	push	r21
     df0:	6f 93       	push	r22
     df2:	7f 93       	push	r23
     df4:	8f 93       	push	r24
     df6:	9f 93       	push	r25
     df8:	af 93       	push	r26
     dfa:	bf 93       	push	r27
     dfc:	ef 93       	push	r30
     dfe:	ff 93       	push	r31
	clock_trigger();
     e00:	cc d0       	rcall	.+408    	; 0xf9a <clock_trigger>
	timer_trigger();
     e02:	a5 d1       	rcall	.+842    	; 0x114e <timer_trigger>
	alarm_trigger();
     e04:	2f d0       	rcall	.+94     	; 0xe64 <alarm_trigger>
}
     e06:	ff 91       	pop	r31
     e08:	ef 91       	pop	r30
     e0a:	bf 91       	pop	r27
     e0c:	af 91       	pop	r26
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	7f 91       	pop	r23
     e14:	6f 91       	pop	r22
     e16:	5f 91       	pop	r21
     e18:	4f 91       	pop	r20
     e1a:	3f 91       	pop	r19
     e1c:	2f 91       	pop	r18
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti

00000e28 <alarm_reset>:
uint8_t alarmExpectedMinute = 0;
uint8_t alarmExpectedSecond = 0;

void alarm_reset()
{
	reset();
     e28:	8a df       	rcall	.-236    	; 0xd3e <reset>
	
	alarmIsReady = 0;
     e2a:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <alarmIsReady>
	alarmIsRunning = 0;
     e2e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <alarmIsRunning>
	
	alarmExpectedHour = 0;
     e32:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <alarmExpectedHour>
	alarmExpectedMinute = 0;
     e36:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <alarmExpectedMinute>
	alarmExpectedSecond = 0;
     e3a:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <__data_end>
     e3e:	08 95       	ret

00000e40 <alarm_run>:
}

void alarm_run()
{
	if(alarmIsRunning == 0)
     e40:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <alarmIsRunning>
     e44:	81 11       	cpse	r24, r1
     e46:	0d c0       	rjmp	.+26     	; 0xe62 <alarm_run+0x22>
	{
		alarmExpectedSecond = 0;
     e48:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <__data_end>
		alarmExpectedHour = selectedHour;
     e4c:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <selectedHour>
     e50:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <alarmExpectedHour>
		alarmExpectedMinute = selectedMinute;
     e54:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedMinute>
     e58:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <alarmExpectedMinute>
		alarmIsRunning = 1;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <alarmIsRunning>
     e62:	08 95       	ret

00000e64 <alarm_trigger>:
	}
}

void alarm_trigger()
{
	if(alarmIsRunning == 1 
     e64:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <alarmIsRunning>
     e68:	88 23       	and	r24, r24
     e6a:	c9 f0       	breq	.+50     	; 0xe9e <alarm_trigger+0x3a>
	&& alarmIsReady == 0
     e6c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <alarmIsReady>
     e70:	81 11       	cpse	r24, r1
     e72:	15 c0       	rjmp	.+42     	; 0xe9e <alarm_trigger+0x3a>
	&& current_hour == alarmExpectedHour 
     e74:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <current_hour>
     e78:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <alarmExpectedHour>
     e7c:	98 13       	cpse	r25, r24
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <alarm_trigger+0x3a>
	&& current_minute == alarmExpectedMinute 
     e80:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <current_minute>
     e84:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <alarmExpectedMinute>
     e88:	98 13       	cpse	r25, r24
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <alarm_trigger+0x3a>
	&& current_second == alarmExpectedSecond)
     e8c:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <current_second>
     e90:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
     e94:	98 13       	cpse	r25, r24
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <alarm_trigger+0x3a>
	{
		alarmIsReady = 1;	
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <alarmIsReady>
     e9e:	08 95       	ret

00000ea0 <display_alarm>:
	draw_string(0, 0, "TIMER SET M");
	display_alarm(selectedHour,selectedMinute,0,0,1,0);
}

void display_alarm(uint8_t hour, uint8_t minute, uint8_t second, bool displayHour, bool displayMinute, bool displaySeconds)
{
     ea0:	af 92       	push	r10
     ea2:	cf 92       	push	r12
     ea4:	ef 92       	push	r14
     ea6:	0f 93       	push	r16
	if(alarmIsRunning == 0)
     ea8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <alarmIsRunning>
     eac:	91 11       	cpse	r25, r1
     eae:	0a c0       	rjmp	.+20     	; 0xec4 <display_alarm+0x24>
	{
		draw_clock(0,2, hour, minute,second, displayHour, displayMinute, displaySeconds);
     eb0:	ae 2c       	mov	r10, r14
     eb2:	c0 2e       	mov	r12, r16
     eb4:	e2 2e       	mov	r14, r18
     eb6:	04 2f       	mov	r16, r20
     eb8:	26 2f       	mov	r18, r22
     eba:	48 2f       	mov	r20, r24
     ebc:	62 e0       	ldi	r22, 0x02	; 2
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	73 dd       	rcall	.-1306   	; 0x9a8 <draw_clock>
     ec2:	0f c0       	rjmp	.+30     	; 0xee2 <display_alarm+0x42>
	}
	else if(alarmIsRunning == 1 && alarmIsReady == 0)
     ec4:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <alarmIsReady>
     ec8:	91 11       	cpse	r25, r1
     eca:	0a c0       	rjmp	.+20     	; 0xee0 <display_alarm+0x40>
	{
		draw_clock(0,2, hour, minute, second, displayHour, displayMinute, displaySeconds);
     ecc:	ae 2c       	mov	r10, r14
     ece:	c0 2e       	mov	r12, r16
     ed0:	e2 2e       	mov	r14, r18
     ed2:	04 2f       	mov	r16, r20
     ed4:	26 2f       	mov	r18, r22
     ed6:	48 2f       	mov	r20, r24
     ed8:	62 e0       	ldi	r22, 0x02	; 2
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	65 dd       	rcall	.-1334   	; 0x9a8 <draw_clock>
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <display_alarm+0x42>
	}
	else
	{
		draw_its_time();
     ee0:	8d dd       	rcall	.-1254   	; 0x9fc <draw_its_time>
	}
     ee2:	0f 91       	pop	r16
     ee4:	ef 90       	pop	r14
     ee6:	cf 90       	pop	r12
     ee8:	af 90       	pop	r10
     eea:	08 95       	ret

00000eec <display_alarm_view>:
		alarmIsReady = 1;	
	}
}

void display_alarm_view()
{
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
	draw_string(0, 0, "ALARM");
     ef4:	45 e1       	ldi	r20, 0x15	; 21
     ef6:	51 e0       	ldi	r21, 0x01	; 1
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	11 dd       	rcall	.-1502   	; 0x920 <draw_string>
	display_alarm(alarmExpectedHour,alarmExpectedMinute,0,1,1,0);
     efe:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <alarmExpectedMinute>
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <alarmExpectedHour>
     f08:	e1 2c       	mov	r14, r1
     f0a:	f1 2c       	mov	r15, r1
     f0c:	01 e0       	ldi	r16, 0x01	; 1
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	21 e0       	ldi	r18, 0x01	; 1
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	c2 df       	rcall	.-124    	; 0xea0 <display_alarm>
}
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	08 95       	ret

00000f26 <display_alarm_hour_set_view>:

void display_alarm_hour_set_view()
{
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
	draw_string(0, 0, "TIMER SET H");
     f2e:	4b e1       	ldi	r20, 0x1B	; 27
     f30:	51 e0       	ldi	r21, 0x01	; 1
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	f4 dc       	rcall	.-1560   	; 0x920 <draw_string>
	display_alarm(selectedHour,selectedMinute,0,1,0,0);
     f38:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <selectedMinute>
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <selectedHour>
     f42:	e1 2c       	mov	r14, r1
     f44:	f1 2c       	mov	r15, r1
     f46:	00 e0       	ldi	r16, 0x00	; 0
     f48:	10 e0       	ldi	r17, 0x00	; 0
     f4a:	21 e0       	ldi	r18, 0x01	; 1
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a5 df       	rcall	.-182    	; 0xea0 <display_alarm>
}
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	08 95       	ret

00000f60 <display_alarm_minute_set_view>:

void display_alarm_minute_set_view()
{
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
	draw_string(0, 0, "TIMER SET M");
     f68:	47 e2       	ldi	r20, 0x27	; 39
     f6a:	51 e0       	ldi	r21, 0x01	; 1
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	d7 dc       	rcall	.-1618   	; 0x920 <draw_string>
	display_alarm(selectedHour,selectedMinute,0,0,1,0);
     f72:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <selectedMinute>
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <selectedHour>
     f7c:	e1 2c       	mov	r14, r1
     f7e:	f1 2c       	mov	r15, r1
     f80:	01 e0       	ldi	r16, 0x01	; 1
     f82:	10 e0       	ldi	r17, 0x00	; 0
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	88 df       	rcall	.-240    	; 0xea0 <display_alarm>
}
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	08 95       	ret

00000f9a <clock_trigger>:
#include "../Logic/display_extensions.h"
#include "../Logic/time.h"
#include "clock.h"

void clock_trigger()
{
     f9a:	cf 93       	push	r28
	uint8_t previous = current_second;
     f9c:	c0 91 72 01 	lds	r28, 0x0172	; 0x800172 <current_second>
	current_second = add_safe_second(current_second);
     fa0:	8c 2f       	mov	r24, r28
     fa2:	c8 de       	rcall	.-624    	; 0xd34 <add_safe_second>
     fa4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <current_second>
	
	if(previous == (SECONDS_IN_MINUTE - 1) && current_second == 0)
     fa8:	cb 33       	cpi	r28, 0x3B	; 59
     faa:	89 f4       	brne	.+34     	; 0xfce <clock_trigger+0x34>
     fac:	81 11       	cpse	r24, r1
     fae:	08 c0       	rjmp	.+16     	; 0xfc0 <clock_trigger+0x26>
	{
		previous = current_minute;
     fb0:	c0 91 70 01 	lds	r28, 0x0170	; 0x800170 <current_minute>
		current_minute = add_safe_minute(current_minute);
     fb4:	8c 2f       	mov	r24, r28
     fb6:	b9 de       	rcall	.-654    	; 0xd2a <add_safe_minute>
     fb8:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <current_minute>
	}
	
	if(previous == (MINUTES_IN_HOUR - 1) && current_hour == 0)
     fbc:	cb 33       	cpi	r28, 0x3B	; 59
     fbe:	39 f4       	brne	.+14     	; 0xfce <clock_trigger+0x34>
     fc0:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <current_hour>
     fc4:	81 11       	cpse	r24, r1
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <clock_trigger+0x34>
	current_hour = add_safe_hour(current_hour);
     fc8:	ab de       	rcall	.-682    	; 0xd20 <add_safe_hour>
     fca:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <current_hour>
}
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <clock_save>:

void clock_save()
{
	current_second = 0;
     fd2:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <current_second>
	current_hour = selectedHour;
     fd6:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <selectedHour>
     fda:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <current_hour>
	current_minute	= selectedMinute;
     fde:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedMinute>
     fe2:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <current_minute>
     fe6:	08 95       	ret

00000fe8 <display_clock>:
	draw_string(0, 0, "CLOCK SET M");
	display_clock(selectedHour, selectedMinute, 0, 0, 1, 0);
}

void display_clock(uint8_t hour, uint8_t minute, uint8_t second, bool displayHour, bool displayMinute, bool displaySeconds)
{
     fe8:	af 92       	push	r10
     fea:	cf 92       	push	r12
     fec:	ef 92       	push	r14
     fee:	0f 93       	push	r16
	draw_clock(0,2, hour, minute, second, displayHour, displayMinute, displaySeconds);
     ff0:	ae 2c       	mov	r10, r14
     ff2:	c0 2e       	mov	r12, r16
     ff4:	e2 2e       	mov	r14, r18
     ff6:	04 2f       	mov	r16, r20
     ff8:	26 2f       	mov	r18, r22
     ffa:	48 2f       	mov	r20, r24
     ffc:	62 e0       	ldi	r22, 0x02	; 2
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	d3 dc       	rcall	.-1626   	; 0x9a8 <draw_clock>
    1002:	0f 91       	pop	r16
    1004:	ef 90       	pop	r14
    1006:	cf 90       	pop	r12
    1008:	af 90       	pop	r10
    100a:	08 95       	ret

0000100c <display_clock_view>:
	current_hour = selectedHour;
	current_minute	= selectedMinute;
}

void display_clock_view()
{
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
	draw_string(0, 0, "CLOCK");
    1014:	43 e3       	ldi	r20, 0x33	; 51
    1016:	51 e0       	ldi	r21, 0x01	; 1
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	81 dc       	rcall	.-1790   	; 0x920 <draw_string>
	display_clock(current_hour, current_minute,current_second, 1,1,1);
    101e:	40 91 72 01 	lds	r20, 0x0172	; 0x800172 <current_second>
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <current_minute>
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <current_hour>
    102e:	ee 24       	eor	r14, r14
    1030:	e3 94       	inc	r14
    1032:	f1 2c       	mov	r15, r1
    1034:	01 e0       	ldi	r16, 0x01	; 1
    1036:	10 e0       	ldi	r17, 0x00	; 0
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	d4 df       	rcall	.-88     	; 0xfe8 <display_clock>
}
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	08 95       	ret

0000104a <display_clock_hour_set_view>:

void display_clock_hour_set_view()
{
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
	draw_string(0, 0, "CLOCK SET H");
    1052:	49 e3       	ldi	r20, 0x39	; 57
    1054:	51 e0       	ldi	r21, 0x01	; 1
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	62 dc       	rcall	.-1852   	; 0x920 <draw_string>
	display_clock(selectedHour, selectedMinute, 0,1,0,0);
    105c:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <selectedMinute>
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <selectedHour>
    1066:	e1 2c       	mov	r14, r1
    1068:	f1 2c       	mov	r15, r1
    106a:	00 e0       	ldi	r16, 0x00	; 0
    106c:	10 e0       	ldi	r17, 0x00	; 0
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	b7 df       	rcall	.-146    	; 0xfe8 <display_clock>
}
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	08 95       	ret

00001084 <display_clock_minute_set_view>:

void display_clock_minute_set_view()
{
    1084:	ef 92       	push	r14
    1086:	ff 92       	push	r15
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
	draw_string(0, 0, "CLOCK SET M");
    108c:	45 e4       	ldi	r20, 0x45	; 69
    108e:	51 e0       	ldi	r21, 0x01	; 1
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	45 dc       	rcall	.-1910   	; 0x920 <draw_string>
	display_clock(selectedHour, selectedMinute, 0, 0, 1, 0);
    1096:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <selectedMinute>
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <selectedHour>
    10a0:	e1 2c       	mov	r14, r1
    10a2:	f1 2c       	mov	r15, r1
    10a4:	01 e0       	ldi	r16, 0x01	; 1
    10a6:	10 e0       	ldi	r17, 0x00	; 0
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	9a df       	rcall	.-204    	; 0xfe8 <display_clock>
}
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	08 95       	ret

000010be <display_temperature_view>:
		//intToStr((int)fpart, res + i + 1, afterpoint);
	//}
//}

void display_temperature_view()
{
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	2a 97       	sbiw	r28, 0x0a	; 10
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
	draw_string(0, 0, "TEMPERATURE");
    10d2:	41 e5       	ldi	r20, 0x51	; 81
    10d4:	51 e0       	ldi	r21, 0x01	; 1
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	20 dc       	rcall	.-1984   	; 0x920 <draw_string>
	
	char tempAsChar[10];
	
	DHT_Read(temperature, humidity);
    10e0:	6c e7       	ldi	r22, 0x7C	; 124
    10e2:	71 e0       	ldi	r23, 0x01	; 1
    10e4:	88 e7       	ldi	r24, 0x78	; 120
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	81 da       	rcall	.-2814   	; 0x5ec <DHT_Read>
	//ftoa(temperature[0],tempAsChar,2);
	
	switch (DHT_GetStatus())
    10ea:	b4 d9       	rcall	.-3224   	; 0x454 <DHT_GetStatus>
    10ec:	81 11       	cpse	r24, r1
    10ee:	08 c0       	rjmp	.+16     	; 0x1100 <display_temperature_view+0x42>
	{
		case (DHT_Ok):
		draw_string(0,2,tempAsChar);
    10f0:	ae 01       	movw	r20, r28
    10f2:	4f 5f       	subi	r20, 0xFF	; 255
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	62 e0       	ldi	r22, 0x02	; 2
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	10 dc       	rcall	.-2016   	; 0x920 <draw_string>
		break;
	}
}
    1100:	2a 96       	adiw	r28, 0x0a	; 10
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <timer_reset>:
int8_t timerExpectedMinute = 0;
int8_t timerExpectedSecond = 0;

void timer_reset()
{
	reset();
    1112:	15 de       	rcall	.-982    	; 0xd3e <reset>
	
	timerIsReady = 0;
    1114:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <timerIsReady>
	timerIsRunning = 0;
    1118:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <timerIsRunning>
	
	timerExpectedHour = 0;
    111c:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <timerExpectedHour>
	timerExpectedMinute = 0;
    1120:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <timerExpectedMinute>
	timerExpectedSecond = 0;
    1124:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <timerExpectedSecond>
    1128:	08 95       	ret

0000112a <timer_run>:
}

void timer_run()
{
	if(timerIsRunning == 0)
    112a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <timerIsRunning>
    112e:	81 11       	cpse	r24, r1
    1130:	0d c0       	rjmp	.+26     	; 0x114c <timer_run+0x22>
	{
		timerExpectedSecond = 0;
    1132:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <timerExpectedSecond>
		timerExpectedHour = selectedHour;
    1136:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <selectedHour>
    113a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <timerExpectedHour>
		timerExpectedMinute = selectedMinute;
    113e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <selectedMinute>
    1142:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <timerExpectedMinute>
		timerIsRunning = 1;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timerIsRunning>
    114c:	08 95       	ret

0000114e <timer_trigger>:
	}
}

void timer_trigger()
{	
	if(timerIsReady == 0 && timerIsRunning == 1)
    114e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <timerIsReady>
    1152:	81 11       	cpse	r24, r1
    1154:	36 c0       	rjmp	.+108    	; 0x11c2 <timer_trigger+0x74>
    1156:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <timerIsRunning>
    115a:	88 23       	and	r24, r24
    115c:	91 f1       	breq	.+100    	; 0x11c2 <timer_trigger+0x74>
	{
		if(timerExpectedSecond == 0 && timerExpectedMinute == 0 && timerExpectedHour == 0)
    115e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <timerExpectedSecond>
    1162:	81 11       	cpse	r24, r1
    1164:	0c c0       	rjmp	.+24     	; 0x117e <timer_trigger+0x30>
    1166:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <timerExpectedMinute>
    116a:	81 11       	cpse	r24, r1
    116c:	26 c0       	rjmp	.+76     	; 0x11ba <timer_trigger+0x6c>
    116e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <timerExpectedHour>
    1172:	81 11       	cpse	r24, r1
    1174:	22 c0       	rjmp	.+68     	; 0x11ba <timer_trigger+0x6c>
		{
			timerIsReady = 1;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <timerIsReady>
    117c:	08 95       	ret
		}
		else
		{
			timerExpectedSecond--;
    117e:	81 50       	subi	r24, 0x01	; 1
    1180:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <timerExpectedSecond>
			
			if(timerExpectedSecond < 0 && timerExpectedMinute >= 0)
    1184:	88 23       	and	r24, r24
    1186:	54 f4       	brge	.+20     	; 0x119c <timer_trigger+0x4e>
    1188:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <timerExpectedMinute>
    118c:	88 23       	and	r24, r24
    118e:	54 f0       	brlt	.+20     	; 0x11a4 <timer_trigger+0x56>
			{
				timerExpectedSecond = SECONDS_IN_MINUTE - 1;
    1190:	9b e3       	ldi	r25, 0x3B	; 59
    1192:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <timerExpectedSecond>
				timerExpectedMinute--;
    1196:	81 50       	subi	r24, 0x01	; 1
    1198:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <timerExpectedMinute>
			}
			
			if(timerExpectedMinute < 0 && timerExpectedHour > 0)
    119c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <timerExpectedMinute>
    11a0:	88 23       	and	r24, r24
    11a2:	7c f4       	brge	.+30     	; 0x11c2 <timer_trigger+0x74>
    11a4:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <timerExpectedHour>
    11a8:	18 16       	cp	r1, r24
    11aa:	5c f4       	brge	.+22     	; 0x11c2 <timer_trigger+0x74>
			{
				timerExpectedMinute = MINUTES_IN_HOUR - 1;
    11ac:	9b e3       	ldi	r25, 0x3B	; 59
    11ae:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <timerExpectedMinute>
				timerExpectedHour--;
    11b2:	81 50       	subi	r24, 0x01	; 1
    11b4:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <timerExpectedHour>
			}
		}
	}
}
    11b8:	08 95       	ret
		{
			timerIsReady = 1;
		}
		else
		{
			timerExpectedSecond--;
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <timerExpectedSecond>
    11c0:	e3 cf       	rjmp	.-58     	; 0x1188 <timer_trigger+0x3a>
    11c2:	08 95       	ret

000011c4 <display_timer>:
	draw_string(0, 0, "TIMER SET M");
	display_timer(0,1,0);
}

void display_timer(bool displayHour, bool displayMinute, bool displaySecond)
{
    11c4:	af 92       	push	r10
    11c6:	cf 92       	push	r12
    11c8:	ef 92       	push	r14
    11ca:	0f 93       	push	r16
	if(timerIsRunning == 0)
    11cc:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <timerIsRunning>
    11d0:	91 11       	cpse	r25, r1
    11d2:	0c c0       	rjmp	.+24     	; 0x11ec <display_timer+0x28>
	{
		draw_clock(0,2, selectedHour, selectedMinute,0, displayHour, displayMinute, displaySecond);
    11d4:	a4 2e       	mov	r10, r20
    11d6:	c6 2e       	mov	r12, r22
    11d8:	e8 2e       	mov	r14, r24
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <selectedMinute>
    11e0:	40 91 77 01 	lds	r20, 0x0177	; 0x800177 <selectedHour>
    11e4:	62 e0       	ldi	r22, 0x02	; 2
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	df db       	rcall	.-2114   	; 0x9a8 <draw_clock>
    11ea:	12 c0       	rjmp	.+36     	; 0x1210 <display_timer+0x4c>
	}
	else if(timerIsRunning == 1 && timerIsReady == 0)
    11ec:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <timerIsReady>
    11f0:	91 11       	cpse	r25, r1
    11f2:	0d c0       	rjmp	.+26     	; 0x120e <display_timer+0x4a>
	{
		draw_clock(0,2, timerExpectedHour, timerExpectedMinute, timerExpectedSecond, displayHour, displayMinute, displaySecond);
    11f4:	a4 2e       	mov	r10, r20
    11f6:	c6 2e       	mov	r12, r22
    11f8:	e8 2e       	mov	r14, r24
    11fa:	00 91 69 01 	lds	r16, 0x0169	; 0x800169 <timerExpectedSecond>
    11fe:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <timerExpectedMinute>
    1202:	40 91 6b 01 	lds	r20, 0x016B	; 0x80016b <timerExpectedHour>
    1206:	62 e0       	ldi	r22, 0x02	; 2
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	ce db       	rcall	.-2148   	; 0x9a8 <draw_clock>
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <display_timer+0x4c>
	}
	else
	{
		draw_its_time();
    120e:	f6 db       	rcall	.-2068   	; 0x9fc <draw_its_time>
	}
}
    1210:	0f 91       	pop	r16
    1212:	ef 90       	pop	r14
    1214:	cf 90       	pop	r12
    1216:	af 90       	pop	r10
    1218:	08 95       	ret

0000121a <display_timer_view>:
	}
}

void display_timer_view()
{
	draw_string(0, 0, "TIMER");
    121a:	4d e5       	ldi	r20, 0x5D	; 93
    121c:	51 e0       	ldi	r21, 0x01	; 1
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	7e db       	rcall	.-2308   	; 0x920 <draw_string>
	display_timer(1,1,1);
    1224:	41 e0       	ldi	r20, 0x01	; 1
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	61 e0       	ldi	r22, 0x01	; 1
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	c9 df       	rcall	.-110    	; 0x11c4 <display_timer>
    1232:	08 95       	ret

00001234 <display_timer_hour_set_view>:
}

void display_timer_hour_set_view()
{
	draw_string(0, 0, "TIMER SET H");
    1234:	4b e1       	ldi	r20, 0x1B	; 27
    1236:	51 e0       	ldi	r21, 0x01	; 1
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	71 db       	rcall	.-2334   	; 0x920 <draw_string>
	display_timer(1,0,0);
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	bc df       	rcall	.-136    	; 0x11c4 <display_timer>
    124c:	08 95       	ret

0000124e <display_timer_minute_set_view>:
}

void display_timer_minute_set_view()
{
	draw_string(0, 0, "TIMER SET M");
    124e:	47 e2       	ldi	r20, 0x27	; 39
    1250:	51 e0       	ldi	r21, 0x01	; 1
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	64 db       	rcall	.-2360   	; 0x920 <draw_string>
	display_timer(0,1,0);
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	61 e0       	ldi	r22, 0x01	; 1
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	af df       	rcall	.-162    	; 0x11c4 <display_timer>
    1266:	08 95       	ret

00001268 <__cmpsf2>:
    1268:	a8 d0       	rcall	.+336    	; 0x13ba <__fp_cmp>
    126a:	08 f4       	brcc	.+2      	; 0x126e <__cmpsf2+0x6>
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	08 95       	ret

00001270 <__divsf3>:
    1270:	0c d0       	rcall	.+24     	; 0x128a <__divsf3x>
    1272:	de c0       	rjmp	.+444    	; 0x1430 <__fp_round>
    1274:	d6 d0       	rcall	.+428    	; 0x1422 <__fp_pscB>
    1276:	40 f0       	brcs	.+16     	; 0x1288 <__divsf3+0x18>
    1278:	cd d0       	rcall	.+410    	; 0x1414 <__fp_pscA>
    127a:	30 f0       	brcs	.+12     	; 0x1288 <__divsf3+0x18>
    127c:	21 f4       	brne	.+8      	; 0x1286 <__divsf3+0x16>
    127e:	5f 3f       	cpi	r21, 0xFF	; 255
    1280:	19 f0       	breq	.+6      	; 0x1288 <__divsf3+0x18>
    1282:	bf c0       	rjmp	.+382    	; 0x1402 <__fp_inf>
    1284:	51 11       	cpse	r21, r1
    1286:	08 c1       	rjmp	.+528    	; 0x1498 <__fp_szero>
    1288:	c2 c0       	rjmp	.+388    	; 0x140e <__fp_nan>

0000128a <__divsf3x>:
    128a:	e3 d0       	rcall	.+454    	; 0x1452 <__fp_split3>
    128c:	98 f3       	brcs	.-26     	; 0x1274 <__divsf3+0x4>

0000128e <__divsf3_pse>:
    128e:	99 23       	and	r25, r25
    1290:	c9 f3       	breq	.-14     	; 0x1284 <__divsf3+0x14>
    1292:	55 23       	and	r21, r21
    1294:	b1 f3       	breq	.-20     	; 0x1282 <__divsf3+0x12>
    1296:	95 1b       	sub	r25, r21
    1298:	55 0b       	sbc	r21, r21
    129a:	bb 27       	eor	r27, r27
    129c:	aa 27       	eor	r26, r26
    129e:	62 17       	cp	r22, r18
    12a0:	73 07       	cpc	r23, r19
    12a2:	84 07       	cpc	r24, r20
    12a4:	38 f0       	brcs	.+14     	; 0x12b4 <__divsf3_pse+0x26>
    12a6:	9f 5f       	subi	r25, 0xFF	; 255
    12a8:	5f 4f       	sbci	r21, 0xFF	; 255
    12aa:	22 0f       	add	r18, r18
    12ac:	33 1f       	adc	r19, r19
    12ae:	44 1f       	adc	r20, r20
    12b0:	aa 1f       	adc	r26, r26
    12b2:	a9 f3       	breq	.-22     	; 0x129e <__divsf3_pse+0x10>
    12b4:	33 d0       	rcall	.+102    	; 0x131c <__divsf3_pse+0x8e>
    12b6:	0e 2e       	mov	r0, r30
    12b8:	3a f0       	brmi	.+14     	; 0x12c8 <__divsf3_pse+0x3a>
    12ba:	e0 e8       	ldi	r30, 0x80	; 128
    12bc:	30 d0       	rcall	.+96     	; 0x131e <__divsf3_pse+0x90>
    12be:	91 50       	subi	r25, 0x01	; 1
    12c0:	50 40       	sbci	r21, 0x00	; 0
    12c2:	e6 95       	lsr	r30
    12c4:	00 1c       	adc	r0, r0
    12c6:	ca f7       	brpl	.-14     	; 0x12ba <__divsf3_pse+0x2c>
    12c8:	29 d0       	rcall	.+82     	; 0x131c <__divsf3_pse+0x8e>
    12ca:	fe 2f       	mov	r31, r30
    12cc:	27 d0       	rcall	.+78     	; 0x131c <__divsf3_pse+0x8e>
    12ce:	66 0f       	add	r22, r22
    12d0:	77 1f       	adc	r23, r23
    12d2:	88 1f       	adc	r24, r24
    12d4:	bb 1f       	adc	r27, r27
    12d6:	26 17       	cp	r18, r22
    12d8:	37 07       	cpc	r19, r23
    12da:	48 07       	cpc	r20, r24
    12dc:	ab 07       	cpc	r26, r27
    12de:	b0 e8       	ldi	r27, 0x80	; 128
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <__divsf3_pse+0x56>
    12e2:	bb 0b       	sbc	r27, r27
    12e4:	80 2d       	mov	r24, r0
    12e6:	bf 01       	movw	r22, r30
    12e8:	ff 27       	eor	r31, r31
    12ea:	93 58       	subi	r25, 0x83	; 131
    12ec:	5f 4f       	sbci	r21, 0xFF	; 255
    12ee:	2a f0       	brmi	.+10     	; 0x12fa <__divsf3_pse+0x6c>
    12f0:	9e 3f       	cpi	r25, 0xFE	; 254
    12f2:	51 05       	cpc	r21, r1
    12f4:	68 f0       	brcs	.+26     	; 0x1310 <__divsf3_pse+0x82>
    12f6:	85 c0       	rjmp	.+266    	; 0x1402 <__fp_inf>
    12f8:	cf c0       	rjmp	.+414    	; 0x1498 <__fp_szero>
    12fa:	5f 3f       	cpi	r21, 0xFF	; 255
    12fc:	ec f3       	brlt	.-6      	; 0x12f8 <__divsf3_pse+0x6a>
    12fe:	98 3e       	cpi	r25, 0xE8	; 232
    1300:	dc f3       	brlt	.-10     	; 0x12f8 <__divsf3_pse+0x6a>
    1302:	86 95       	lsr	r24
    1304:	77 95       	ror	r23
    1306:	67 95       	ror	r22
    1308:	b7 95       	ror	r27
    130a:	f7 95       	ror	r31
    130c:	9f 5f       	subi	r25, 0xFF	; 255
    130e:	c9 f7       	brne	.-14     	; 0x1302 <__divsf3_pse+0x74>
    1310:	88 0f       	add	r24, r24
    1312:	91 1d       	adc	r25, r1
    1314:	96 95       	lsr	r25
    1316:	87 95       	ror	r24
    1318:	97 f9       	bld	r25, 7
    131a:	08 95       	ret
    131c:	e1 e0       	ldi	r30, 0x01	; 1
    131e:	66 0f       	add	r22, r22
    1320:	77 1f       	adc	r23, r23
    1322:	88 1f       	adc	r24, r24
    1324:	bb 1f       	adc	r27, r27
    1326:	62 17       	cp	r22, r18
    1328:	73 07       	cpc	r23, r19
    132a:	84 07       	cpc	r24, r20
    132c:	ba 07       	cpc	r27, r26
    132e:	20 f0       	brcs	.+8      	; 0x1338 <__divsf3_pse+0xaa>
    1330:	62 1b       	sub	r22, r18
    1332:	73 0b       	sbc	r23, r19
    1334:	84 0b       	sbc	r24, r20
    1336:	ba 0b       	sbc	r27, r26
    1338:	ee 1f       	adc	r30, r30
    133a:	88 f7       	brcc	.-30     	; 0x131e <__divsf3_pse+0x90>
    133c:	e0 95       	com	r30
    133e:	08 95       	ret

00001340 <__floatunsisf>:
    1340:	e8 94       	clt
    1342:	09 c0       	rjmp	.+18     	; 0x1356 <__floatsisf+0x12>

00001344 <__floatsisf>:
    1344:	97 fb       	bst	r25, 7
    1346:	3e f4       	brtc	.+14     	; 0x1356 <__floatsisf+0x12>
    1348:	90 95       	com	r25
    134a:	80 95       	com	r24
    134c:	70 95       	com	r23
    134e:	61 95       	neg	r22
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	8f 4f       	sbci	r24, 0xFF	; 255
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	99 23       	and	r25, r25
    1358:	a9 f0       	breq	.+42     	; 0x1384 <__floatsisf+0x40>
    135a:	f9 2f       	mov	r31, r25
    135c:	96 e9       	ldi	r25, 0x96	; 150
    135e:	bb 27       	eor	r27, r27
    1360:	93 95       	inc	r25
    1362:	f6 95       	lsr	r31
    1364:	87 95       	ror	r24
    1366:	77 95       	ror	r23
    1368:	67 95       	ror	r22
    136a:	b7 95       	ror	r27
    136c:	f1 11       	cpse	r31, r1
    136e:	f8 cf       	rjmp	.-16     	; 0x1360 <__floatsisf+0x1c>
    1370:	fa f4       	brpl	.+62     	; 0x13b0 <__floatsisf+0x6c>
    1372:	bb 0f       	add	r27, r27
    1374:	11 f4       	brne	.+4      	; 0x137a <__floatsisf+0x36>
    1376:	60 ff       	sbrs	r22, 0
    1378:	1b c0       	rjmp	.+54     	; 0x13b0 <__floatsisf+0x6c>
    137a:	6f 5f       	subi	r22, 0xFF	; 255
    137c:	7f 4f       	sbci	r23, 0xFF	; 255
    137e:	8f 4f       	sbci	r24, 0xFF	; 255
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	16 c0       	rjmp	.+44     	; 0x13b0 <__floatsisf+0x6c>
    1384:	88 23       	and	r24, r24
    1386:	11 f0       	breq	.+4      	; 0x138c <__floatsisf+0x48>
    1388:	96 e9       	ldi	r25, 0x96	; 150
    138a:	11 c0       	rjmp	.+34     	; 0x13ae <__floatsisf+0x6a>
    138c:	77 23       	and	r23, r23
    138e:	21 f0       	breq	.+8      	; 0x1398 <__floatsisf+0x54>
    1390:	9e e8       	ldi	r25, 0x8E	; 142
    1392:	87 2f       	mov	r24, r23
    1394:	76 2f       	mov	r23, r22
    1396:	05 c0       	rjmp	.+10     	; 0x13a2 <__floatsisf+0x5e>
    1398:	66 23       	and	r22, r22
    139a:	71 f0       	breq	.+28     	; 0x13b8 <__floatsisf+0x74>
    139c:	96 e8       	ldi	r25, 0x86	; 134
    139e:	86 2f       	mov	r24, r22
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	2a f0       	brmi	.+10     	; 0x13b0 <__floatsisf+0x6c>
    13a6:	9a 95       	dec	r25
    13a8:	66 0f       	add	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	88 1f       	adc	r24, r24
    13ae:	da f7       	brpl	.-10     	; 0x13a6 <__floatsisf+0x62>
    13b0:	88 0f       	add	r24, r24
    13b2:	96 95       	lsr	r25
    13b4:	87 95       	ror	r24
    13b6:	97 f9       	bld	r25, 7
    13b8:	08 95       	ret

000013ba <__fp_cmp>:
    13ba:	99 0f       	add	r25, r25
    13bc:	00 08       	sbc	r0, r0
    13be:	55 0f       	add	r21, r21
    13c0:	aa 0b       	sbc	r26, r26
    13c2:	e0 e8       	ldi	r30, 0x80	; 128
    13c4:	fe ef       	ldi	r31, 0xFE	; 254
    13c6:	16 16       	cp	r1, r22
    13c8:	17 06       	cpc	r1, r23
    13ca:	e8 07       	cpc	r30, r24
    13cc:	f9 07       	cpc	r31, r25
    13ce:	c0 f0       	brcs	.+48     	; 0x1400 <__fp_cmp+0x46>
    13d0:	12 16       	cp	r1, r18
    13d2:	13 06       	cpc	r1, r19
    13d4:	e4 07       	cpc	r30, r20
    13d6:	f5 07       	cpc	r31, r21
    13d8:	98 f0       	brcs	.+38     	; 0x1400 <__fp_cmp+0x46>
    13da:	62 1b       	sub	r22, r18
    13dc:	73 0b       	sbc	r23, r19
    13de:	84 0b       	sbc	r24, r20
    13e0:	95 0b       	sbc	r25, r21
    13e2:	39 f4       	brne	.+14     	; 0x13f2 <__fp_cmp+0x38>
    13e4:	0a 26       	eor	r0, r26
    13e6:	61 f0       	breq	.+24     	; 0x1400 <__fp_cmp+0x46>
    13e8:	23 2b       	or	r18, r19
    13ea:	24 2b       	or	r18, r20
    13ec:	25 2b       	or	r18, r21
    13ee:	21 f4       	brne	.+8      	; 0x13f8 <__fp_cmp+0x3e>
    13f0:	08 95       	ret
    13f2:	0a 26       	eor	r0, r26
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <__fp_cmp+0x3e>
    13f6:	a1 40       	sbci	r26, 0x01	; 1
    13f8:	a6 95       	lsr	r26
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	81 1d       	adc	r24, r1
    13fe:	81 1d       	adc	r24, r1
    1400:	08 95       	ret

00001402 <__fp_inf>:
    1402:	97 f9       	bld	r25, 7
    1404:	9f 67       	ori	r25, 0x7F	; 127
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	08 95       	ret

0000140e <__fp_nan>:
    140e:	9f ef       	ldi	r25, 0xFF	; 255
    1410:	80 ec       	ldi	r24, 0xC0	; 192
    1412:	08 95       	ret

00001414 <__fp_pscA>:
    1414:	00 24       	eor	r0, r0
    1416:	0a 94       	dec	r0
    1418:	16 16       	cp	r1, r22
    141a:	17 06       	cpc	r1, r23
    141c:	18 06       	cpc	r1, r24
    141e:	09 06       	cpc	r0, r25
    1420:	08 95       	ret

00001422 <__fp_pscB>:
    1422:	00 24       	eor	r0, r0
    1424:	0a 94       	dec	r0
    1426:	12 16       	cp	r1, r18
    1428:	13 06       	cpc	r1, r19
    142a:	14 06       	cpc	r1, r20
    142c:	05 06       	cpc	r0, r21
    142e:	08 95       	ret

00001430 <__fp_round>:
    1430:	09 2e       	mov	r0, r25
    1432:	03 94       	inc	r0
    1434:	00 0c       	add	r0, r0
    1436:	11 f4       	brne	.+4      	; 0x143c <__fp_round+0xc>
    1438:	88 23       	and	r24, r24
    143a:	52 f0       	brmi	.+20     	; 0x1450 <__fp_round+0x20>
    143c:	bb 0f       	add	r27, r27
    143e:	40 f4       	brcc	.+16     	; 0x1450 <__fp_round+0x20>
    1440:	bf 2b       	or	r27, r31
    1442:	11 f4       	brne	.+4      	; 0x1448 <__fp_round+0x18>
    1444:	60 ff       	sbrs	r22, 0
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <__fp_round+0x20>
    1448:	6f 5f       	subi	r22, 0xFF	; 255
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	8f 4f       	sbci	r24, 0xFF	; 255
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	08 95       	ret

00001452 <__fp_split3>:
    1452:	57 fd       	sbrc	r21, 7
    1454:	90 58       	subi	r25, 0x80	; 128
    1456:	44 0f       	add	r20, r20
    1458:	55 1f       	adc	r21, r21
    145a:	59 f0       	breq	.+22     	; 0x1472 <__fp_splitA+0x10>
    145c:	5f 3f       	cpi	r21, 0xFF	; 255
    145e:	71 f0       	breq	.+28     	; 0x147c <__fp_splitA+0x1a>
    1460:	47 95       	ror	r20

00001462 <__fp_splitA>:
    1462:	88 0f       	add	r24, r24
    1464:	97 fb       	bst	r25, 7
    1466:	99 1f       	adc	r25, r25
    1468:	61 f0       	breq	.+24     	; 0x1482 <__fp_splitA+0x20>
    146a:	9f 3f       	cpi	r25, 0xFF	; 255
    146c:	79 f0       	breq	.+30     	; 0x148c <__fp_splitA+0x2a>
    146e:	87 95       	ror	r24
    1470:	08 95       	ret
    1472:	12 16       	cp	r1, r18
    1474:	13 06       	cpc	r1, r19
    1476:	14 06       	cpc	r1, r20
    1478:	55 1f       	adc	r21, r21
    147a:	f2 cf       	rjmp	.-28     	; 0x1460 <__fp_split3+0xe>
    147c:	46 95       	lsr	r20
    147e:	f1 df       	rcall	.-30     	; 0x1462 <__fp_splitA>
    1480:	08 c0       	rjmp	.+16     	; 0x1492 <__fp_splitA+0x30>
    1482:	16 16       	cp	r1, r22
    1484:	17 06       	cpc	r1, r23
    1486:	18 06       	cpc	r1, r24
    1488:	99 1f       	adc	r25, r25
    148a:	f1 cf       	rjmp	.-30     	; 0x146e <__fp_splitA+0xc>
    148c:	86 95       	lsr	r24
    148e:	71 05       	cpc	r23, r1
    1490:	61 05       	cpc	r22, r1
    1492:	08 94       	sec
    1494:	08 95       	ret

00001496 <__fp_zero>:
    1496:	e8 94       	clt

00001498 <__fp_szero>:
    1498:	bb 27       	eor	r27, r27
    149a:	66 27       	eor	r22, r22
    149c:	77 27       	eor	r23, r23
    149e:	cb 01       	movw	r24, r22
    14a0:	97 f9       	bld	r25, 7
    14a2:	08 95       	ret

000014a4 <__gesf2>:
    14a4:	8a df       	rcall	.-236    	; 0x13ba <__fp_cmp>
    14a6:	08 f4       	brcc	.+2      	; 0x14aa <__gesf2+0x6>
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	08 95       	ret

000014ac <__divmodsi4>:
    14ac:	05 2e       	mov	r0, r21
    14ae:	97 fb       	bst	r25, 7
    14b0:	16 f4       	brtc	.+4      	; 0x14b6 <__divmodsi4+0xa>
    14b2:	00 94       	com	r0
    14b4:	0f d0       	rcall	.+30     	; 0x14d4 <__negsi2>
    14b6:	57 fd       	sbrc	r21, 7
    14b8:	05 d0       	rcall	.+10     	; 0x14c4 <__divmodsi4_neg2>
    14ba:	14 d0       	rcall	.+40     	; 0x14e4 <__udivmodsi4>
    14bc:	07 fc       	sbrc	r0, 7
    14be:	02 d0       	rcall	.+4      	; 0x14c4 <__divmodsi4_neg2>
    14c0:	46 f4       	brtc	.+16     	; 0x14d2 <__divmodsi4_exit>
    14c2:	08 c0       	rjmp	.+16     	; 0x14d4 <__negsi2>

000014c4 <__divmodsi4_neg2>:
    14c4:	50 95       	com	r21
    14c6:	40 95       	com	r20
    14c8:	30 95       	com	r19
    14ca:	21 95       	neg	r18
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	4f 4f       	sbci	r20, 0xFF	; 255
    14d0:	5f 4f       	sbci	r21, 0xFF	; 255

000014d2 <__divmodsi4_exit>:
    14d2:	08 95       	ret

000014d4 <__negsi2>:
    14d4:	90 95       	com	r25
    14d6:	80 95       	com	r24
    14d8:	70 95       	com	r23
    14da:	61 95       	neg	r22
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	8f 4f       	sbci	r24, 0xFF	; 255
    14e0:	9f 4f       	sbci	r25, 0xFF	; 255
    14e2:	08 95       	ret

000014e4 <__udivmodsi4>:
    14e4:	a1 e2       	ldi	r26, 0x21	; 33
    14e6:	1a 2e       	mov	r1, r26
    14e8:	aa 1b       	sub	r26, r26
    14ea:	bb 1b       	sub	r27, r27
    14ec:	fd 01       	movw	r30, r26
    14ee:	0d c0       	rjmp	.+26     	; 0x150a <__udivmodsi4_ep>

000014f0 <__udivmodsi4_loop>:
    14f0:	aa 1f       	adc	r26, r26
    14f2:	bb 1f       	adc	r27, r27
    14f4:	ee 1f       	adc	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	a2 17       	cp	r26, r18
    14fa:	b3 07       	cpc	r27, r19
    14fc:	e4 07       	cpc	r30, r20
    14fe:	f5 07       	cpc	r31, r21
    1500:	20 f0       	brcs	.+8      	; 0x150a <__udivmodsi4_ep>
    1502:	a2 1b       	sub	r26, r18
    1504:	b3 0b       	sbc	r27, r19
    1506:	e4 0b       	sbc	r30, r20
    1508:	f5 0b       	sbc	r31, r21

0000150a <__udivmodsi4_ep>:
    150a:	66 1f       	adc	r22, r22
    150c:	77 1f       	adc	r23, r23
    150e:	88 1f       	adc	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	1a 94       	dec	r1
    1514:	69 f7       	brne	.-38     	; 0x14f0 <__udivmodsi4_loop>
    1516:	60 95       	com	r22
    1518:	70 95       	com	r23
    151a:	80 95       	com	r24
    151c:	90 95       	com	r25
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	bd 01       	movw	r22, r26
    1524:	cf 01       	movw	r24, r30
    1526:	08 95       	ret

00001528 <sprintf>:
    1528:	ae e0       	ldi	r26, 0x0E	; 14
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e9 e9       	ldi	r30, 0x99	; 153
    152e:	fa e0       	ldi	r31, 0x0A	; 10
    1530:	aa c2       	rjmp	.+1364   	; 0x1a86 <__prologue_saves__+0x1c>
    1532:	0d 89       	ldd	r16, Y+21	; 0x15
    1534:	1e 89       	ldd	r17, Y+22	; 0x16
    1536:	86 e0       	ldi	r24, 0x06	; 6
    1538:	8c 83       	std	Y+4, r24	; 0x04
    153a:	1a 83       	std	Y+2, r17	; 0x02
    153c:	09 83       	std	Y+1, r16	; 0x01
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    1540:	9f e7       	ldi	r25, 0x7F	; 127
    1542:	9e 83       	std	Y+6, r25	; 0x06
    1544:	8d 83       	std	Y+5, r24	; 0x05
    1546:	ae 01       	movw	r20, r28
    1548:	47 5e       	subi	r20, 0xE7	; 231
    154a:	5f 4f       	sbci	r21, 0xFF	; 255
    154c:	6f 89       	ldd	r22, Y+23	; 0x17
    154e:	78 8d       	ldd	r23, Y+24	; 0x18
    1550:	ce 01       	movw	r24, r28
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	08 d0       	rcall	.+16     	; 0x1566 <vfprintf>
    1556:	ef 81       	ldd	r30, Y+7	; 0x07
    1558:	f8 85       	ldd	r31, Y+8	; 0x08
    155a:	e0 0f       	add	r30, r16
    155c:	f1 1f       	adc	r31, r17
    155e:	10 82       	st	Z, r1
    1560:	2e 96       	adiw	r28, 0x0e	; 14
    1562:	e4 e0       	ldi	r30, 0x04	; 4
    1564:	ac c2       	rjmp	.+1368   	; 0x1abe <__epilogue_restores__+0x1c>

00001566 <vfprintf>:
    1566:	ab e0       	ldi	r26, 0x0B	; 11
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e8 eb       	ldi	r30, 0xB8	; 184
    156c:	fa e0       	ldi	r31, 0x0A	; 10
    156e:	7d c2       	rjmp	.+1274   	; 0x1a6a <__prologue_saves__>
    1570:	6c 01       	movw	r12, r24
    1572:	7b 01       	movw	r14, r22
    1574:	8a 01       	movw	r16, r20
    1576:	fc 01       	movw	r30, r24
    1578:	17 82       	std	Z+7, r1	; 0x07
    157a:	16 82       	std	Z+6, r1	; 0x06
    157c:	83 81       	ldd	r24, Z+3	; 0x03
    157e:	81 ff       	sbrs	r24, 1
    1580:	bf c1       	rjmp	.+894    	; 0x1900 <vfprintf+0x39a>
    1582:	ce 01       	movw	r24, r28
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	3c 01       	movw	r6, r24
    1588:	f6 01       	movw	r30, r12
    158a:	93 81       	ldd	r25, Z+3	; 0x03
    158c:	f7 01       	movw	r30, r14
    158e:	93 fd       	sbrc	r25, 3
    1590:	85 91       	lpm	r24, Z+
    1592:	93 ff       	sbrs	r25, 3
    1594:	81 91       	ld	r24, Z+
    1596:	7f 01       	movw	r14, r30
    1598:	88 23       	and	r24, r24
    159a:	09 f4       	brne	.+2      	; 0x159e <vfprintf+0x38>
    159c:	ad c1       	rjmp	.+858    	; 0x18f8 <vfprintf+0x392>
    159e:	85 32       	cpi	r24, 0x25	; 37
    15a0:	39 f4       	brne	.+14     	; 0x15b0 <vfprintf+0x4a>
    15a2:	93 fd       	sbrc	r25, 3
    15a4:	85 91       	lpm	r24, Z+
    15a6:	93 ff       	sbrs	r25, 3
    15a8:	81 91       	ld	r24, Z+
    15aa:	7f 01       	movw	r14, r30
    15ac:	85 32       	cpi	r24, 0x25	; 37
    15ae:	21 f4       	brne	.+8      	; 0x15b8 <vfprintf+0x52>
    15b0:	b6 01       	movw	r22, r12
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	c0 d1       	rcall	.+896    	; 0x1936 <fputc>
    15b6:	e8 cf       	rjmp	.-48     	; 0x1588 <vfprintf+0x22>
    15b8:	91 2c       	mov	r9, r1
    15ba:	21 2c       	mov	r2, r1
    15bc:	31 2c       	mov	r3, r1
    15be:	ff e1       	ldi	r31, 0x1F	; 31
    15c0:	f3 15       	cp	r31, r3
    15c2:	d8 f0       	brcs	.+54     	; 0x15fa <vfprintf+0x94>
    15c4:	8b 32       	cpi	r24, 0x2B	; 43
    15c6:	79 f0       	breq	.+30     	; 0x15e6 <vfprintf+0x80>
    15c8:	38 f4       	brcc	.+14     	; 0x15d8 <vfprintf+0x72>
    15ca:	80 32       	cpi	r24, 0x20	; 32
    15cc:	79 f0       	breq	.+30     	; 0x15ec <vfprintf+0x86>
    15ce:	83 32       	cpi	r24, 0x23	; 35
    15d0:	a1 f4       	brne	.+40     	; 0x15fa <vfprintf+0x94>
    15d2:	23 2d       	mov	r18, r3
    15d4:	20 61       	ori	r18, 0x10	; 16
    15d6:	1d c0       	rjmp	.+58     	; 0x1612 <vfprintf+0xac>
    15d8:	8d 32       	cpi	r24, 0x2D	; 45
    15da:	61 f0       	breq	.+24     	; 0x15f4 <vfprintf+0x8e>
    15dc:	80 33       	cpi	r24, 0x30	; 48
    15de:	69 f4       	brne	.+26     	; 0x15fa <vfprintf+0x94>
    15e0:	23 2d       	mov	r18, r3
    15e2:	21 60       	ori	r18, 0x01	; 1
    15e4:	16 c0       	rjmp	.+44     	; 0x1612 <vfprintf+0xac>
    15e6:	83 2d       	mov	r24, r3
    15e8:	82 60       	ori	r24, 0x02	; 2
    15ea:	38 2e       	mov	r3, r24
    15ec:	e3 2d       	mov	r30, r3
    15ee:	e4 60       	ori	r30, 0x04	; 4
    15f0:	3e 2e       	mov	r3, r30
    15f2:	2a c0       	rjmp	.+84     	; 0x1648 <vfprintf+0xe2>
    15f4:	f3 2d       	mov	r31, r3
    15f6:	f8 60       	ori	r31, 0x08	; 8
    15f8:	1d c0       	rjmp	.+58     	; 0x1634 <vfprintf+0xce>
    15fa:	37 fc       	sbrc	r3, 7
    15fc:	2d c0       	rjmp	.+90     	; 0x1658 <vfprintf+0xf2>
    15fe:	20 ed       	ldi	r18, 0xD0	; 208
    1600:	28 0f       	add	r18, r24
    1602:	2a 30       	cpi	r18, 0x0A	; 10
    1604:	40 f0       	brcs	.+16     	; 0x1616 <vfprintf+0xb0>
    1606:	8e 32       	cpi	r24, 0x2E	; 46
    1608:	b9 f4       	brne	.+46     	; 0x1638 <vfprintf+0xd2>
    160a:	36 fc       	sbrc	r3, 6
    160c:	75 c1       	rjmp	.+746    	; 0x18f8 <vfprintf+0x392>
    160e:	23 2d       	mov	r18, r3
    1610:	20 64       	ori	r18, 0x40	; 64
    1612:	32 2e       	mov	r3, r18
    1614:	19 c0       	rjmp	.+50     	; 0x1648 <vfprintf+0xe2>
    1616:	36 fe       	sbrs	r3, 6
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <vfprintf+0xc0>
    161a:	8a e0       	ldi	r24, 0x0A	; 10
    161c:	98 9e       	mul	r9, r24
    161e:	20 0d       	add	r18, r0
    1620:	11 24       	eor	r1, r1
    1622:	92 2e       	mov	r9, r18
    1624:	11 c0       	rjmp	.+34     	; 0x1648 <vfprintf+0xe2>
    1626:	ea e0       	ldi	r30, 0x0A	; 10
    1628:	2e 9e       	mul	r2, r30
    162a:	20 0d       	add	r18, r0
    162c:	11 24       	eor	r1, r1
    162e:	22 2e       	mov	r2, r18
    1630:	f3 2d       	mov	r31, r3
    1632:	f0 62       	ori	r31, 0x20	; 32
    1634:	3f 2e       	mov	r3, r31
    1636:	08 c0       	rjmp	.+16     	; 0x1648 <vfprintf+0xe2>
    1638:	8c 36       	cpi	r24, 0x6C	; 108
    163a:	21 f4       	brne	.+8      	; 0x1644 <vfprintf+0xde>
    163c:	83 2d       	mov	r24, r3
    163e:	80 68       	ori	r24, 0x80	; 128
    1640:	38 2e       	mov	r3, r24
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0xe2>
    1644:	88 36       	cpi	r24, 0x68	; 104
    1646:	41 f4       	brne	.+16     	; 0x1658 <vfprintf+0xf2>
    1648:	f7 01       	movw	r30, r14
    164a:	93 fd       	sbrc	r25, 3
    164c:	85 91       	lpm	r24, Z+
    164e:	93 ff       	sbrs	r25, 3
    1650:	81 91       	ld	r24, Z+
    1652:	7f 01       	movw	r14, r30
    1654:	81 11       	cpse	r24, r1
    1656:	b3 cf       	rjmp	.-154    	; 0x15be <vfprintf+0x58>
    1658:	98 2f       	mov	r25, r24
    165a:	9f 7d       	andi	r25, 0xDF	; 223
    165c:	95 54       	subi	r25, 0x45	; 69
    165e:	93 30       	cpi	r25, 0x03	; 3
    1660:	28 f4       	brcc	.+10     	; 0x166c <vfprintf+0x106>
    1662:	0c 5f       	subi	r16, 0xFC	; 252
    1664:	1f 4f       	sbci	r17, 0xFF	; 255
    1666:	9f e3       	ldi	r25, 0x3F	; 63
    1668:	99 83       	std	Y+1, r25	; 0x01
    166a:	0d c0       	rjmp	.+26     	; 0x1686 <vfprintf+0x120>
    166c:	83 36       	cpi	r24, 0x63	; 99
    166e:	31 f0       	breq	.+12     	; 0x167c <vfprintf+0x116>
    1670:	83 37       	cpi	r24, 0x73	; 115
    1672:	71 f0       	breq	.+28     	; 0x1690 <vfprintf+0x12a>
    1674:	83 35       	cpi	r24, 0x53	; 83
    1676:	09 f0       	breq	.+2      	; 0x167a <vfprintf+0x114>
    1678:	55 c0       	rjmp	.+170    	; 0x1724 <vfprintf+0x1be>
    167a:	20 c0       	rjmp	.+64     	; 0x16bc <vfprintf+0x156>
    167c:	f8 01       	movw	r30, r16
    167e:	80 81       	ld	r24, Z
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	0e 5f       	subi	r16, 0xFE	; 254
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	88 24       	eor	r8, r8
    1688:	83 94       	inc	r8
    168a:	91 2c       	mov	r9, r1
    168c:	53 01       	movw	r10, r6
    168e:	12 c0       	rjmp	.+36     	; 0x16b4 <vfprintf+0x14e>
    1690:	28 01       	movw	r4, r16
    1692:	f2 e0       	ldi	r31, 0x02	; 2
    1694:	4f 0e       	add	r4, r31
    1696:	51 1c       	adc	r5, r1
    1698:	f8 01       	movw	r30, r16
    169a:	a0 80       	ld	r10, Z
    169c:	b1 80       	ldd	r11, Z+1	; 0x01
    169e:	36 fe       	sbrs	r3, 6
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <vfprintf+0x142>
    16a2:	69 2d       	mov	r22, r9
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x146>
    16a8:	6f ef       	ldi	r22, 0xFF	; 255
    16aa:	7f ef       	ldi	r23, 0xFF	; 255
    16ac:	c5 01       	movw	r24, r10
    16ae:	38 d1       	rcall	.+624    	; 0x1920 <strnlen>
    16b0:	4c 01       	movw	r8, r24
    16b2:	82 01       	movw	r16, r4
    16b4:	f3 2d       	mov	r31, r3
    16b6:	ff 77       	andi	r31, 0x7F	; 127
    16b8:	3f 2e       	mov	r3, r31
    16ba:	15 c0       	rjmp	.+42     	; 0x16e6 <vfprintf+0x180>
    16bc:	28 01       	movw	r4, r16
    16be:	22 e0       	ldi	r18, 0x02	; 2
    16c0:	42 0e       	add	r4, r18
    16c2:	51 1c       	adc	r5, r1
    16c4:	f8 01       	movw	r30, r16
    16c6:	a0 80       	ld	r10, Z
    16c8:	b1 80       	ldd	r11, Z+1	; 0x01
    16ca:	36 fe       	sbrs	r3, 6
    16cc:	03 c0       	rjmp	.+6      	; 0x16d4 <vfprintf+0x16e>
    16ce:	69 2d       	mov	r22, r9
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <vfprintf+0x172>
    16d4:	6f ef       	ldi	r22, 0xFF	; 255
    16d6:	7f ef       	ldi	r23, 0xFF	; 255
    16d8:	c5 01       	movw	r24, r10
    16da:	17 d1       	rcall	.+558    	; 0x190a <strnlen_P>
    16dc:	4c 01       	movw	r8, r24
    16de:	f3 2d       	mov	r31, r3
    16e0:	f0 68       	ori	r31, 0x80	; 128
    16e2:	3f 2e       	mov	r3, r31
    16e4:	82 01       	movw	r16, r4
    16e6:	33 fc       	sbrc	r3, 3
    16e8:	19 c0       	rjmp	.+50     	; 0x171c <vfprintf+0x1b6>
    16ea:	82 2d       	mov	r24, r2
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	88 16       	cp	r8, r24
    16f0:	99 06       	cpc	r9, r25
    16f2:	a0 f4       	brcc	.+40     	; 0x171c <vfprintf+0x1b6>
    16f4:	b6 01       	movw	r22, r12
    16f6:	80 e2       	ldi	r24, 0x20	; 32
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	1d d1       	rcall	.+570    	; 0x1936 <fputc>
    16fc:	2a 94       	dec	r2
    16fe:	f5 cf       	rjmp	.-22     	; 0x16ea <vfprintf+0x184>
    1700:	f5 01       	movw	r30, r10
    1702:	37 fc       	sbrc	r3, 7
    1704:	85 91       	lpm	r24, Z+
    1706:	37 fe       	sbrs	r3, 7
    1708:	81 91       	ld	r24, Z+
    170a:	5f 01       	movw	r10, r30
    170c:	b6 01       	movw	r22, r12
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	12 d1       	rcall	.+548    	; 0x1936 <fputc>
    1712:	21 10       	cpse	r2, r1
    1714:	2a 94       	dec	r2
    1716:	21 e0       	ldi	r18, 0x01	; 1
    1718:	82 1a       	sub	r8, r18
    171a:	91 08       	sbc	r9, r1
    171c:	81 14       	cp	r8, r1
    171e:	91 04       	cpc	r9, r1
    1720:	79 f7       	brne	.-34     	; 0x1700 <vfprintf+0x19a>
    1722:	e1 c0       	rjmp	.+450    	; 0x18e6 <vfprintf+0x380>
    1724:	84 36       	cpi	r24, 0x64	; 100
    1726:	11 f0       	breq	.+4      	; 0x172c <vfprintf+0x1c6>
    1728:	89 36       	cpi	r24, 0x69	; 105
    172a:	39 f5       	brne	.+78     	; 0x177a <vfprintf+0x214>
    172c:	f8 01       	movw	r30, r16
    172e:	37 fe       	sbrs	r3, 7
    1730:	07 c0       	rjmp	.+14     	; 0x1740 <vfprintf+0x1da>
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	0c 5f       	subi	r16, 0xFC	; 252
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	08 c0       	rjmp	.+16     	; 0x1750 <vfprintf+0x1ea>
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	07 2e       	mov	r0, r23
    1746:	00 0c       	add	r0, r0
    1748:	88 0b       	sbc	r24, r24
    174a:	99 0b       	sbc	r25, r25
    174c:	0e 5f       	subi	r16, 0xFE	; 254
    174e:	1f 4f       	sbci	r17, 0xFF	; 255
    1750:	f3 2d       	mov	r31, r3
    1752:	ff 76       	andi	r31, 0x6F	; 111
    1754:	3f 2e       	mov	r3, r31
    1756:	97 ff       	sbrs	r25, 7
    1758:	09 c0       	rjmp	.+18     	; 0x176c <vfprintf+0x206>
    175a:	90 95       	com	r25
    175c:	80 95       	com	r24
    175e:	70 95       	com	r23
    1760:	61 95       	neg	r22
    1762:	7f 4f       	sbci	r23, 0xFF	; 255
    1764:	8f 4f       	sbci	r24, 0xFF	; 255
    1766:	9f 4f       	sbci	r25, 0xFF	; 255
    1768:	f0 68       	ori	r31, 0x80	; 128
    176a:	3f 2e       	mov	r3, r31
    176c:	2a e0       	ldi	r18, 0x0A	; 10
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	a3 01       	movw	r20, r6
    1772:	1d d1       	rcall	.+570    	; 0x19ae <__ultoa_invert>
    1774:	88 2e       	mov	r8, r24
    1776:	86 18       	sub	r8, r6
    1778:	44 c0       	rjmp	.+136    	; 0x1802 <vfprintf+0x29c>
    177a:	85 37       	cpi	r24, 0x75	; 117
    177c:	31 f4       	brne	.+12     	; 0x178a <vfprintf+0x224>
    177e:	23 2d       	mov	r18, r3
    1780:	2f 7e       	andi	r18, 0xEF	; 239
    1782:	b2 2e       	mov	r11, r18
    1784:	2a e0       	ldi	r18, 0x0A	; 10
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	25 c0       	rjmp	.+74     	; 0x17d4 <vfprintf+0x26e>
    178a:	93 2d       	mov	r25, r3
    178c:	99 7f       	andi	r25, 0xF9	; 249
    178e:	b9 2e       	mov	r11, r25
    1790:	8f 36       	cpi	r24, 0x6F	; 111
    1792:	c1 f0       	breq	.+48     	; 0x17c4 <vfprintf+0x25e>
    1794:	18 f4       	brcc	.+6      	; 0x179c <vfprintf+0x236>
    1796:	88 35       	cpi	r24, 0x58	; 88
    1798:	79 f0       	breq	.+30     	; 0x17b8 <vfprintf+0x252>
    179a:	ae c0       	rjmp	.+348    	; 0x18f8 <vfprintf+0x392>
    179c:	80 37       	cpi	r24, 0x70	; 112
    179e:	19 f0       	breq	.+6      	; 0x17a6 <vfprintf+0x240>
    17a0:	88 37       	cpi	r24, 0x78	; 120
    17a2:	21 f0       	breq	.+8      	; 0x17ac <vfprintf+0x246>
    17a4:	a9 c0       	rjmp	.+338    	; 0x18f8 <vfprintf+0x392>
    17a6:	e9 2f       	mov	r30, r25
    17a8:	e0 61       	ori	r30, 0x10	; 16
    17aa:	be 2e       	mov	r11, r30
    17ac:	b4 fe       	sbrs	r11, 4
    17ae:	0d c0       	rjmp	.+26     	; 0x17ca <vfprintf+0x264>
    17b0:	fb 2d       	mov	r31, r11
    17b2:	f4 60       	ori	r31, 0x04	; 4
    17b4:	bf 2e       	mov	r11, r31
    17b6:	09 c0       	rjmp	.+18     	; 0x17ca <vfprintf+0x264>
    17b8:	34 fe       	sbrs	r3, 4
    17ba:	0a c0       	rjmp	.+20     	; 0x17d0 <vfprintf+0x26a>
    17bc:	29 2f       	mov	r18, r25
    17be:	26 60       	ori	r18, 0x06	; 6
    17c0:	b2 2e       	mov	r11, r18
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <vfprintf+0x26a>
    17c4:	28 e0       	ldi	r18, 0x08	; 8
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <vfprintf+0x26e>
    17ca:	20 e1       	ldi	r18, 0x10	; 16
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <vfprintf+0x26e>
    17d0:	20 e1       	ldi	r18, 0x10	; 16
    17d2:	32 e0       	ldi	r19, 0x02	; 2
    17d4:	f8 01       	movw	r30, r16
    17d6:	b7 fe       	sbrs	r11, 7
    17d8:	07 c0       	rjmp	.+14     	; 0x17e8 <vfprintf+0x282>
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	0c 5f       	subi	r16, 0xFC	; 252
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0x28e>
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 5f       	subi	r16, 0xFE	; 254
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	a3 01       	movw	r20, r6
    17f6:	db d0       	rcall	.+438    	; 0x19ae <__ultoa_invert>
    17f8:	88 2e       	mov	r8, r24
    17fa:	86 18       	sub	r8, r6
    17fc:	fb 2d       	mov	r31, r11
    17fe:	ff 77       	andi	r31, 0x7F	; 127
    1800:	3f 2e       	mov	r3, r31
    1802:	36 fe       	sbrs	r3, 6
    1804:	0d c0       	rjmp	.+26     	; 0x1820 <vfprintf+0x2ba>
    1806:	23 2d       	mov	r18, r3
    1808:	2e 7f       	andi	r18, 0xFE	; 254
    180a:	a2 2e       	mov	r10, r18
    180c:	89 14       	cp	r8, r9
    180e:	58 f4       	brcc	.+22     	; 0x1826 <vfprintf+0x2c0>
    1810:	34 fe       	sbrs	r3, 4
    1812:	0b c0       	rjmp	.+22     	; 0x182a <vfprintf+0x2c4>
    1814:	32 fc       	sbrc	r3, 2
    1816:	09 c0       	rjmp	.+18     	; 0x182a <vfprintf+0x2c4>
    1818:	83 2d       	mov	r24, r3
    181a:	8e 7e       	andi	r24, 0xEE	; 238
    181c:	a8 2e       	mov	r10, r24
    181e:	05 c0       	rjmp	.+10     	; 0x182a <vfprintf+0x2c4>
    1820:	b8 2c       	mov	r11, r8
    1822:	a3 2c       	mov	r10, r3
    1824:	03 c0       	rjmp	.+6      	; 0x182c <vfprintf+0x2c6>
    1826:	b8 2c       	mov	r11, r8
    1828:	01 c0       	rjmp	.+2      	; 0x182c <vfprintf+0x2c6>
    182a:	b9 2c       	mov	r11, r9
    182c:	a4 fe       	sbrs	r10, 4
    182e:	0f c0       	rjmp	.+30     	; 0x184e <vfprintf+0x2e8>
    1830:	fe 01       	movw	r30, r28
    1832:	e8 0d       	add	r30, r8
    1834:	f1 1d       	adc	r31, r1
    1836:	80 81       	ld	r24, Z
    1838:	80 33       	cpi	r24, 0x30	; 48
    183a:	21 f4       	brne	.+8      	; 0x1844 <vfprintf+0x2de>
    183c:	9a 2d       	mov	r25, r10
    183e:	99 7e       	andi	r25, 0xE9	; 233
    1840:	a9 2e       	mov	r10, r25
    1842:	09 c0       	rjmp	.+18     	; 0x1856 <vfprintf+0x2f0>
    1844:	a2 fe       	sbrs	r10, 2
    1846:	06 c0       	rjmp	.+12     	; 0x1854 <vfprintf+0x2ee>
    1848:	b3 94       	inc	r11
    184a:	b3 94       	inc	r11
    184c:	04 c0       	rjmp	.+8      	; 0x1856 <vfprintf+0x2f0>
    184e:	8a 2d       	mov	r24, r10
    1850:	86 78       	andi	r24, 0x86	; 134
    1852:	09 f0       	breq	.+2      	; 0x1856 <vfprintf+0x2f0>
    1854:	b3 94       	inc	r11
    1856:	a3 fc       	sbrc	r10, 3
    1858:	10 c0       	rjmp	.+32     	; 0x187a <vfprintf+0x314>
    185a:	a0 fe       	sbrs	r10, 0
    185c:	06 c0       	rjmp	.+12     	; 0x186a <vfprintf+0x304>
    185e:	b2 14       	cp	r11, r2
    1860:	80 f4       	brcc	.+32     	; 0x1882 <vfprintf+0x31c>
    1862:	28 0c       	add	r2, r8
    1864:	92 2c       	mov	r9, r2
    1866:	9b 18       	sub	r9, r11
    1868:	0d c0       	rjmp	.+26     	; 0x1884 <vfprintf+0x31e>
    186a:	b2 14       	cp	r11, r2
    186c:	58 f4       	brcc	.+22     	; 0x1884 <vfprintf+0x31e>
    186e:	b6 01       	movw	r22, r12
    1870:	80 e2       	ldi	r24, 0x20	; 32
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	60 d0       	rcall	.+192    	; 0x1936 <fputc>
    1876:	b3 94       	inc	r11
    1878:	f8 cf       	rjmp	.-16     	; 0x186a <vfprintf+0x304>
    187a:	b2 14       	cp	r11, r2
    187c:	18 f4       	brcc	.+6      	; 0x1884 <vfprintf+0x31e>
    187e:	2b 18       	sub	r2, r11
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <vfprintf+0x320>
    1882:	98 2c       	mov	r9, r8
    1884:	21 2c       	mov	r2, r1
    1886:	a4 fe       	sbrs	r10, 4
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <vfprintf+0x342>
    188a:	b6 01       	movw	r22, r12
    188c:	80 e3       	ldi	r24, 0x30	; 48
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	52 d0       	rcall	.+164    	; 0x1936 <fputc>
    1892:	a2 fe       	sbrs	r10, 2
    1894:	16 c0       	rjmp	.+44     	; 0x18c2 <vfprintf+0x35c>
    1896:	a1 fc       	sbrc	r10, 1
    1898:	03 c0       	rjmp	.+6      	; 0x18a0 <vfprintf+0x33a>
    189a:	88 e7       	ldi	r24, 0x78	; 120
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <vfprintf+0x33e>
    18a0:	88 e5       	ldi	r24, 0x58	; 88
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	b6 01       	movw	r22, r12
    18a6:	0c c0       	rjmp	.+24     	; 0x18c0 <vfprintf+0x35a>
    18a8:	8a 2d       	mov	r24, r10
    18aa:	86 78       	andi	r24, 0x86	; 134
    18ac:	51 f0       	breq	.+20     	; 0x18c2 <vfprintf+0x35c>
    18ae:	a1 fe       	sbrs	r10, 1
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <vfprintf+0x350>
    18b2:	8b e2       	ldi	r24, 0x2B	; 43
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <vfprintf+0x352>
    18b6:	80 e2       	ldi	r24, 0x20	; 32
    18b8:	a7 fc       	sbrc	r10, 7
    18ba:	8d e2       	ldi	r24, 0x2D	; 45
    18bc:	b6 01       	movw	r22, r12
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	3a d0       	rcall	.+116    	; 0x1936 <fputc>
    18c2:	89 14       	cp	r8, r9
    18c4:	30 f4       	brcc	.+12     	; 0x18d2 <vfprintf+0x36c>
    18c6:	b6 01       	movw	r22, r12
    18c8:	80 e3       	ldi	r24, 0x30	; 48
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	34 d0       	rcall	.+104    	; 0x1936 <fputc>
    18ce:	9a 94       	dec	r9
    18d0:	f8 cf       	rjmp	.-16     	; 0x18c2 <vfprintf+0x35c>
    18d2:	8a 94       	dec	r8
    18d4:	f3 01       	movw	r30, r6
    18d6:	e8 0d       	add	r30, r8
    18d8:	f1 1d       	adc	r31, r1
    18da:	80 81       	ld	r24, Z
    18dc:	b6 01       	movw	r22, r12
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	2a d0       	rcall	.+84     	; 0x1936 <fputc>
    18e2:	81 10       	cpse	r8, r1
    18e4:	f6 cf       	rjmp	.-20     	; 0x18d2 <vfprintf+0x36c>
    18e6:	22 20       	and	r2, r2
    18e8:	09 f4       	brne	.+2      	; 0x18ec <vfprintf+0x386>
    18ea:	4e ce       	rjmp	.-868    	; 0x1588 <vfprintf+0x22>
    18ec:	b6 01       	movw	r22, r12
    18ee:	80 e2       	ldi	r24, 0x20	; 32
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	21 d0       	rcall	.+66     	; 0x1936 <fputc>
    18f4:	2a 94       	dec	r2
    18f6:	f7 cf       	rjmp	.-18     	; 0x18e6 <vfprintf+0x380>
    18f8:	f6 01       	movw	r30, r12
    18fa:	86 81       	ldd	r24, Z+6	; 0x06
    18fc:	97 81       	ldd	r25, Z+7	; 0x07
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <vfprintf+0x39e>
    1900:	8f ef       	ldi	r24, 0xFF	; 255
    1902:	9f ef       	ldi	r25, 0xFF	; 255
    1904:	2b 96       	adiw	r28, 0x0b	; 11
    1906:	e2 e1       	ldi	r30, 0x12	; 18
    1908:	cc c0       	rjmp	.+408    	; 0x1aa2 <__epilogue_restores__>

0000190a <strnlen_P>:
    190a:	fc 01       	movw	r30, r24
    190c:	05 90       	lpm	r0, Z+
    190e:	61 50       	subi	r22, 0x01	; 1
    1910:	70 40       	sbci	r23, 0x00	; 0
    1912:	01 10       	cpse	r0, r1
    1914:	d8 f7       	brcc	.-10     	; 0x190c <strnlen_P+0x2>
    1916:	80 95       	com	r24
    1918:	90 95       	com	r25
    191a:	8e 0f       	add	r24, r30
    191c:	9f 1f       	adc	r25, r31
    191e:	08 95       	ret

00001920 <strnlen>:
    1920:	fc 01       	movw	r30, r24
    1922:	61 50       	subi	r22, 0x01	; 1
    1924:	70 40       	sbci	r23, 0x00	; 0
    1926:	01 90       	ld	r0, Z+
    1928:	01 10       	cpse	r0, r1
    192a:	d8 f7       	brcc	.-10     	; 0x1922 <strnlen+0x2>
    192c:	80 95       	com	r24
    192e:	90 95       	com	r25
    1930:	8e 0f       	add	r24, r30
    1932:	9f 1f       	adc	r25, r31
    1934:	08 95       	ret

00001936 <fputc>:
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	fb 01       	movw	r30, r22
    1940:	23 81       	ldd	r18, Z+3	; 0x03
    1942:	21 fd       	sbrc	r18, 1
    1944:	03 c0       	rjmp	.+6      	; 0x194c <fputc+0x16>
    1946:	8f ef       	ldi	r24, 0xFF	; 255
    1948:	9f ef       	ldi	r25, 0xFF	; 255
    194a:	2c c0       	rjmp	.+88     	; 0x19a4 <fputc+0x6e>
    194c:	22 ff       	sbrs	r18, 2
    194e:	16 c0       	rjmp	.+44     	; 0x197c <fputc+0x46>
    1950:	46 81       	ldd	r20, Z+6	; 0x06
    1952:	57 81       	ldd	r21, Z+7	; 0x07
    1954:	24 81       	ldd	r18, Z+4	; 0x04
    1956:	35 81       	ldd	r19, Z+5	; 0x05
    1958:	42 17       	cp	r20, r18
    195a:	53 07       	cpc	r21, r19
    195c:	44 f4       	brge	.+16     	; 0x196e <fputc+0x38>
    195e:	a0 81       	ld	r26, Z
    1960:	b1 81       	ldd	r27, Z+1	; 0x01
    1962:	9d 01       	movw	r18, r26
    1964:	2f 5f       	subi	r18, 0xFF	; 255
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	31 83       	std	Z+1, r19	; 0x01
    196a:	20 83       	st	Z, r18
    196c:	8c 93       	st	X, r24
    196e:	26 81       	ldd	r18, Z+6	; 0x06
    1970:	37 81       	ldd	r19, Z+7	; 0x07
    1972:	2f 5f       	subi	r18, 0xFF	; 255
    1974:	3f 4f       	sbci	r19, 0xFF	; 255
    1976:	37 83       	std	Z+7, r19	; 0x07
    1978:	26 83       	std	Z+6, r18	; 0x06
    197a:	14 c0       	rjmp	.+40     	; 0x19a4 <fputc+0x6e>
    197c:	8b 01       	movw	r16, r22
    197e:	ec 01       	movw	r28, r24
    1980:	fb 01       	movw	r30, r22
    1982:	00 84       	ldd	r0, Z+8	; 0x08
    1984:	f1 85       	ldd	r31, Z+9	; 0x09
    1986:	e0 2d       	mov	r30, r0
    1988:	09 95       	icall
    198a:	89 2b       	or	r24, r25
    198c:	e1 f6       	brne	.-72     	; 0x1946 <fputc+0x10>
    198e:	d8 01       	movw	r26, r16
    1990:	16 96       	adiw	r26, 0x06	; 6
    1992:	8d 91       	ld	r24, X+
    1994:	9c 91       	ld	r25, X
    1996:	17 97       	sbiw	r26, 0x07	; 7
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	17 96       	adiw	r26, 0x07	; 7
    199c:	9c 93       	st	X, r25
    199e:	8e 93       	st	-X, r24
    19a0:	16 97       	sbiw	r26, 0x06	; 6
    19a2:	ce 01       	movw	r24, r28
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	08 95       	ret

000019ae <__ultoa_invert>:
    19ae:	fa 01       	movw	r30, r20
    19b0:	aa 27       	eor	r26, r26
    19b2:	28 30       	cpi	r18, 0x08	; 8
    19b4:	51 f1       	breq	.+84     	; 0x1a0a <__ultoa_invert+0x5c>
    19b6:	20 31       	cpi	r18, 0x10	; 16
    19b8:	81 f1       	breq	.+96     	; 0x1a1a <__ultoa_invert+0x6c>
    19ba:	e8 94       	clt
    19bc:	6f 93       	push	r22
    19be:	6e 7f       	andi	r22, 0xFE	; 254
    19c0:	6e 5f       	subi	r22, 0xFE	; 254
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	8f 4f       	sbci	r24, 0xFF	; 255
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	af 4f       	sbci	r26, 0xFF	; 255
    19ca:	b1 e0       	ldi	r27, 0x01	; 1
    19cc:	3e d0       	rcall	.+124    	; 0x1a4a <__ultoa_invert+0x9c>
    19ce:	b4 e0       	ldi	r27, 0x04	; 4
    19d0:	3c d0       	rcall	.+120    	; 0x1a4a <__ultoa_invert+0x9c>
    19d2:	67 0f       	add	r22, r23
    19d4:	78 1f       	adc	r23, r24
    19d6:	89 1f       	adc	r24, r25
    19d8:	9a 1f       	adc	r25, r26
    19da:	a1 1d       	adc	r26, r1
    19dc:	68 0f       	add	r22, r24
    19de:	79 1f       	adc	r23, r25
    19e0:	8a 1f       	adc	r24, r26
    19e2:	91 1d       	adc	r25, r1
    19e4:	a1 1d       	adc	r26, r1
    19e6:	6a 0f       	add	r22, r26
    19e8:	71 1d       	adc	r23, r1
    19ea:	81 1d       	adc	r24, r1
    19ec:	91 1d       	adc	r25, r1
    19ee:	a1 1d       	adc	r26, r1
    19f0:	20 d0       	rcall	.+64     	; 0x1a32 <__ultoa_invert+0x84>
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <__ultoa_invert+0x48>
    19f4:	68 94       	set
    19f6:	3f 91       	pop	r19
    19f8:	2a e0       	ldi	r18, 0x0A	; 10
    19fa:	26 9f       	mul	r18, r22
    19fc:	11 24       	eor	r1, r1
    19fe:	30 19       	sub	r19, r0
    1a00:	30 5d       	subi	r19, 0xD0	; 208
    1a02:	31 93       	st	Z+, r19
    1a04:	de f6       	brtc	.-74     	; 0x19bc <__ultoa_invert+0xe>
    1a06:	cf 01       	movw	r24, r30
    1a08:	08 95       	ret
    1a0a:	46 2f       	mov	r20, r22
    1a0c:	47 70       	andi	r20, 0x07	; 7
    1a0e:	40 5d       	subi	r20, 0xD0	; 208
    1a10:	41 93       	st	Z+, r20
    1a12:	b3 e0       	ldi	r27, 0x03	; 3
    1a14:	0f d0       	rcall	.+30     	; 0x1a34 <__ultoa_invert+0x86>
    1a16:	c9 f7       	brne	.-14     	; 0x1a0a <__ultoa_invert+0x5c>
    1a18:	f6 cf       	rjmp	.-20     	; 0x1a06 <__ultoa_invert+0x58>
    1a1a:	46 2f       	mov	r20, r22
    1a1c:	4f 70       	andi	r20, 0x0F	; 15
    1a1e:	40 5d       	subi	r20, 0xD0	; 208
    1a20:	4a 33       	cpi	r20, 0x3A	; 58
    1a22:	18 f0       	brcs	.+6      	; 0x1a2a <__ultoa_invert+0x7c>
    1a24:	49 5d       	subi	r20, 0xD9	; 217
    1a26:	31 fd       	sbrc	r19, 1
    1a28:	40 52       	subi	r20, 0x20	; 32
    1a2a:	41 93       	st	Z+, r20
    1a2c:	02 d0       	rcall	.+4      	; 0x1a32 <__ultoa_invert+0x84>
    1a2e:	a9 f7       	brne	.-22     	; 0x1a1a <__ultoa_invert+0x6c>
    1a30:	ea cf       	rjmp	.-44     	; 0x1a06 <__ultoa_invert+0x58>
    1a32:	b4 e0       	ldi	r27, 0x04	; 4
    1a34:	a6 95       	lsr	r26
    1a36:	97 95       	ror	r25
    1a38:	87 95       	ror	r24
    1a3a:	77 95       	ror	r23
    1a3c:	67 95       	ror	r22
    1a3e:	ba 95       	dec	r27
    1a40:	c9 f7       	brne	.-14     	; 0x1a34 <__ultoa_invert+0x86>
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	61 05       	cpc	r22, r1
    1a46:	71 05       	cpc	r23, r1
    1a48:	08 95       	ret
    1a4a:	9b 01       	movw	r18, r22
    1a4c:	ac 01       	movw	r20, r24
    1a4e:	0a 2e       	mov	r0, r26
    1a50:	06 94       	lsr	r0
    1a52:	57 95       	ror	r21
    1a54:	47 95       	ror	r20
    1a56:	37 95       	ror	r19
    1a58:	27 95       	ror	r18
    1a5a:	ba 95       	dec	r27
    1a5c:	c9 f7       	brne	.-14     	; 0x1a50 <__ultoa_invert+0xa2>
    1a5e:	62 0f       	add	r22, r18
    1a60:	73 1f       	adc	r23, r19
    1a62:	84 1f       	adc	r24, r20
    1a64:	95 1f       	adc	r25, r21
    1a66:	a0 1d       	adc	r26, r0
    1a68:	08 95       	ret

00001a6a <__prologue_saves__>:
    1a6a:	2f 92       	push	r2
    1a6c:	3f 92       	push	r3
    1a6e:	4f 92       	push	r4
    1a70:	5f 92       	push	r5
    1a72:	6f 92       	push	r6
    1a74:	7f 92       	push	r7
    1a76:	8f 92       	push	r8
    1a78:	9f 92       	push	r9
    1a7a:	af 92       	push	r10
    1a7c:	bf 92       	push	r11
    1a7e:	cf 92       	push	r12
    1a80:	df 92       	push	r13
    1a82:	ef 92       	push	r14
    1a84:	ff 92       	push	r15
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	ca 1b       	sub	r28, r26
    1a94:	db 0b       	sbc	r29, r27
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	09 94       	ijmp

00001aa2 <__epilogue_restores__>:
    1aa2:	2a 88       	ldd	r2, Y+18	; 0x12
    1aa4:	39 88       	ldd	r3, Y+17	; 0x11
    1aa6:	48 88       	ldd	r4, Y+16	; 0x10
    1aa8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1aaa:	6e 84       	ldd	r6, Y+14	; 0x0e
    1aac:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aae:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ab0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ab2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ab4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ab6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ab8:	df 80       	ldd	r13, Y+7	; 0x07
    1aba:	ee 80       	ldd	r14, Y+6	; 0x06
    1abc:	fd 80       	ldd	r15, Y+5	; 0x05
    1abe:	0c 81       	ldd	r16, Y+4	; 0x04
    1ac0:	1b 81       	ldd	r17, Y+3	; 0x03
    1ac2:	aa 81       	ldd	r26, Y+2	; 0x02
    1ac4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ac6:	ce 0f       	add	r28, r30
    1ac8:	d1 1d       	adc	r29, r1
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	ed 01       	movw	r28, r26
    1ad6:	08 95       	ret

00001ad8 <_exit>:
    1ad8:	f8 94       	cli

00001ada <__stop_program>:
    1ada:	ff cf       	rjmp	.-2      	; 0x1ada <__stop_program>
