
meteoMN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001332  000013c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011c  0080011c  000013e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000225d  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c59  00000000  00000000  0000387d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb5  00000000  00000000  000044d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f8  00000000  00000000  0000538c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007af  00000000  00000000  00005884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016a7  00000000  00000000  00006033  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000076da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	01 c5       	rjmp	.+2562   	; 0xa04 <__ctors_end>
       2:	1b c5       	rjmp	.+2614   	; 0xa3a <__bad_interrupt>
       4:	1a c5       	rjmp	.+2612   	; 0xa3a <__bad_interrupt>
       6:	19 c5       	rjmp	.+2610   	; 0xa3a <__bad_interrupt>
       8:	18 c5       	rjmp	.+2608   	; 0xa3a <__bad_interrupt>
       a:	17 c5       	rjmp	.+2606   	; 0xa3a <__bad_interrupt>
       c:	16 c5       	rjmp	.+2604   	; 0xa3a <__bad_interrupt>
       e:	15 c5       	rjmp	.+2602   	; 0xa3a <__bad_interrupt>
      10:	14 c5       	rjmp	.+2600   	; 0xa3a <__bad_interrupt>
      12:	13 c5       	rjmp	.+2598   	; 0xa3a <__bad_interrupt>
      14:	12 c5       	rjmp	.+2596   	; 0xa3a <__bad_interrupt>
      16:	c1 c8       	rjmp	.-3710   	; 0xfffff19a <__eeprom_end+0xff7ef19a>
      18:	10 c5       	rjmp	.+2592   	; 0xa3a <__bad_interrupt>
      1a:	0f c5       	rjmp	.+2590   	; 0xa3a <__bad_interrupt>
      1c:	0e c5       	rjmp	.+2588   	; 0xa3a <__bad_interrupt>
      1e:	0d c5       	rjmp	.+2586   	; 0xa3a <__bad_interrupt>
      20:	0c c5       	rjmp	.+2584   	; 0xa3a <__bad_interrupt>
      22:	0b c5       	rjmp	.+2582   	; 0xa3a <__bad_interrupt>
      24:	0a c5       	rjmp	.+2580   	; 0xa3a <__bad_interrupt>
      26:	09 c5       	rjmp	.+2578   	; 0xa3a <__bad_interrupt>
      28:	08 c5       	rjmp	.+2576   	; 0xa3a <__bad_interrupt>
      2a:	07 c5       	rjmp	.+2574   	; 0xa3a <__bad_interrupt>
      2c:	06 c5       	rjmp	.+2572   	; 0xa3a <__bad_interrupt>
      2e:	05 c5       	rjmp	.+2570   	; 0xa3a <__bad_interrupt>
      30:	04 c5       	rjmp	.+2568   	; 0xa3a <__bad_interrupt>
      32:	03 c5       	rjmp	.+2566   	; 0xa3a <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	ae d5       	rcall	.+2908   	; 0xb92 <ssd1306tx_stringxy+0x14>
      36:	f0 a8       	ldd	r15, Z+48	; 0x30
      38:	3f d3       	rcall	.+1662   	; 0x6b8 <__stack+0x1b9>
      3a:	00 40       	sbci	r16, 0x00	; 0
      3c:	8d 14       	cp	r8, r13
      3e:	20 00       	.word	0x0020	; ????
      40:	a1 c8       	rjmp	.-3774   	; 0xfffff184 <__eeprom_end+0xff7ef184>
      42:	da 12       	cpse	r13, r26
      44:	81 3f       	cpi	r24, 0xF1	; 241
      46:	d9 22       	and	r13, r25
      48:	db 20       	and	r13, r11
      4a:	a4 a6       	std	Z+44, r10	; 0x2c
      4c:	2e af       	std	Y+62, r18	; 0x3e
      4e:	22 00       	.word	0x0022	; ????
      50:	3f 21       	and	r19, r15
      52:	00 7f       	andi	r16, 0xF0	; 240

00000054 <number9>:
      54:	00 00 00 00 c0 f0 78 18 1c 0c 0e 06 0e 1c 18 38     ......x........8
      64:	f0 e0 00 00 00 00 00 00 00 00 00 00 3f 7f 60 60     ............?.``
      74:	e0 c0 c0 c0 c0 c0 e0 f0 ff ff 00 00 00 00 00 00     ................
	...
      90:	00 00 01 ff ff 03 00 00 00 00 00 00 00 00 00 0f     ................
      a0:	3f 78 60 60 60 60 60 60 70 38 3e 0f 03 00 00 00     ?x``````p8>.....
      b0:	00 00 00 00                                         ....

000000b4 <number8>:
      b4:	00 00 00 00 c0 e0 70 38 1c 0e 07 07 06 0e 1c 78     ......p8.......x
      c4:	f0 c0 00 00 00 00 00 00 00 00 00 00 1f 3f 30 70     .............?0p
      d4:	60 e0 c0 c0 c0 e0 70 3e 3f 03 00 00 00 00 00 00     `.....p>?.......
      e4:	00 00 00 00 c0 f0 7c 1e 07 03 03 01 01 03 03 07     ......|.........
      f4:	3e fc e0 00 00 00 00 00 00 00 00 00 03 0f 1e 18     >...............
     104:	18 18 18 18 18 18 1c 0e 07 03 01 00 00 00 00 00     ................

00000114 <number7>:
     114:	00 10 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
     124:	18 18 f8 f8 30 00 00 00 00 00 00 00 00 00 00 00     ....0...........
     134:	00 00 00 00 00 00 00 c0 fc 7f 07 01 00 00 00 00     ................
     144:	00 00 00 00 00 00 00 04 06 06 06 86 e6 fe 3e 0f     ..............>.
     154:	07 06 06 06 04 00 00 00 00 00 00 00 00 00 00 00     ................
     164:	40 70 7c 1f 07 00 00 00 00 00 00 00 00 00 00 00     @p|.............

00000174 <number6>:
     174:	00 00 00 00 00 00 80 c0 e0 70 30 30 30 30 70 60     .........p0000p`
     184:	e0 c0 80 00 00 00 00 00 00 00 00 00 f8 fe 0f 03     ................
     194:	80 80 c0 c0 c0 c0 c0 80 00 01 07 07 00 00 00 00     ................
     1a4:	00 00 00 00 ff ff 0e 07 03 01 01 00 00 00 01 03     ................
     1b4:	1f fe f0 00 00 00 00 00 00 00 00 00 01 07 0f 0c     ................
     1c4:	1c 18 38 30 30 30 38 1c 0e 0f 03 00 00 00 00 00     ..80008.........

000001d4 <number5>:
     1d4:	00 00 00 f0 f8 18 18 18 18 18 18 18 18 18 18 18     ................
     1e4:	18 18 18 10 00 00 00 00 00 00 00 1f ff f0 80 80     ................
     1f4:	c0 c0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00     ................
     204:	00 00 00 00 03 03 03 01 01 00 00 00 01 01 03 07     ................
     214:	1e fc f0 00 00 00 00 00 00 00 00 00 1c 3c 30 30     .............<00
     224:	30 30 30 30 30 38 18 1c 0f 07 01 00 00 00 00 00     000008..........

00000234 <number4>:
     234:	00 00 00 00 00 00 fc fc 00 00 00 00 00 00 00 00     ................
	...
     250:	80 f0 ff 1f 00 00 00 00 00 00 00 00 f0 f0 00 00     ................
	...
     268:	03 03 03 03 03 03 03 03 03 03 03 03 ff ff 03 02     ................
	...
     28c:	3f 3f 00 00 00 00 00 00                             ??......

00000294 <number3>:
     294:	00 00 00 00 c0 e0 70 30 30 38 18 18 18 18 18 38     ......p008.....8
     2a4:	f0 e0 00 00 00 00 00 00 00 00 00 03 03 01 00 00     ................
     2b4:	00 00 80 80 80 80 c0 c0 f1 7f 1f 00 00 00 00 00     ................
	...
     2cc:	00 01 03 03 03 03 07 0e fc f8 00 00 00 00 00 00     ................
     2dc:	00 00 03 07 06 0e 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     2ec:	0f 07 00 00 00 00 00 00                             ........

000002f4 <number2>:
     2f4:	00 00 00 00 c0 e0 70 38 18 18 18 18 38 70 e0 c0     ......p8....8p..
	...
     310:	03 03 00 00 00 00 00 00 80 e0 ff 3f 00 00 00 00     ...........?....
	...
     328:	00 00 80 c0 f0 78 1c 0e 07 03 00 00 00 00 00 00     .....x..........
     338:	00 00 00 00 00 00 00 18 1e 1f 1b 19 18 18 18 18     ................
     348:	18 18 18 18 18 18 18 10 00 00 00 00                 ............

00000354 <number1>:
	...
     360:	c0 e0 f0 f0 e0 00 00 00 00 00 00 00 00 00 00 00     ................
     370:	00 00 80 e0 f0 38 1c 1f 07 03 ff ff 03 00 00 00     .....8..........
	...
     388:	00 00 03 01 00 00 00 00 c0 fe 7f 03 00 00 00 00     ................
	...
     3a0:	00 20 30 30 30 30 30 38 3f 3f 30 30 30 30 30 30     . 000008??000000
     3b0:	20 00 00 00                                          ...

000003b4 <number0>:
     3b4:	00 00 00 00 00 00 c0 e0 70 38 1c 08 0c 18 38 70     ........p8....8p
     3c4:	e0 c0 80 00 00 00 00 00 00 00 00 00 fc ff 07 01     ................
	...
     3dc:	00 01 0f ff f8 00 00 00 00 00 00 00 7f ff c0 00     ................
	...
     3f4:	00 00 e0 ff 3f 00 00 00 00 00 00 00 00 01 03 07     ....?...........
     404:	0e 0c 1c 18 18 18 18 18 1c 0c 0f 07 00 00 00 00     ................

00000414 <ssd1306xled_font8x16data>:
	...
     424:	00 00 00 f8 00 00 00 00 00 00 00 33 30 00 00 00     ...........30...
     434:	00 10 0c 06 10 0c 06 00 00 00 00 00 00 00 00 00     ................
     444:	40 c0 78 40 c0 78 40 00 04 3f 04 04 3f 04 04 00     @.x@.x@..?..?...
     454:	00 70 88 fc 08 30 00 00 00 18 20 ff 21 1e 00 00     .p...0.... .!...
     464:	f0 08 f0 00 e0 18 00 00 00 21 1c 03 1e 21 1e 00     .........!...!..
     474:	00 f0 08 88 70 00 00 00 1e 21 23 24 19 27 21 10     ....p....!#$.'!.
     484:	10 16 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     494:	00 00 00 e0 18 04 02 00 00 00 00 07 18 20 40 00     ............. @.
     4a4:	00 02 04 18 e0 00 00 00 00 40 20 18 07 00 00 00     .........@ .....
     4b4:	40 40 80 f0 80 40 40 00 02 02 01 0f 01 02 02 00     @@...@@.........
     4c4:	00 00 00 f0 00 00 00 00 01 01 01 1f 01 01 01 00     ................
	...
     4dc:	80 b0 70 00 00 00 00 00 00 00 00 00 00 00 00 00     ..p.............
     4ec:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
     4fc:	00 30 30 00 00 00 00 00 00 00 00 00 80 60 18 04     .00..........`..
     50c:	00 60 18 06 01 00 00 00 00 e0 10 08 08 10 e0 00     .`..............
     51c:	00 0f 10 20 20 10 0f 00 00 10 10 f8 00 00 00 00     ...  ...........
     52c:	00 20 20 3f 20 20 00 00 00 70 08 08 08 88 70 00     .  ?  ...p....p.
     53c:	00 30 28 24 22 21 30 00 00 30 08 88 88 48 30 00     .0($"!0..0...H0.
     54c:	00 18 20 20 20 11 0e 00 00 00 c0 20 10 f8 00 00     ..   ...... ....
     55c:	00 07 04 24 24 3f 24 00 00 f8 08 88 88 08 08 00     ...$$?$.........
     56c:	00 19 21 20 20 11 0e 00 00 e0 10 88 88 18 00 00     ..!  ...........
     57c:	00 0f 11 20 20 11 0e 00 00 38 08 08 c8 38 08 00     ...  ....8...8..
     58c:	00 00 00 3f 00 00 00 00 00 70 88 08 08 88 70 00     ...?.....p....p.
     59c:	00 1c 22 21 21 22 1c 00 00 e0 10 08 08 10 e0 00     .."!!"..........
     5ac:	00 00 31 22 22 11 0f 00 00 00 00 c0 c0 00 00 00     ..1""...........
     5bc:	00 00 00 30 30 00 00 00 00 00 00 80 00 00 00 00     ...00...........
     5cc:	00 00 80 60 00 00 00 00 00 00 80 40 20 10 08 00     ...`.......@ ...
     5dc:	00 01 02 04 08 10 20 00 40 40 40 40 40 40 40 00     ...... .@@@@@@@.
     5ec:	04 04 04 04 04 04 04 00 00 08 10 20 40 80 00 00     ........... @...
     5fc:	00 20 10 08 04 02 01 00 00 70 48 08 08 08 f0 00     . .......pH.....
     60c:	00 00 00 30 36 01 00 00 c0 30 c8 28 e8 10 e0 00     ...06....0.(....
     61c:	07 18 27 24 23 14 0b 00 00 00 c0 38 e0 00 00 00     ..'$#......8....
     62c:	20 3c 23 02 02 27 38 20 08 f8 88 88 88 70 00 00      <#..'8 .....p..
     63c:	20 3f 20 20 20 11 0e 00 c0 30 08 08 08 08 38 00      ?   ....0....8.
     64c:	07 18 20 20 20 10 08 00 08 f8 08 08 08 10 e0 00     ..   ...........
     65c:	20 3f 20 20 20 10 0f 00 08 f8 88 88 e8 08 10 00      ?   ...........
     66c:	20 3f 20 20 23 20 18 00 08 f8 88 88 e8 08 10 00      ?  # ..........
     67c:	20 3f 20 00 03 00 00 00 c0 30 08 08 08 38 00 00      ? ......0...8..
     68c:	07 18 20 20 22 1e 02 00 08 f8 08 00 00 08 f8 08     ..  "...........
     69c:	20 3f 21 01 01 21 3f 20 00 08 08 f8 08 08 00 00      ?!..!? ........
     6ac:	00 20 20 3f 20 20 00 00 00 00 08 08 f8 08 08 00     .  ?  ..........
     6bc:	c0 80 80 80 7f 00 00 00 08 f8 88 c0 28 18 08 00     ............(...
     6cc:	20 3f 20 01 26 38 20 00 08 f8 08 00 00 00 00 00      ? .&8 .........
     6dc:	20 3f 20 20 20 20 30 00 08 f8 f8 00 f8 f8 08 00      ?    0.........
     6ec:	20 3f 00 3f 00 3f 20 00 08 f8 30 c0 00 08 f8 08      ?.?.? ...0.....
     6fc:	20 3f 20 00 07 18 3f 00 e0 10 08 08 08 10 e0 00      ? ...?.........
     70c:	0f 10 20 20 20 10 0f 00 08 f8 08 08 08 08 f0 00     ..   ...........
     71c:	20 3f 21 01 01 01 00 00 e0 10 08 08 08 10 e0 00      ?!.............
     72c:	0f 18 24 24 38 50 4f 00 08 f8 88 88 88 88 70 00     ..$$8PO.......p.
     73c:	20 3f 20 00 03 0c 30 20 00 70 88 08 08 08 38 00      ? ...0 .p....8.
     74c:	00 38 20 21 21 22 1c 00 18 08 08 f8 08 08 18 00     .8 !!"..........
     75c:	00 00 20 3f 20 00 00 00 08 f8 08 00 00 08 f8 08     .. ? ...........
     76c:	00 1f 20 20 20 20 1f 00 08 78 88 00 00 c8 38 08     ..    ...x....8.
     77c:	00 00 07 38 0e 01 00 00 f8 08 00 f8 00 08 f8 00     ...8............
     78c:	03 3c 07 00 07 3c 03 00 08 18 68 80 80 68 18 08     .<...<....h..h..
     79c:	20 30 2c 03 03 2c 30 20 08 38 c8 00 c8 38 08 00      0,..,0 .8...8..
     7ac:	00 00 20 3f 20 00 00 00 10 08 08 08 c8 38 08 00     .. ? ........8..
     7bc:	20 38 26 21 20 20 18 00 00 00 00 fe 02 02 02 00      8&!  ..........
     7cc:	00 00 00 7f 40 40 40 00 00 0c 30 c0 00 00 00 00     ....@@@...0.....
     7dc:	00 00 00 01 06 38 c0 00 00 02 02 02 fe 00 00 00     .....8..........
     7ec:	00 40 40 40 7f 00 00 00 00 00 04 02 02 02 04 00     .@@@............
	...
     80c:	80 80 80 80 80 80 80 80 00 02 02 04 00 00 00 00     ................
	...
     824:	00 00 80 80 80 80 00 00 00 19 24 22 22 22 3f 20     ..........$"""? 
     834:	08 f8 00 80 80 00 00 00 00 3f 11 20 20 11 0e 00     .........?.  ...
     844:	00 00 00 80 80 80 00 00 00 0e 11 20 20 20 11 00     ...........   ..
     854:	00 00 00 80 80 88 f8 00 00 0e 11 20 20 10 3f 20     ...........  .? 
     864:	00 00 80 80 80 80 00 00 00 1f 22 22 22 22 13 00     ..........""""..
     874:	00 80 80 f0 88 88 88 18 00 20 20 3f 20 20 00 00     .........  ?  ..
     884:	00 00 80 80 80 80 80 00 00 6b 94 94 94 93 60 00     .........k....`.
     894:	08 f8 00 80 80 80 00 00 20 3f 21 00 00 20 3f 20     ........ ?!.. ? 
     8a4:	00 80 98 98 00 00 00 00 00 20 20 3f 20 20 00 00     .........  ?  ..
     8b4:	00 00 00 80 98 98 00 00 00 c0 80 80 80 7f 00 00     ................
     8c4:	08 f8 00 00 80 80 80 00 20 3f 24 02 2d 30 20 00     ........ ?$.-0 .
     8d4:	00 08 08 f8 00 00 00 00 00 20 20 3f 20 20 00 00     .........  ?  ..
     8e4:	80 80 80 80 80 80 80 00 20 3f 20 00 3f 20 00 3f     ........ ? .? .?
     8f4:	80 80 00 80 80 80 00 00 20 3f 21 00 00 20 3f 20     ........ ?!.. ? 
     904:	00 00 80 80 80 80 00 00 00 1f 20 20 20 20 1f 00     ..........    ..
     914:	80 80 00 80 80 00 00 00 80 ff a1 20 20 11 0e 00     ...........  ...
     924:	00 00 00 80 80 80 80 00 00 0e 11 20 20 a0 ff 80     ...........  ...
     934:	80 80 80 00 80 80 80 00 20 20 3f 21 20 00 01 00     ........  ?! ...
     944:	00 00 80 80 80 80 80 00 00 33 24 24 24 24 19 00     .........3$$$$..
     954:	00 80 80 e0 80 80 00 00 00 00 00 1f 20 20 00 00     ............  ..
     964:	80 80 00 00 00 80 80 00 00 1f 20 20 20 10 3f 20     ..........   .? 
     974:	80 80 80 00 00 80 80 80 00 01 0e 30 08 06 01 00     ...........0....
     984:	80 80 00 80 00 80 80 80 0f 30 0c 03 0c 30 0f 00     .........0...0..
     994:	00 80 80 00 80 80 80 00 00 20 31 2e 0e 31 20 00     ......... 1..1 .
     9a4:	80 80 80 00 00 80 80 80 80 81 8e 70 18 06 01 00     ...........p....
     9b4:	00 80 80 80 80 80 80 00 00 21 30 2c 22 21 30 00     .........!0,"!0.
     9c4:	00 00 00 00 80 7c 02 02 00 00 00 00 00 3f 40 40     .....|.......?@@
     9d4:	00 00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00     ................
     9e4:	00 02 02 7c 80 00 00 00 00 40 40 3f 00 00 00 00     ...|.....@@?....
     9f4:	00 06 01 01 02 02 04 04 00 00 00 00 00 00 00 00     ................

00000a04 <__ctors_end>:
     a04:	11 24       	eor	r1, r1
     a06:	1f be       	out	0x3f, r1	; 63
     a08:	cf ef       	ldi	r28, 0xFF	; 255
     a0a:	d4 e0       	ldi	r29, 0x04	; 4
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	cd bf       	out	0x3d, r28	; 61

00000a10 <__do_copy_data>:
     a10:	11 e0       	ldi	r17, 0x01	; 1
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b1 e0       	ldi	r27, 0x01	; 1
     a16:	e2 e3       	ldi	r30, 0x32	; 50
     a18:	f3 e1       	ldi	r31, 0x13	; 19
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <__do_copy_data+0x10>
     a1c:	05 90       	lpm	r0, Z+
     a1e:	0d 92       	st	X+, r0
     a20:	ac 31       	cpi	r26, 0x1C	; 28
     a22:	b1 07       	cpc	r27, r17
     a24:	d9 f7       	brne	.-10     	; 0xa1c <__do_copy_data+0xc>

00000a26 <__do_clear_bss>:
     a26:	21 e0       	ldi	r18, 0x01	; 1
     a28:	ac e1       	ldi	r26, 0x1C	; 28
     a2a:	b1 e0       	ldi	r27, 0x01	; 1
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <.do_clear_bss_start>

00000a2e <.do_clear_bss_loop>:
     a2e:	1d 92       	st	X+, r1

00000a30 <.do_clear_bss_start>:
     a30:	a2 32       	cpi	r26, 0x22	; 34
     a32:	b2 07       	cpc	r27, r18
     a34:	e1 f7       	brne	.-8      	; 0xa2e <.do_clear_bss_loop>
     a36:	d0 d2       	rcall	.+1440   	; 0xfd8 <main>
     a38:	7a c4       	rjmp	.+2292   	; 0x132e <_exit>

00000a3a <__bad_interrupt>:
     a3a:	e2 ca       	rjmp	.-2620   	; 0x0 <__vectors>

00000a3c <ssd1306_start_command>:

void ssd1306tx_string(char *s) {
	while (*s) {
		ssd1306tx_char(*s++);
	}
}
     a3c:	d3 d1       	rcall	.+934    	; 0xde4 <I2C_start>
     a3e:	88 e7       	ldi	r24, 0x78	; 120
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	e2 d1       	rcall	.+964    	; 0xe08 <I2C_write>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	df d1       	rcall	.+958    	; 0xe08 <I2C_write>
     a4a:	08 95       	ret

00000a4c <ssd1306_start_data>:
     a4c:	cb d1       	rcall	.+918    	; 0xde4 <I2C_start>
     a4e:	88 e7       	ldi	r24, 0x78	; 120
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	da d1       	rcall	.+948    	; 0xe08 <I2C_write>
     a54:	80 e4       	ldi	r24, 0x40	; 64
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	d7 d1       	rcall	.+942    	; 0xe08 <I2C_write>
     a5a:	08 95       	ret

00000a5c <ssd1306_init>:
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	eb df       	rcall	.-42     	; 0xa3c <ssd1306_start_command>
     a66:	c4 e3       	ldi	r28, 0x34	; 52
     a68:	d0 e0       	ldi	r29, 0x00	; 0
     a6a:	04 e5       	ldi	r16, 0x54	; 84
     a6c:	10 e0       	ldi	r17, 0x00	; 0
     a6e:	fe 01       	movw	r30, r28
     a70:	84 91       	lpm	r24, Z
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	c9 d1       	rcall	.+914    	; 0xe08 <I2C_write>
     a76:	21 96       	adiw	r28, 0x01	; 1
     a78:	c0 17       	cp	r28, r16
     a7a:	d1 07       	cpc	r29, r17
     a7c:	c1 f7       	brne	.-16     	; 0xa6e <ssd1306_init+0x12>
     a7e:	bb d1       	rcall	.+886    	; 0xdf6 <I2C_stop>
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <ssd1306_setpos>:
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	c8 2f       	mov	r28, r24
     a90:	d6 2f       	mov	r29, r22
     a92:	d4 df       	rcall	.-88     	; 0xa3c <ssd1306_start_command>
     a94:	d7 70       	andi	r29, 0x07	; 7
     a96:	8d 2f       	mov	r24, r29
     a98:	80 6b       	ori	r24, 0xB0	; 176
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	b5 d1       	rcall	.+874    	; 0xe08 <I2C_write>
     a9e:	8c 2f       	mov	r24, r28
     aa0:	8f 70       	andi	r24, 0x0F	; 15
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	b1 d1       	rcall	.+866    	; 0xe08 <I2C_write>
     aa6:	c2 95       	swap	r28
     aa8:	cf 70       	andi	r28, 0x0F	; 15
     aaa:	8c 2f       	mov	r24, r28
     aac:	80 61       	ori	r24, 0x10	; 16
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	ab d1       	rcall	.+854    	; 0xe08 <I2C_write>
     ab2:	a1 d1       	rcall	.+834    	; 0xdf6 <I2C_stop>
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <ssd1306_stop>:
     aba:	9d d1       	rcall	.+826    	; 0xdf6 <I2C_stop>
     abc:	08 95       	ret

00000abe <ssd1306_draw_bmp>:
     abe:	6f 92       	push	r6
     ac0:	7f 92       	push	r7
     ac2:	8f 92       	push	r8
     ac4:	9f 92       	push	r9
     ac6:	af 92       	push	r10
     ac8:	bf 92       	push	r11
     aca:	cf 92       	push	r12
     acc:	df 92       	push	r13
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	88 2e       	mov	r8, r24
     adc:	96 2e       	mov	r9, r22
     ade:	74 2e       	mov	r7, r20
     ae0:	62 2e       	mov	r6, r18
     ae2:	62 17       	cp	r22, r18
     ae4:	18 f5       	brcc	.+70     	; 0xb2c <ssd1306_draw_bmp+0x6e>
     ae6:	c1 2c       	mov	r12, r1
     ae8:	d1 2c       	mov	r13, r1
     aea:	aa 24       	eor	r10, r10
     aec:	aa 94       	dec	r10
     aee:	a4 0e       	add	r10, r20
     af0:	a8 1a       	sub	r10, r24
     af2:	b1 2c       	mov	r11, r1
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	a8 1a       	sub	r10, r24
     af8:	b8 0a       	sbc	r11, r24
     afa:	69 2d       	mov	r22, r9
     afc:	88 2d       	mov	r24, r8
     afe:	c5 df       	rcall	.-118    	; 0xa8a <ssd1306_setpos>
     b00:	a5 df       	rcall	.-182    	; 0xa4c <ssd1306_start_data>
     b02:	87 14       	cp	r8, r7
     b04:	80 f4       	brcc	.+32     	; 0xb26 <ssd1306_draw_bmp+0x68>
     b06:	e8 01       	movw	r28, r16
     b08:	cc 0d       	add	r28, r12
     b0a:	dd 1d       	adc	r29, r13
     b0c:	ca 0c       	add	r12, r10
     b0e:	db 1c       	adc	r13, r11
     b10:	78 01       	movw	r14, r16
     b12:	ec 0c       	add	r14, r12
     b14:	fd 1c       	adc	r15, r13
     b16:	fe 01       	movw	r30, r28
     b18:	84 91       	lpm	r24, Z
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	75 d1       	rcall	.+746    	; 0xe08 <I2C_write>
     b1e:	21 96       	adiw	r28, 0x01	; 1
     b20:	ce 15       	cp	r28, r14
     b22:	df 05       	cpc	r29, r15
     b24:	c1 f7       	brne	.-16     	; 0xb16 <ssd1306_draw_bmp+0x58>
     b26:	93 94       	inc	r9
     b28:	96 14       	cp	r9, r6
     b2a:	38 f3       	brcs	.-50     	; 0xafa <ssd1306_draw_bmp+0x3c>
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	df 90       	pop	r13
     b3a:	cf 90       	pop	r12
     b3c:	bf 90       	pop	r11
     b3e:	af 90       	pop	r10
     b40:	9f 90       	pop	r9
     b42:	8f 90       	pop	r8
     b44:	7f 90       	pop	r7
     b46:	6f 90       	pop	r6
     b48:	08 95       	ret

00000b4a <ssd1306_clear_display>:
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	d0 e0       	ldi	r29, 0x00	; 0
     b50:	6d 2f       	mov	r22, r29
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	9a df       	rcall	.-204    	; 0xa8a <ssd1306_setpos>
     b56:	7a df       	rcall	.-268    	; 0xa4c <ssd1306_start_data>
     b58:	c0 e8       	ldi	r28, 0x80	; 128
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	54 d1       	rcall	.+680    	; 0xe08 <I2C_write>
     b60:	c1 50       	subi	r28, 0x01	; 1
     b62:	d9 f7       	brne	.-10     	; 0xb5a <ssd1306_clear_display+0x10>
     b64:	df 5f       	subi	r29, 0xFF	; 255
     b66:	d8 30       	cpi	r29, 0x08	; 8
     b68:	99 f7       	brne	.-26     	; 0xb50 <ssd1306_clear_display+0x6>
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <ssd1306tx_init>:
     b70:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ssd1306tx_font_src+0x1>
     b74:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ssd1306tx_font_src>
     b78:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <ssd1306tx_font_char_base>
     b7c:	08 95       	ret

00000b7e <ssd1306tx_stringxy>:

void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
     b7e:	8f 92       	push	r8
     b80:	9f 92       	push	r9
     b82:	af 92       	push	r10
     b84:	bf 92       	push	r11
     b86:	cf 92       	push	r12
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	6c 01       	movw	r12, r24
     b98:	96 2e       	mov	r9, r22
     b9a:	84 2e       	mov	r8, r20
	uint16_t j, k = 0;
	while (s[k] != '\0') {
     b9c:	f9 01       	movw	r30, r18
     b9e:	a0 80       	ld	r10, Z
     ba0:	aa 20       	and	r10, r10
     ba2:	09 f4       	brne	.+2      	; 0xba6 <ssd1306tx_stringxy+0x28>
     ba4:	44 c0       	rjmp	.+136    	; 0xc2e <ssd1306tx_stringxy+0xb0>
     ba6:	79 01       	movw	r14, r18
     ba8:	ff ef       	ldi	r31, 0xFF	; 255
     baa:	ef 1a       	sub	r14, r31
     bac:	ff 0a       	sbc	r15, r31
		j = s[k] * 16 - (32 * 16); // Convert ASCII code to font data index. NOTE: (x*16) already optimized to (x<<4).
     bae:	b1 2c       	mov	r11, r1
     bb0:	80 e2       	ldi	r24, 0x20	; 32
     bb2:	a8 1a       	sub	r10, r24
     bb4:	b1 08       	sbc	r11, r1
     bb6:	aa 0c       	add	r10, r10
     bb8:	bb 1c       	adc	r11, r11
     bba:	aa 0c       	add	r10, r10
     bbc:	bb 1c       	adc	r11, r11
     bbe:	aa 0c       	add	r10, r10
     bc0:	bb 1c       	adc	r11, r11
     bc2:	aa 0c       	add	r10, r10
     bc4:	bb 1c       	adc	r11, r11
		if (x > 120) {
     bc6:	e8 e7       	ldi	r30, 0x78	; 120
     bc8:	e9 15       	cp	r30, r9
     bca:	10 f4       	brcc	.+4      	; 0xbd0 <ssd1306tx_stringxy+0x52>
			x = 0;    // Go to the next line.
			y++;
     bcc:	83 94       	inc	r8
void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
	uint16_t j, k = 0;
	while (s[k] != '\0') {
		j = s[k] * 16 - (32 * 16); // Convert ASCII code to font data index. NOTE: (x*16) already optimized to (x<<4).
		if (x > 120) {
			x = 0;    // Go to the next line.
     bce:	91 2c       	mov	r9, r1
			y++;
		}
		ssd1306_setpos(x, y);
     bd0:	68 2d       	mov	r22, r8
     bd2:	89 2d       	mov	r24, r9
     bd4:	5a df       	rcall	.-332    	; 0xa8a <ssd1306_setpos>
		ssd1306_start_data();
     bd6:	3a df       	rcall	.-396    	; 0xa4c <ssd1306_start_data>
     bd8:	86 01       	movw	r16, r12
     bda:	0a 0d       	add	r16, r10
     bdc:	1b 1d       	adc	r17, r11
     bde:	e5 01       	movw	r28, r10
     be0:	28 96       	adiw	r28, 0x08	; 8
     be2:	cc 0d       	add	r28, r12
     be4:	dd 1d       	adc	r29, r13
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
     be6:	f8 01       	movw	r30, r16
     be8:	84 91       	lpm	r24, Z
	}
	I2C_stop();	// Finish transmission
}

void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0d d1       	rcall	.+538    	; 0xe08 <I2C_write>
     bee:	0f 5f       	subi	r16, 0xFF	; 255
     bf0:	1f 4f       	sbci	r17, 0xFF	; 255
			x = 0;    // Go to the next line.
			y++;
		}
		ssd1306_setpos(x, y);
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
     bf2:	0c 17       	cp	r16, r28
     bf4:	1d 07       	cpc	r17, r29
     bf6:	b9 f7       	brne	.-18     	; 0xbe6 <ssd1306tx_stringxy+0x68>
void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
}

void ssd1306_stop(void) {
	I2C_stop();
     bf8:	fe d0       	rcall	.+508    	; 0xdf6 <I2C_stop>
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
		}
		ssd1306_stop();
		ssd1306_setpos(x, y + 1);
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	68 0d       	add	r22, r8
     bfe:	89 2d       	mov	r24, r9
     c00:	44 df       	rcall	.-376    	; 0xa8a <ssd1306_setpos>
		ssd1306_start_data();
     c02:	24 df       	rcall	.-440    	; 0xa4c <ssd1306_start_data>
     c04:	85 01       	movw	r16, r10
     c06:	00 5f       	subi	r16, 0xF0	; 240
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
     c0a:	0c 0d       	add	r16, r12
     c0c:	1d 1d       	adc	r17, r13
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i + 8]));
     c0e:	fe 01       	movw	r30, r28
     c10:	84 91       	lpm	r24, Z
	}
	I2C_stop();	// Finish transmission
}

void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	f9 d0       	rcall	.+498    	; 0xe08 <I2C_write>
     c16:	21 96       	adiw	r28, 0x01	; 1
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i]));
		}
		ssd1306_stop();
		ssd1306_setpos(x, y + 1);
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
     c18:	c0 17       	cp	r28, r16
     c1a:	d1 07       	cpc	r29, r17
     c1c:	c1 f7       	brne	.-16     	; 0xc0e <ssd1306tx_stringxy+0x90>
void ssd1306_data_byte(uint8_t b) {
	I2C_write(b);
}

void ssd1306_stop(void) {
	I2C_stop();
     c1e:	eb d0       	rcall	.+470    	; 0xdf6 <I2C_stop>
		ssd1306_start_data();
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_data_byte(pgm_read_byte(&fron_src[j + i + 8]));
		}
		ssd1306_stop();
		x += 8;
     c20:	f8 e0       	ldi	r31, 0x08	; 8
     c22:	9f 0e       	add	r9, r31
	}
}

void ssd1306tx_stringxy(const uint8_t *fron_src, uint8_t x, uint8_t y, const char s[]) {
	uint16_t j, k = 0;
	while (s[k] != '\0') {
     c24:	f7 01       	movw	r30, r14
     c26:	a1 90       	ld	r10, Z+
     c28:	7f 01       	movw	r14, r30
     c2a:	a1 10       	cpse	r10, r1
     c2c:	c0 cf       	rjmp	.-128    	; 0xbae <ssd1306tx_stringxy+0x30>
		}
		ssd1306_stop();
		x += 8;
		k++;
	}
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	bf 90       	pop	r11
     c40:	af 90       	pop	r10
     c42:	9f 90       	pop	r9
     c44:	8f 90       	pop	r8
     c46:	08 95       	ret

00000c48 <display_init>:
#include "display_extensions.h"


void display_init()
{
	I2C_Initialize(100);
     c48:	84 e6       	ldi	r24, 0x64	; 100
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	b4 d0       	rcall	.+360    	; 0xdb6 <I2C_Initialize>
	ssd1306_init();
     c4e:	06 df       	rcall	.-500    	; 0xa5c <ssd1306_init>
	ssd1306tx_init(ssd1306xled_font8x16data, ' ');
     c50:	60 e2       	ldi	r22, 0x20	; 32
     c52:	84 e1       	ldi	r24, 0x14	; 20
     c54:	94 e0       	ldi	r25, 0x04	; 4
     c56:	8c df       	rcall	.-232    	; 0xb70 <ssd1306tx_init>
	ssd1306_start_command();
     c58:	f1 de       	rcall	.-542    	; 0xa3c <ssd1306_start_command>
	I2C_write(0xA6);
     c5a:	86 ea       	ldi	r24, 0xA6	; 166
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	d4 d0       	rcall	.+424    	; 0xe08 <I2C_write>
	ssd1306_stop();
     c60:	2c df       	rcall	.-424    	; 0xaba <ssd1306_stop>
	ssd1306_clear_display();
     c62:	73 df       	rcall	.-282    	; 0xb4a <ssd1306_clear_display>
     c64:	08 95       	ret

00000c66 <numberToCharArray>:
}

char * numberToCharArray(int number)
{
	if(number == 0) return number0;
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	d9 f0       	breq	.+54     	; 0xca0 <numberToCharArray+0x3a>
	else if(number == 1) return number1;
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	91 05       	cpc	r25, r1
     c6e:	d9 f0       	breq	.+54     	; 0xca6 <numberToCharArray+0x40>
	else if(number == 2) return number2;
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	91 05       	cpc	r25, r1
     c74:	d9 f0       	breq	.+54     	; 0xcac <numberToCharArray+0x46>
	else if(number == 3) return number3;
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	91 05       	cpc	r25, r1
     c7a:	d9 f0       	breq	.+54     	; 0xcb2 <numberToCharArray+0x4c>
	else if(number == 4) return number4;
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	91 05       	cpc	r25, r1
     c80:	d9 f0       	breq	.+54     	; 0xcb8 <numberToCharArray+0x52>
	else if(number == 5) return number5;
     c82:	85 30       	cpi	r24, 0x05	; 5
     c84:	91 05       	cpc	r25, r1
     c86:	d9 f0       	breq	.+54     	; 0xcbe <numberToCharArray+0x58>
	else if(number == 6) return number6;
     c88:	86 30       	cpi	r24, 0x06	; 6
     c8a:	91 05       	cpc	r25, r1
     c8c:	d9 f0       	breq	.+54     	; 0xcc4 <numberToCharArray+0x5e>
	else if(number == 7) return number7;
     c8e:	87 30       	cpi	r24, 0x07	; 7
     c90:	91 05       	cpc	r25, r1
     c92:	d9 f0       	breq	.+54     	; 0xcca <numberToCharArray+0x64>
	else if(number == 8) return number8;
     c94:	88 30       	cpi	r24, 0x08	; 8
     c96:	91 05       	cpc	r25, r1
     c98:	d9 f0       	breq	.+54     	; 0xcd0 <numberToCharArray+0x6a>
	else if(number == 9) return number9;
     c9a:	09 97       	sbiw	r24, 0x09	; 9
     c9c:	e1 f0       	breq	.+56     	; 0xcd6 <numberToCharArray+0x70>
}
     c9e:	08 95       	ret
	ssd1306_clear_display();
}

char * numberToCharArray(int number)
{
	if(number == 0) return number0;
     ca0:	24 eb       	ldi	r18, 0xB4	; 180
     ca2:	33 e0       	ldi	r19, 0x03	; 3
     ca4:	1a c0       	rjmp	.+52     	; 0xcda <numberToCharArray+0x74>
	else if(number == 1) return number1;
     ca6:	24 e5       	ldi	r18, 0x54	; 84
     ca8:	33 e0       	ldi	r19, 0x03	; 3
     caa:	17 c0       	rjmp	.+46     	; 0xcda <numberToCharArray+0x74>
	else if(number == 2) return number2;
     cac:	24 ef       	ldi	r18, 0xF4	; 244
     cae:	32 e0       	ldi	r19, 0x02	; 2
     cb0:	14 c0       	rjmp	.+40     	; 0xcda <numberToCharArray+0x74>
	else if(number == 3) return number3;
     cb2:	24 e9       	ldi	r18, 0x94	; 148
     cb4:	32 e0       	ldi	r19, 0x02	; 2
     cb6:	11 c0       	rjmp	.+34     	; 0xcda <numberToCharArray+0x74>
	else if(number == 4) return number4;
     cb8:	24 e3       	ldi	r18, 0x34	; 52
     cba:	32 e0       	ldi	r19, 0x02	; 2
     cbc:	0e c0       	rjmp	.+28     	; 0xcda <numberToCharArray+0x74>
	else if(number == 5) return number5;
     cbe:	24 ed       	ldi	r18, 0xD4	; 212
     cc0:	31 e0       	ldi	r19, 0x01	; 1
     cc2:	0b c0       	rjmp	.+22     	; 0xcda <numberToCharArray+0x74>
	else if(number == 6) return number6;
     cc4:	24 e7       	ldi	r18, 0x74	; 116
     cc6:	31 e0       	ldi	r19, 0x01	; 1
     cc8:	08 c0       	rjmp	.+16     	; 0xcda <numberToCharArray+0x74>
	else if(number == 7) return number7;
     cca:	24 e1       	ldi	r18, 0x14	; 20
     ccc:	31 e0       	ldi	r19, 0x01	; 1
     cce:	05 c0       	rjmp	.+10     	; 0xcda <numberToCharArray+0x74>
	else if(number == 8) return number8;
     cd0:	24 eb       	ldi	r18, 0xB4	; 180
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <numberToCharArray+0x74>
	else if(number == 9) return number9;
     cd6:	24 e5       	ldi	r18, 0x54	; 84
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	82 2f       	mov	r24, r18
     cdc:	93 2f       	mov	r25, r19
}
     cde:	08 95       	ret

00000ce0 <draw_digit>:

void draw_digit(int xstart, int ystart, int digit)
{
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	c8 2f       	mov	r28, r24
     cea:	d6 2f       	mov	r29, r22
     cec:	ca 01       	movw	r24, r20
	ssd1306_draw_bmp(xstart, ystart, xstart+24, ystart+4, numberToCharArray(digit));
     cee:	bb df       	rcall	.-138    	; 0xc66 <numberToCharArray>
     cf0:	24 e0       	ldi	r18, 0x04	; 4
     cf2:	2d 0f       	add	r18, r29
     cf4:	48 e1       	ldi	r20, 0x18	; 24
     cf6:	4c 0f       	add	r20, r28
     cf8:	8c 01       	movw	r16, r24
     cfa:	6d 2f       	mov	r22, r29
     cfc:	8c 2f       	mov	r24, r28
     cfe:	df de       	rcall	.-578    	; 0xabe <ssd1306_draw_bmp>
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	08 95       	ret

00000d0a <draw_number>:

void draw_number(int xstart, int ystart, int number)
{
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	8c 01       	movw	r16, r24
     d18:	7b 01       	movw	r14, r22
     d1a:	ea 01       	movw	r28, r20
	int first, second;
	
	if (number > 99) 
     d1c:	44 36       	cpi	r20, 0x64	; 100
     d1e:	51 05       	cpc	r21, r1
     d20:	a4 f4       	brge	.+40     	; 0xd4a <draw_number+0x40>
	{
		return;
	}
	else if (number > 9)
     d22:	4a 30       	cpi	r20, 0x0A	; 10
     d24:	51 05       	cpc	r21, r1
     d26:	3c f0       	brlt	.+14     	; 0xd36 <draw_number+0x2c>
	{
		first = number/10;
		second = number%10;
     d28:	ca 01       	movw	r24, r20
     d2a:	6a e0       	ldi	r22, 0x0A	; 10
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	9a d2       	rcall	.+1332   	; 0x1264 <__divmodhi4>
     d30:	ab 01       	movw	r20, r22
     d32:	ec 01       	movw	r28, r24
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <draw_number+0x30>
	}
	else
	{
		first = 0;
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
		second = number;
	}
	
	draw_digit(xstart, ystart, first);
     d3a:	b7 01       	movw	r22, r14
     d3c:	c8 01       	movw	r24, r16
     d3e:	d0 df       	rcall	.-96     	; 0xce0 <draw_digit>
	draw_digit(xstart+ 24,ystart, second);
     d40:	ae 01       	movw	r20, r28
     d42:	b7 01       	movw	r22, r14
     d44:	c8 01       	movw	r24, r16
     d46:	48 96       	adiw	r24, 0x18	; 24
     d48:	cb df       	rcall	.-106    	; 0xce0 <draw_digit>
}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	08 95       	ret

00000d58 <draw_string>:

void draw_string(int xstart, int ystart, char* str, int stringLenght)
{
     d58:	9a 01       	movw	r18, r20
	ssd1306tx_stringxy(ssd1306xled_font8x16data, xstart, ystart, str);
     d5a:	46 2f       	mov	r20, r22
     d5c:	68 2f       	mov	r22, r24
     d5e:	84 e1       	ldi	r24, 0x14	; 20
     d60:	94 e0       	ldi	r25, 0x04	; 4
     d62:	0d df       	rcall	.-486    	; 0xb7e <ssd1306tx_stringxy>
     d64:	08 95       	ret

00000d66 <draw_clock>:
}

void draw_clock(int xstart, int ystart, int hours, int minutes, bool displayHour, bool displayMinute)
{
     d66:	af 92       	push	r10
     d68:	bf 92       	push	r11
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	0f 93       	push	r16
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	ec 01       	movw	r28, r24
     d78:	6b 01       	movw	r12, r22
     d7a:	59 01       	movw	r10, r18
	if(displayHour == 1)
     d7c:	01 11       	cpse	r16, r1
	{
		draw_number(xstart,ystart, hours);
     d7e:	c5 df       	rcall	.-118    	; 0xd0a <draw_number>
	draw_digit(xstart+ 24,ystart, second);
}

void draw_string(int xstart, int ystart, char* str, int stringLenght)
{
	ssd1306tx_stringxy(ssd1306xled_font8x16data, xstart, ystart, str);
     d80:	25 e0       	ldi	r18, 0x05	; 5
     d82:	31 e0       	ldi	r19, 0x01	; 1
     d84:	a6 01       	movw	r20, r12
     d86:	4f 5f       	subi	r20, 0xFF	; 255
     d88:	5f 4f       	sbci	r21, 0xFF	; 255
     d8a:	be 01       	movw	r22, r28
     d8c:	60 5d       	subi	r22, 0xD0	; 208
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	84 e1       	ldi	r24, 0x14	; 20
     d92:	94 e0       	ldi	r25, 0x04	; 4
     d94:	f4 de       	rcall	.-536    	; 0xb7e <ssd1306tx_stringxy>
		draw_number(xstart,ystart, hours);
	}
	
	draw_string(xstart +48, ystart +1, ":",1);
	
	if(displayMinute == 1)
     d96:	ee 20       	and	r14, r14
     d98:	29 f0       	breq	.+10     	; 0xda4 <draw_clock+0x3e>
	{	
		draw_number(xstart + 60, ystart, minutes);
     d9a:	a5 01       	movw	r20, r10
     d9c:	b6 01       	movw	r22, r12
     d9e:	ce 01       	movw	r24, r28
     da0:	cc 96       	adiw	r24, 0x3c	; 60
     da2:	b3 df       	rcall	.-154    	; 0xd0a <draw_number>
	}
}
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	0f 91       	pop	r16
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	bf 90       	pop	r11
     db2:	af 90       	pop	r10
     db4:	08 95       	ret

00000db6 <I2C_Initialize>:
{
	//TWSR |= 0x00; // Set prescaler to 1

	uint8_t bitrate_div;

	bitrate_div = ((F_CPU/1000l)/bitRate_kHz);
     db6:	9c 01       	movw	r18, r24
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	60 e4       	ldi	r22, 0x40	; 64
     dbe:	7f e1       	ldi	r23, 0x1F	; 31
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	62 d2       	rcall	.+1220   	; 0x128a <__divmodsi4>
     dc6:	82 2f       	mov	r24, r18
	
	if(bitrate_div >= 16)
     dc8:	20 31       	cpi	r18, 0x10	; 16
     dca:	48 f0       	brcs	.+18     	; 0xdde <I2C_Initialize+0x28>
	bitrate_div = (bitrate_div-16)/2;
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	20 51       	subi	r18, 0x10	; 16
     dd0:	31 09       	sbc	r19, r1
     dd2:	c9 01       	movw	r24, r18
     dd4:	99 23       	and	r25, r25
     dd6:	0c f4       	brge	.+2      	; 0xdda <I2C_Initialize+0x24>
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	95 95       	asr	r25
     ddc:	87 95       	ror	r24
	
	TWBR = bitrate_div;
     dde:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     de2:	08 95       	ret

00000de4 <I2C_start>:
}

void I2C_start(void){
	TWCR = (1<<TWINT) | (1<<TWEN) |( 1<<TWSTA);
     de4:	84 ea       	ldi	r24, 0xA4	; 164
     de6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWINT)));
     dea:	ec eb       	ldi	r30, 0xBC	; 188
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	88 23       	and	r24, r24
     df2:	ec f7       	brge	.-6      	; 0xdee <I2C_start+0xa>
}
     df4:	08 95       	ret

00000df6 <I2C_stop>:

void I2C_stop(void){
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     df6:	84 e9       	ldi	r24, 0x94	; 148
     df8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWSTO)));
     dfc:	ec eb       	ldi	r30, 0xBC	; 188
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	84 ff       	sbrs	r24, 4
     e04:	fd cf       	rjmp	.-6      	; 0xe00 <I2C_stop+0xa>
}
     e06:	08 95       	ret

00000e08 <I2C_write>:

void I2C_write(uint8_t dane){
	TWDR = dane;
     e08:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     e0c:	84 e8       	ldi	r24, 0x84	; 132
     e0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (! (TWCR & (1<<TWINT)));
     e12:	ec eb       	ldi	r30, 0xBC	; 188
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	88 23       	and	r24, r24
     e1a:	ec f7       	brge	.-6      	; 0xe16 <I2C_write+0xe>
}
     e1c:	08 95       	ret

00000e1e <display_timer_set>:
void display_temperature()
{
}

void display_timer_set() 
{	
     e1e:	ef 92       	push	r14
     e20:	0f 93       	push	r16
	draw_string(0, 0, "SET TIMER", 9);
     e22:	29 e0       	ldi	r18, 0x09	; 9
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	47 e0       	ldi	r20, 0x07	; 7
     e28:	51 e0       	ldi	r21, 0x01	; 1
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	92 df       	rcall	.-220    	; 0xd58 <draw_string>
	draw_clock(0,2, selected_hour, selected_minute, displayHour,displayMinute);
     e34:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     e38:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <selected_hour>
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	e0 90 01 01 	lds	r14, 0x0101	; 0x800101 <displayMinute>
     e44:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <displayHour>
     e48:	62 e0       	ldi	r22, 0x02	; 2
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	8a df       	rcall	.-236    	; 0xd66 <draw_clock>
}
     e52:	0f 91       	pop	r16
     e54:	ef 90       	pop	r14
     e56:	08 95       	ret

00000e58 <display_timer>:

void display_timer() 
{
     e58:	ef 92       	push	r14
     e5a:	0f 93       	push	r16
	draw_string(0, 0, "TIMER", 5);
     e5c:	25 e0       	ldi	r18, 0x05	; 5
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	4b e0       	ldi	r20, 0x0B	; 11
     e62:	51 e0       	ldi	r21, 0x01	; 1
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	75 df       	rcall	.-278    	; 0xd58 <draw_string>
	draw_clock(0,2, 0, 0, displayHour,displayMinute);
     e6e:	e0 90 01 01 	lds	r14, 0x0101	; 0x800101 <displayMinute>
     e72:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <displayHour>
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	62 e0       	ldi	r22, 0x02	; 2
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	6f df       	rcall	.-290    	; 0xd66 <draw_clock>
}
     e88:	0f 91       	pop	r16
     e8a:	ef 90       	pop	r14
     e8c:	08 95       	ret

00000e8e <display_clock_set>:

void display_clock_set() 
{
     e8e:	ef 92       	push	r14
     e90:	0f 93       	push	r16
	draw_string(0, 0, "SET CLOCK", 9);
     e92:	29 e0       	ldi	r18, 0x09	; 9
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	41 e1       	ldi	r20, 0x11	; 17
     e98:	51 e0       	ldi	r21, 0x01	; 1
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	5a df       	rcall	.-332    	; 0xd58 <draw_string>
	draw_clock(0,2, selected_hour, selected_minute, displayHour,displayMinute);
     ea4:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     ea8:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <selected_hour>
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	e0 90 01 01 	lds	r14, 0x0101	; 0x800101 <displayMinute>
     eb4:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <displayHour>
     eb8:	62 e0       	ldi	r22, 0x02	; 2
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	52 df       	rcall	.-348    	; 0xd66 <draw_clock>
}
     ec2:	0f 91       	pop	r16
     ec4:	ef 90       	pop	r14
     ec6:	08 95       	ret

00000ec8 <display_clock>:

void display_clock() 
{
     ec8:	ef 92       	push	r14
     eca:	0f 93       	push	r16
	draw_clock(0,0, hour, minute, displayHour, displayMinute);
     ecc:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <minute>
     ed0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <hour>
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	e0 90 01 01 	lds	r14, 0x0101	; 0x800101 <displayMinute>
     edc:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <displayHour>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	3e df       	rcall	.-388    	; 0xd66 <draw_clock>
	draw_number(60,4,second);
     eea:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <second>
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	64 e0       	ldi	r22, 0x04	; 4
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	8c e3       	ldi	r24, 0x3C	; 60
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	08 df       	rcall	.-496    	; 0xd0a <draw_number>
}
     efa:	0f 91       	pop	r16
     efc:	ef 90       	pop	r14
     efe:	08 95       	ret

00000f00 <run>:

void run()
{	
	if(selected_menu == MENU_DASHBOARD) display_dashboard();
     f00:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f04:	8c 33       	cpi	r24, 0x3C	; 60
     f06:	19 f1       	breq	.+70     	; 0xf4e <run+0x4e>
	else if(selected_menu == MENU_TEMPEREATURE) display_temperature();
     f08:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f0c:	82 33       	cpi	r24, 0x32	; 50
     f0e:	f9 f0       	breq	.+62     	; 0xf4e <run+0x4e>
	else if(selected_menu == MENU_TIMER) display_timer();
     f10:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f14:	8e 31       	cpi	r24, 0x1E	; 30
     f16:	11 f4       	brne	.+4      	; 0xf1c <run+0x1c>
     f18:	9f df       	rcall	.-194    	; 0xe58 <display_timer>
     f1a:	08 95       	ret
	else if(selected_menu == MENU_TIMER_SET_HOUR || selected_menu == MENU_TIMER_SET_MINUTE) display_timer_set();
     f1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f20:	88 32       	cpi	r24, 0x28	; 40
     f22:	21 f0       	breq	.+8      	; 0xf2c <run+0x2c>
     f24:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f28:	89 32       	cpi	r24, 0x29	; 41
     f2a:	11 f4       	brne	.+4      	; 0xf30 <run+0x30>
     f2c:	78 df       	rcall	.-272    	; 0xe1e <display_timer_set>
     f2e:	08 95       	ret
	else if(selected_menu == MENU_CLOCK) display_clock();
     f30:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	11 f4       	brne	.+4      	; 0xf3c <run+0x3c>
     f38:	c7 df       	rcall	.-114    	; 0xec8 <display_clock>
     f3a:	08 95       	ret
	else if(selected_menu == MENU_CLOCK_SET_HOUR || selected_menu == MENU_CLOCK_SET_MINUTE) display_clock_set();
     f3c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f40:	84 31       	cpi	r24, 0x14	; 20
     f42:	21 f0       	breq	.+8      	; 0xf4c <run+0x4c>
     f44:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f48:	85 31       	cpi	r24, 0x15	; 21
     f4a:	09 f4       	brne	.+2      	; 0xf4e <run+0x4e>
     f4c:	a0 df       	rcall	.-192    	; 0xe8e <display_clock_set>
     f4e:	08 95       	ret

00000f50 <switch_menu>:
}

void switch_menu(int number)
{
     f50:	cf 93       	push	r28
     f52:	c8 2f       	mov	r28, r24
	ssd1306_clear_display();
     f54:	fa dd       	rcall	.-1036   	; 0xb4a <ssd1306_clear_display>
	selected_menu = number;
     f56:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f5a:	2f e7       	ldi	r18, 0x7F	; 127
     f5c:	8a e1       	ldi	r24, 0x1A	; 26
     f5e:	96 e0       	ldi	r25, 0x06	; 6
     f60:	21 50       	subi	r18, 0x01	; 1
     f62:	80 40       	sbci	r24, 0x00	; 0
     f64:	90 40       	sbci	r25, 0x00	; 0
     f66:	e1 f7       	brne	.-8      	; 0xf60 <switch_menu+0x10>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <switch_menu+0x1a>
     f6a:	00 00       	nop
	_delay_ms(250);
}
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <port_init>:
void port_init()
{
	//DDRD |= LED1;
	//DDRB |= LED2;
	
	DDRC &= ~(BUTTON_2 | BUTTON_1);
     f70:	87 b1       	in	r24, 0x07	; 7
     f72:	83 7f       	andi	r24, 0xF3	; 243
     f74:	87 b9       	out	0x07, r24	; 7
	DDRB &= ~(BUTTON_4 | BUTTON_3);
     f76:	84 b1       	in	r24, 0x04	; 4
     f78:	89 7f       	andi	r24, 0xF9	; 249
     f7a:	84 b9       	out	0x04, r24	; 4
	
	TCCR1B = (1<<CS12) | (1<<WGM12);
     f7c:	8c e0       	ldi	r24, 0x0C	; 12
     f7e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	OCR1AH = 0x7A;
     f82:	8a e7       	ldi	r24, 0x7A	; 122
     f84:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
	OCR1AL = 0x12;
     f88:	82 e1       	ldi	r24, 0x12	; 18
     f8a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 |= (1<<ICIE1) | (1<<OCIE1A);
     f8e:	ef e6       	ldi	r30, 0x6F	; 111
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	82 62       	ori	r24, 0x22	; 34
     f96:	80 83       	st	Z, r24
     f98:	08 95       	ret

00000f9a <refreshBools>:
}

void refreshBools()
{
	displayMinute = (selected_menu != MENU_CLOCK_SET_HOUR && selected_menu != MENU_TIMER_SET_HOUR);
     f9a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f9e:	84 31       	cpi	r24, 0x14	; 20
     fa0:	39 f0       	breq	.+14     	; 0xfb0 <refreshBools+0x16>
     fa2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	98 32       	cpi	r25, 0x28	; 40
     faa:	19 f4       	brne	.+6      	; 0xfb2 <refreshBools+0x18>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <refreshBools+0x18>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	81 70       	andi	r24, 0x01	; 1
     fb4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <displayMinute>
	displayHour = (selected_menu != MENU_CLOCK_SET_MINUTE && selected_menu != MENU_TIMER_SET_MINUTE);
     fb8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fbc:	85 31       	cpi	r24, 0x15	; 21
     fbe:	39 f0       	breq	.+14     	; 0xfce <refreshBools+0x34>
     fc0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	99 32       	cpi	r25, 0x29	; 41
     fc8:	19 f4       	brne	.+6      	; 0xfd0 <refreshBools+0x36>
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <refreshBools+0x36>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	81 70       	andi	r24, 0x01	; 1
     fd2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <displayHour>
     fd6:	08 95       	ret

00000fd8 <main>:
}

int main(void)
{
	sei();
     fd8:	78 94       	sei
	port_init();
     fda:	ca df       	rcall	.-108    	; 0xf70 <port_init>
	display_init();
     fdc:	35 de       	rcall	.-918    	; 0xc48 <display_init>

	while (1)
	{
		
		if(selected_menu == MENU_CLOCK || selected_menu == MENU_TIMER || selected_menu == MENU_TEMPEREATURE || selected_menu == MENU_DASHBOARD)
     fde:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	61 f0       	breq	.+24     	; 0xffe <main+0x26>
     fe6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fea:	8e 31       	cpi	r24, 0x1E	; 30
     fec:	41 f0       	breq	.+16     	; 0xffe <main+0x26>
     fee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ff2:	82 33       	cpi	r24, 0x32	; 50
     ff4:	21 f0       	breq	.+8      	; 0xffe <main+0x26>
     ff6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ffa:	8c 33       	cpi	r24, 0x3C	; 60
     ffc:	61 f5       	brne	.+88     	; 0x1056 <main+0x7e>
		{
			if(BUTTON_1_PRESSED && selected_menu == MENU_CLOCK) switch_menu(MENU_CLOCK_SET_HOUR);
     ffe:	33 99       	sbic	0x06, 3	; 6
    1000:	08 c0       	rjmp	.+16     	; 0x1012 <main+0x3a>
    1002:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	21 f4       	brne	.+8      	; 0x1012 <main+0x3a>
    100a:	84 e1       	ldi	r24, 0x14	; 20
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	a0 df       	rcall	.-192    	; 0xf50 <switch_menu>
    1010:	c1 c0       	rjmp	.+386    	; 0x1194 <main+0x1bc>
			else if(BUTTON_1_PRESSED) switch_menu(MENU_CLOCK);
    1012:	33 99       	sbic	0x06, 3	; 6
    1014:	04 c0       	rjmp	.+8      	; 0x101e <main+0x46>
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	9a df       	rcall	.-204    	; 0xf50 <switch_menu>
    101c:	bb c0       	rjmp	.+374    	; 0x1194 <main+0x1bc>
			else if(BUTTON_2_PRESSED && selected_menu == MENU_TIMER) switch_menu(MENU_TIMER_SET_HOUR);
    101e:	32 99       	sbic	0x06, 2	; 6
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <main+0x5a>
    1022:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1026:	8e 31       	cpi	r24, 0x1E	; 30
    1028:	21 f4       	brne	.+8      	; 0x1032 <main+0x5a>
    102a:	88 e2       	ldi	r24, 0x28	; 40
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	90 df       	rcall	.-224    	; 0xf50 <switch_menu>
    1030:	b1 c0       	rjmp	.+354    	; 0x1194 <main+0x1bc>
			else if(BUTTON_2_PRESSED) switch_menu(MENU_TIMER);
    1032:	32 99       	sbic	0x06, 2	; 6
    1034:	04 c0       	rjmp	.+8      	; 0x103e <main+0x66>
    1036:	8e e1       	ldi	r24, 0x1E	; 30
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	8a df       	rcall	.-236    	; 0xf50 <switch_menu>
    103c:	ab c0       	rjmp	.+342    	; 0x1194 <main+0x1bc>
			else if(BUTTON_3_PRESSED) switch_menu(MENU_TEMPEREATURE);
    103e:	1a 99       	sbic	0x03, 2	; 3
    1040:	04 c0       	rjmp	.+8      	; 0x104a <main+0x72>
    1042:	82 e3       	ldi	r24, 0x32	; 50
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	84 df       	rcall	.-248    	; 0xf50 <switch_menu>
    1048:	a5 c0       	rjmp	.+330    	; 0x1194 <main+0x1bc>
			else if(BUTTON_4_PRESSED) switch_menu(MENU_DASHBOARD);
    104a:	19 99       	sbic	0x03, 1	; 3
    104c:	a3 c0       	rjmp	.+326    	; 0x1194 <main+0x1bc>
    104e:	8c e3       	ldi	r24, 0x3C	; 60
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	7e df       	rcall	.-260    	; 0xf50 <switch_menu>
    1054:	9f c0       	rjmp	.+318    	; 0x1194 <main+0x1bc>
		}
		else if(selected_menu == MENU_CLOCK_SET_HOUR || selected_menu == MENU_TIMER_SET_HOUR)
    1056:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    105a:	84 31       	cpi	r24, 0x14	; 20
    105c:	29 f0       	breq	.+10     	; 0x1068 <main+0x90>
    105e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1062:	88 32       	cpi	r24, 0x28	; 40
    1064:	09 f0       	breq	.+2      	; 0x1068 <main+0x90>
    1066:	42 c0       	rjmp	.+132    	; 0x10ec <main+0x114>
		{				
			if(BUTTON_1_PRESSED)
    1068:	33 99       	sbic	0x06, 3	; 6
    106a:	10 c0       	rjmp	.+32     	; 0x108c <main+0xb4>
			{
				selected_hour = add_hour(selected_hour);
    106c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <selected_hour>
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	d9 d0       	rcall	.+434    	; 0x1226 <add_hour>
    1074:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <selected_hour>
    1078:	2f ef       	ldi	r18, 0xFF	; 255
    107a:	81 ee       	ldi	r24, 0xE1	; 225
    107c:	94 e0       	ldi	r25, 0x04	; 4
    107e:	21 50       	subi	r18, 0x01	; 1
    1080:	80 40       	sbci	r24, 0x00	; 0
    1082:	90 40       	sbci	r25, 0x00	; 0
    1084:	e1 f7       	brne	.-8      	; 0x107e <main+0xa6>
    1086:	00 c0       	rjmp	.+0      	; 0x1088 <main+0xb0>
    1088:	00 00       	nop
    108a:	84 c0       	rjmp	.+264    	; 0x1194 <main+0x1bc>
				_delay_ms(200);
			}
			else if(BUTTON_2_PRESSED)
    108c:	32 99       	sbic	0x06, 2	; 6
    108e:	10 c0       	rjmp	.+32     	; 0x10b0 <main+0xd8>
			{
				selected_hour = subtract_hour(selected_hour);	
    1090:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <selected_hour>
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	dc d0       	rcall	.+440    	; 0x1250 <subtract_hour>
    1098:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <selected_hour>
    109c:	2f ef       	ldi	r18, 0xFF	; 255
    109e:	81 ee       	ldi	r24, 0xE1	; 225
    10a0:	94 e0       	ldi	r25, 0x04	; 4
    10a2:	21 50       	subi	r18, 0x01	; 1
    10a4:	80 40       	sbci	r24, 0x00	; 0
    10a6:	90 40       	sbci	r25, 0x00	; 0
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <main+0xca>
    10aa:	00 c0       	rjmp	.+0      	; 0x10ac <main+0xd4>
    10ac:	00 00       	nop
    10ae:	72 c0       	rjmp	.+228    	; 0x1194 <main+0x1bc>
				_delay_ms(200);
			}
			else if(BUTTON_3_PRESSED)
    10b0:	1a 99       	sbic	0x03, 2	; 3
    10b2:	0d c0       	rjmp	.+26     	; 0x10ce <main+0xf6>
			{
				switch_menu(MENU_CLOCK_SET_MINUTE);
    10b4:	85 e1       	ldi	r24, 0x15	; 21
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	4b df       	rcall	.-362    	; 0xf50 <switch_menu>
    10ba:	2f ef       	ldi	r18, 0xFF	; 255
    10bc:	81 ee       	ldi	r24, 0xE1	; 225
    10be:	94 e0       	ldi	r25, 0x04	; 4
    10c0:	21 50       	subi	r18, 0x01	; 1
    10c2:	80 40       	sbci	r24, 0x00	; 0
    10c4:	90 40       	sbci	r25, 0x00	; 0
    10c6:	e1 f7       	brne	.-8      	; 0x10c0 <main+0xe8>
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <main+0xf2>
    10ca:	00 00       	nop
    10cc:	63 c0       	rjmp	.+198    	; 0x1194 <main+0x1bc>
				_delay_ms(200);
			}
			else if(BUTTON_4_PRESSED) 
    10ce:	19 99       	sbic	0x03, 1	; 3
    10d0:	61 c0       	rjmp	.+194    	; 0x1194 <main+0x1bc>
			{
				switch_menu(MENU_CLOCK);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	3c df       	rcall	.-392    	; 0xf50 <switch_menu>
    10d8:	2f ef       	ldi	r18, 0xFF	; 255
    10da:	81 ee       	ldi	r24, 0xE1	; 225
    10dc:	94 e0       	ldi	r25, 0x04	; 4
    10de:	21 50       	subi	r18, 0x01	; 1
    10e0:	80 40       	sbci	r24, 0x00	; 0
    10e2:	90 40       	sbci	r25, 0x00	; 0
    10e4:	e1 f7       	brne	.-8      	; 0x10de <main+0x106>
    10e6:	00 c0       	rjmp	.+0      	; 0x10e8 <main+0x110>
    10e8:	00 00       	nop
    10ea:	54 c0       	rjmp	.+168    	; 0x1194 <main+0x1bc>
				_delay_ms(200);
			};
		}
		else if(selected_menu == MENU_CLOCK_SET_MINUTE) 
    10ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    10f0:	85 31       	cpi	r24, 0x15	; 21
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <main+0x11e>
    10f4:	4f c0       	rjmp	.+158    	; 0x1194 <main+0x1bc>
		{
			if(BUTTON_1_PRESSED)
    10f6:	33 99       	sbic	0x06, 3	; 6
    10f8:	10 c0       	rjmp	.+32     	; 0x111a <main+0x142>
			{
				selected_minute = add_minute(selected_minute);
    10fa:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	99 d0       	rcall	.+306    	; 0x1234 <add_minute>
    1102:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
    1106:	2f ef       	ldi	r18, 0xFF	; 255
    1108:	81 ee       	ldi	r24, 0xE1	; 225
    110a:	94 e0       	ldi	r25, 0x04	; 4
    110c:	21 50       	subi	r18, 0x01	; 1
    110e:	80 40       	sbci	r24, 0x00	; 0
    1110:	90 40       	sbci	r25, 0x00	; 0
    1112:	e1 f7       	brne	.-8      	; 0x110c <main+0x134>
    1114:	00 c0       	rjmp	.+0      	; 0x1116 <main+0x13e>
    1116:	00 00       	nop
    1118:	3d c0       	rjmp	.+122    	; 0x1194 <main+0x1bc>
				_delay_ms(200);
			}
			else if(BUTTON_2_PRESSED)
    111a:	32 99       	sbic	0x06, 2	; 6
    111c:	10 c0       	rjmp	.+32     	; 0x113e <main+0x166>
			{
				selected_minute = subtract_minute(selected_minute);
    111e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	9a d0       	rcall	.+308    	; 0x125a <subtract_minute>
    1126:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
    112a:	2f ef       	ldi	r18, 0xFF	; 255
    112c:	81 ee       	ldi	r24, 0xE1	; 225
    112e:	94 e0       	ldi	r25, 0x04	; 4
    1130:	21 50       	subi	r18, 0x01	; 1
    1132:	80 40       	sbci	r24, 0x00	; 0
    1134:	90 40       	sbci	r25, 0x00	; 0
    1136:	e1 f7       	brne	.-8      	; 0x1130 <main+0x158>
    1138:	00 c0       	rjmp	.+0      	; 0x113a <main+0x162>
    113a:	00 00       	nop
    113c:	2b c0       	rjmp	.+86     	; 0x1194 <main+0x1bc>
				_delay_ms(200);
			}
			else if(BUTTON_3_PRESSED)
    113e:	1a 99       	sbic	0x03, 2	; 3
    1140:	1b c0       	rjmp	.+54     	; 0x1178 <main+0x1a0>
			{
				hour = selected_hour;
    1142:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <selected_hour>
    1146:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hour>
				minute = selected_minute;
    114a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    114e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <minute>
				second, selected_hour, selected_minute = 0;
    1152:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <second>
    1156:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <selected_hour>
    115a:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
				switch_menu(MENU_CLOCK);
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	f6 de       	rcall	.-532    	; 0xf50 <switch_menu>
    1164:	2f ef       	ldi	r18, 0xFF	; 255
    1166:	81 ee       	ldi	r24, 0xE1	; 225
    1168:	94 e0       	ldi	r25, 0x04	; 4
    116a:	21 50       	subi	r18, 0x01	; 1
    116c:	80 40       	sbci	r24, 0x00	; 0
    116e:	90 40       	sbci	r25, 0x00	; 0
    1170:	e1 f7       	brne	.-8      	; 0x116a <main+0x192>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <main+0x19c>
    1174:	00 00       	nop
    1176:	0e c0       	rjmp	.+28     	; 0x1194 <main+0x1bc>
				_delay_ms(200);
			}
			else if(BUTTON_4_PRESSED)
    1178:	19 99       	sbic	0x03, 1	; 3
    117a:	0c c0       	rjmp	.+24     	; 0x1194 <main+0x1bc>
			{
				switch_menu(MENU_CLOCK_SET_HOUR);
    117c:	84 e1       	ldi	r24, 0x14	; 20
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	e7 de       	rcall	.-562    	; 0xf50 <switch_menu>
    1182:	2f ef       	ldi	r18, 0xFF	; 255
    1184:	81 ee       	ldi	r24, 0xE1	; 225
    1186:	94 e0       	ldi	r25, 0x04	; 4
    1188:	21 50       	subi	r18, 0x01	; 1
    118a:	80 40       	sbci	r24, 0x00	; 0
    118c:	90 40       	sbci	r25, 0x00	; 0
    118e:	e1 f7       	brne	.-8      	; 0x1188 <main+0x1b0>
    1190:	00 c0       	rjmp	.+0      	; 0x1192 <main+0x1ba>
    1192:	00 00       	nop
				_delay_ms(200);
			};
		}
		refreshBools();	
    1194:	02 df       	rcall	.-508    	; 0xf9a <refreshBools>
		run();
    1196:	b4 de       	rcall	.-664    	; 0xf00 <run>
	}
    1198:	22 cf       	rjmp	.-444    	; 0xfde <main+0x6>

0000119a <__vector_11>:
}

ISR (TIMER1_COMPA_vect)
{
    119a:	1f 92       	push	r1
    119c:	0f 92       	push	r0
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	0f 92       	push	r0
    11a2:	11 24       	eor	r1, r1
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
    11b8:	cf 93       	push	r28
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
	int previous = second;
    11be:	c0 91 1d 01 	lds	r28, 0x011D	; 0x80011d <second>
	second = add_second(second);
    11c2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <second>
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	3c d0       	rcall	.+120    	; 0x1242 <add_second>
    11ca:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <second>
	
	if(previous == 59 && second == 0)
    11ce:	cb 33       	cpi	r28, 0x3B	; 59
    11d0:	c1 f4       	brne	.+48     	; 0x1202 <__vector_11+0x68>
    11d2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <second>
    11d6:	81 11       	cpse	r24, r1
    11d8:	0a c0       	rjmp	.+20     	; 0x11ee <__vector_11+0x54>
	{
		previous = minute;
    11da:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <minute>
		minute = add_minute(minute);
    11de:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <minute>
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	27 d0       	rcall	.+78     	; 0x1234 <add_minute>
    11e6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <minute>
	}
	
	if(previous == 59 && minute == 0)
    11ea:	cb 33       	cpi	r28, 0x3B	; 59
    11ec:	51 f4       	brne	.+20     	; 0x1202 <__vector_11+0x68>
    11ee:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <minute>
    11f2:	81 11       	cpse	r24, r1
    11f4:	06 c0       	rjmp	.+12     	; 0x1202 <__vector_11+0x68>
		hour = add_hour(hour);
    11f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hour>
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	14 d0       	rcall	.+40     	; 0x1226 <add_hour>
    11fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hour>
    1202:	ff 91       	pop	r31
    1204:	ef 91       	pop	r30
    1206:	cf 91       	pop	r28
    1208:	bf 91       	pop	r27
    120a:	af 91       	pop	r26
    120c:	9f 91       	pop	r25
    120e:	8f 91       	pop	r24
    1210:	7f 91       	pop	r23
    1212:	6f 91       	pop	r22
    1214:	5f 91       	pop	r21
    1216:	4f 91       	pop	r20
    1218:	3f 91       	pop	r19
    121a:	2f 91       	pop	r18
    121c:	0f 90       	pop	r0
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	0f 90       	pop	r0
    1222:	1f 90       	pop	r1
    1224:	18 95       	reti

00001226 <add_hour>:
	return subtract_number(number, MINUTES_IN_HOUR - 1);
}

int add_number(int number, int max)
{
	number++;
    1226:	01 96       	adiw	r24, 0x01	; 1
	
	if(number > max)
    1228:	88 31       	cpi	r24, 0x18	; 24
    122a:	91 05       	cpc	r25, r1
    122c:	14 f0       	brlt	.+4      	; 0x1232 <add_hour+0xc>
	{
		number = 0;
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
int subtract_number(int number, int max);

int add_hour(int number)
{
	return add_number(number, HOURS_IN_DAY - 1);
}
    1232:	08 95       	ret

00001234 <add_minute>:
	return subtract_number(number, MINUTES_IN_HOUR - 1);
}

int add_number(int number, int max)
{
	number++;
    1234:	01 96       	adiw	r24, 0x01	; 1
	
	if(number > max)
    1236:	8c 33       	cpi	r24, 0x3C	; 60
    1238:	91 05       	cpc	r25, r1
    123a:	14 f0       	brlt	.+4      	; 0x1240 <add_minute+0xc>
	{
		number = 0;
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
}

int add_minute(int number)
{
	return add_number(number, MINUTES_IN_HOUR - 1);
}
    1240:	08 95       	ret

00001242 <add_second>:
	return subtract_number(number, MINUTES_IN_HOUR - 1);
}

int add_number(int number, int max)
{
	number++;
    1242:	01 96       	adiw	r24, 0x01	; 1
	
	if(number > max)
    1244:	8c 33       	cpi	r24, 0x3C	; 60
    1246:	91 05       	cpc	r25, r1
    1248:	14 f0       	brlt	.+4      	; 0x124e <add_second+0xc>
	{
		number = 0;
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
}

int add_second(int number)
{
	return add_number(number, SECONDS_IN_MINUTE -1);
}
    124e:	08 95       	ret

00001250 <subtract_hour>:
	return number;
}

int subtract_number(int number, int max)
{
	number--;
    1250:	01 97       	sbiw	r24, 0x01	; 1
	
	if(number < 0)
    1252:	12 f4       	brpl	.+4      	; 0x1258 <subtract_hour+0x8>
	{
		number = max;
    1254:	87 e1       	ldi	r24, 0x17	; 23
    1256:	90 e0       	ldi	r25, 0x00	; 0
}

int subtract_hour(int number)
{
	return subtract_number(number, HOURS_IN_DAY - 1);
}
    1258:	08 95       	ret

0000125a <subtract_minute>:
	return number;
}

int subtract_number(int number, int max)
{
	number--;
    125a:	01 97       	sbiw	r24, 0x01	; 1
	
	if(number < 0)
    125c:	12 f4       	brpl	.+4      	; 0x1262 <subtract_minute+0x8>
	{
		number = max;
    125e:	8b e3       	ldi	r24, 0x3B	; 59
    1260:	90 e0       	ldi	r25, 0x00	; 0
}

int subtract_minute(int number)
{
	return subtract_number(number, MINUTES_IN_HOUR - 1);
}
    1262:	08 95       	ret

00001264 <__divmodhi4>:
    1264:	97 fb       	bst	r25, 7
    1266:	07 2e       	mov	r0, r23
    1268:	16 f4       	brtc	.+4      	; 0x126e <__divmodhi4+0xa>
    126a:	00 94       	com	r0
    126c:	06 d0       	rcall	.+12     	; 0x127a <__divmodhi4_neg1>
    126e:	77 fd       	sbrc	r23, 7
    1270:	08 d0       	rcall	.+16     	; 0x1282 <__divmodhi4_neg2>
    1272:	27 d0       	rcall	.+78     	; 0x12c2 <__udivmodhi4>
    1274:	07 fc       	sbrc	r0, 7
    1276:	05 d0       	rcall	.+10     	; 0x1282 <__divmodhi4_neg2>
    1278:	3e f4       	brtc	.+14     	; 0x1288 <__divmodhi4_exit>

0000127a <__divmodhi4_neg1>:
    127a:	90 95       	com	r25
    127c:	81 95       	neg	r24
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	08 95       	ret

00001282 <__divmodhi4_neg2>:
    1282:	70 95       	com	r23
    1284:	61 95       	neg	r22
    1286:	7f 4f       	sbci	r23, 0xFF	; 255

00001288 <__divmodhi4_exit>:
    1288:	08 95       	ret

0000128a <__divmodsi4>:
    128a:	05 2e       	mov	r0, r21
    128c:	97 fb       	bst	r25, 7
    128e:	16 f4       	brtc	.+4      	; 0x1294 <__divmodsi4+0xa>
    1290:	00 94       	com	r0
    1292:	0f d0       	rcall	.+30     	; 0x12b2 <__negsi2>
    1294:	57 fd       	sbrc	r21, 7
    1296:	05 d0       	rcall	.+10     	; 0x12a2 <__divmodsi4_neg2>
    1298:	28 d0       	rcall	.+80     	; 0x12ea <__udivmodsi4>
    129a:	07 fc       	sbrc	r0, 7
    129c:	02 d0       	rcall	.+4      	; 0x12a2 <__divmodsi4_neg2>
    129e:	46 f4       	brtc	.+16     	; 0x12b0 <__divmodsi4_exit>
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <__negsi2>

000012a2 <__divmodsi4_neg2>:
    12a2:	50 95       	com	r21
    12a4:	40 95       	com	r20
    12a6:	30 95       	com	r19
    12a8:	21 95       	neg	r18
    12aa:	3f 4f       	sbci	r19, 0xFF	; 255
    12ac:	4f 4f       	sbci	r20, 0xFF	; 255
    12ae:	5f 4f       	sbci	r21, 0xFF	; 255

000012b0 <__divmodsi4_exit>:
    12b0:	08 95       	ret

000012b2 <__negsi2>:
    12b2:	90 95       	com	r25
    12b4:	80 95       	com	r24
    12b6:	70 95       	com	r23
    12b8:	61 95       	neg	r22
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	8f 4f       	sbci	r24, 0xFF	; 255
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	08 95       	ret

000012c2 <__udivmodhi4>:
    12c2:	aa 1b       	sub	r26, r26
    12c4:	bb 1b       	sub	r27, r27
    12c6:	51 e1       	ldi	r21, 0x11	; 17
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <__udivmodhi4_ep>

000012ca <__udivmodhi4_loop>:
    12ca:	aa 1f       	adc	r26, r26
    12cc:	bb 1f       	adc	r27, r27
    12ce:	a6 17       	cp	r26, r22
    12d0:	b7 07       	cpc	r27, r23
    12d2:	10 f0       	brcs	.+4      	; 0x12d8 <__udivmodhi4_ep>
    12d4:	a6 1b       	sub	r26, r22
    12d6:	b7 0b       	sbc	r27, r23

000012d8 <__udivmodhi4_ep>:
    12d8:	88 1f       	adc	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	5a 95       	dec	r21
    12de:	a9 f7       	brne	.-22     	; 0x12ca <__udivmodhi4_loop>
    12e0:	80 95       	com	r24
    12e2:	90 95       	com	r25
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	08 95       	ret

000012ea <__udivmodsi4>:
    12ea:	a1 e2       	ldi	r26, 0x21	; 33
    12ec:	1a 2e       	mov	r1, r26
    12ee:	aa 1b       	sub	r26, r26
    12f0:	bb 1b       	sub	r27, r27
    12f2:	fd 01       	movw	r30, r26
    12f4:	0d c0       	rjmp	.+26     	; 0x1310 <__udivmodsi4_ep>

000012f6 <__udivmodsi4_loop>:
    12f6:	aa 1f       	adc	r26, r26
    12f8:	bb 1f       	adc	r27, r27
    12fa:	ee 1f       	adc	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	a2 17       	cp	r26, r18
    1300:	b3 07       	cpc	r27, r19
    1302:	e4 07       	cpc	r30, r20
    1304:	f5 07       	cpc	r31, r21
    1306:	20 f0       	brcs	.+8      	; 0x1310 <__udivmodsi4_ep>
    1308:	a2 1b       	sub	r26, r18
    130a:	b3 0b       	sbc	r27, r19
    130c:	e4 0b       	sbc	r30, r20
    130e:	f5 0b       	sbc	r31, r21

00001310 <__udivmodsi4_ep>:
    1310:	66 1f       	adc	r22, r22
    1312:	77 1f       	adc	r23, r23
    1314:	88 1f       	adc	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	1a 94       	dec	r1
    131a:	69 f7       	brne	.-38     	; 0x12f6 <__udivmodsi4_loop>
    131c:	60 95       	com	r22
    131e:	70 95       	com	r23
    1320:	80 95       	com	r24
    1322:	90 95       	com	r25
    1324:	9b 01       	movw	r18, r22
    1326:	ac 01       	movw	r20, r24
    1328:	bd 01       	movw	r22, r26
    132a:	cf 01       	movw	r24, r30
    132c:	08 95       	ret

0000132e <_exit>:
    132e:	f8 94       	cli

00001330 <__stop_program>:
    1330:	ff cf       	rjmp	.-2      	; 0x1330 <__stop_program>
